Accelerating Neuronal Genetic Research in C. elegans with
Computer Vision & Machine Learning

Roshni Cooper
Stanford University
385 Serra Mall, Stanford, CA 94305
rccooper@stanford.edu

Abstract

This ﬁnal project for CS229 implements a software sys-
tem to classify C. elegans as wild-type or mutant based on
biological ﬂuorescence images of synapses, the connections
between neurons and muscles, in the worms. The project
uses features of two neurons in the images, the DA8 and
DA9 motorneurons, which were calculated as part of the
CS231A ﬁnal project. Using these features, the software
trains an SVM using a Radial Basis Function kernel. The
software was cross-validated on over 150 images with 75%
accuracy. The input images are very noisy and blurry, so
human accuracy can be as low as 60%. In comparison, the
software is precise.

Future Distribution Permission
The author(s) of this report give permission
for this document to be distributed to Stanford-
afﬁliated students taking future courses.

1. Introduction
1.1. Motivation
For the CS231A and CS229 ﬁnal project, I de-
veloped software to analyze biological ﬂuores-
cence images of synapses, the connections be-
tween neurons and muscles, in the nematode C.
elegans. Synapses appear as lines of dots, with
varying intensity and spacing. Figures 1a and 1b
show images of the DA8 and DA9 motorneurons,
which I will be focusing on for this project. Each
motorneuron signals to different muscles in the
worm, and together they help the worm move.
The DA9 synapses are tagged with two ﬂuores-
cence proteins, GFP (green ﬂuorescence protein)
and mCherry (a red ﬂuorescence protein). When

excited, the green and red ﬂuorophores in the
DA9 synapses become visible, and the synapses
appear yellow. The DA8 synapses are tagged only
with one ﬂuorescence protein, so the red dots in
the image represent the DA8 synapses. Figure
1a shows a normal, wild-type worm. The yel-
low and red dots are distinctly separated in this
worm [14]. On the other hand, Figure 1b shows
a mutant worm, with overlapping DA8 and DA9
synapses. The overlap causes the same muscles
to receive neurotransmitters from two different
motorneurons. These potentially conﬂicting sig-
nals can hamper the movement of the worms.
Understanding the genes and biological mecha-
nisms that cause the motorneurons to develop in-
correctly, as in in Figure 1b, can ultimately help
to explain neuromuscular function and diseases.

To perform this genetic research, biologists
image hundreds of individual worms, and then,
based on various visual characteristics of the
synapses, they decide whether the animal is wild-
type or mutant. These characteristics include the
intensity of the synapses, the position of synapses,
etc. If the worm is a mutant, its genome is studied
further to learn more about the genetics behind
the nervous system. Currently, biologists look at
hundreds of randomly mutagenized worms and
search for mutant animals to set aside. Because
the decision is made manually, the process is te-
dious, subjective, and error-prone. Hence, I de-
veloped software to use computer vision and ma-
chine learning to identify the mutant worms.
I
focused on identifying animals that have a muta-

(a)

(b)

(c)
(d)
Figure 1: Example input images and corresponding output masks: (a) Wild-type input image. (b) Mutant input image. (c)
Wild-type output synapse mask. (d) Mutant output synapse mask.

tion in the gene plx-1, such as the worm in Figure
1b. In the future, this software could be used to
identify other mutants as well.

1.2. Problem Statement

The project comprises two main tasks: 1. iden-
tifying the synapses in an image, and 2.
us-
ing the synapses to determine whether the animal
is a wild-type or a mutant. Part (1) is a com-
puter vision problem and was implemented for
the CS231A ﬁnal project, which will be brieﬂy
mentioned in this report. Part (2) has been com-
pleted for the CS229 ﬁnal project and will be de-
tailed in this document.

1.4. Related Work

With advancements in ﬂuorescence imaging in
the last few decades, biological research has be-
come increasing visual. Biologists are learning
more and more about, for example, the nervous
system by pouring over countless images. Sur-
prisingly, computer vision and machine learn-
ing are still largely unused by most biologists
[6]. Some such techniques have been applied to
neuronal research, and these approaches involve
using SVM to detect synapses in an image, as
in [12], and using SVM and PCA to determine
whether the animal is wild-type or mutant, as in
[5] and [3]. These techniques have been shown to
be reliable given a large set of training data.

1.3. Technical Approach Overview

To solve the problem of
identifying the
synapses, the software ﬁrst identiﬁes which pixels
belong to the synapses of the DA8 and DA9 neu-
rons. Then it extracts various features from the
images, such as the length of the synaptic region
or the mean intensity of the synapses, and uses
those features to train an SVM using the Radial
Basis Function kernel.

2. Technical Approach

2.1. Synapse Extraction

Figure 2 shows a high-level block diagram of
the software for synapse extraction portion of the
project (the CS231A project). Synapses are found
separately in the red channel, using linear ﬁlter-
ing, and the green channel, using K-means clus-
tering. The resulting images of the synapses in the
two channels are combined to determine which

Figure 2: Final Project Block Diagram.

synapses belong to the DA8 motorneuron and
which belong to DA9, yielding two mask images
as output. For more details, see the ﬁnal report
for CS231A [4]. Figure 1 shows two input im-
ages (1a and 1b) with their corresponding output
synapse masks (1c and 1d).

2.2. Image Classiﬁcation
2.2.1 Features

The ﬁrst step in performing the image classiﬁca-
tion is selecting which features to use. This por-
tion of the code uses information from both the
original image and the mask generated in the pre-
vious section. The features of interest are shown
in Table 1. Each of these features were calcu-
lated for four synaptic regions The most obvious
three regions are all of the synapses (both DA8
and DA9), only the DA8 synapses, and only the
DA9 synapses. The features were also calculated
for the overlapping region at the border of the
DA8 and DA9 synaptic regions. Because of vari-
ations in worm size, imaging intensity, etc., the
ratios of each of the features from the overlap to
the three ﬁrst regions were also calculated. For
example, the ratio of totalArea of the over-
lapping region to totalArea of the red synap-
tic region was another feature. Taking the ratio
helped to normalize the overlap from image to im-
age, giving a better sense of “how much” overlap
a worm’s neurons actually exhibited.
Once the features were selected, each feature
was scaled to the range [−1, +1] in order to give
each feature equal weighting in the training pro-

cess [1]. The feature scaling was performed on
the entire data set as a whole, since there was no
speciﬁc training data versus test data.
The data set, which is described in greater de-
tail in later sections, contained 153 images. Since
42 features seemed like a large number of features
given the data set [8], I tried to reduce the number
of features to avoid any overﬁtting of the data. I
tried two methods for reducing the number of fea-
tures. First, I ran cross-validation with each fea-
ture individually. Then I sorted the features based
on accuracy, i.e., F = {f1 , f2 , . . . f42}, where the
accuracy with fi is greater than the accuracy with
feature fi+1 . Next, I ran cross-validation with
both {f1 , f2}, then with {f1 , f2 , f3}, etc., and kept
adding features. The intention was to stop adding
features when the accuracy of the cross-validation
was no longer increasing. Adding features kept
increasing the accuracy, though, so I tried another
method of feature reduction.
Instead of sorting
the features based on the cross-validation accu-
racy they yielded, I sorted them based on the vari-
ance of the feature vector. Again, adding more
features into the mix only improved the accuracy,
so I kept all 42 features for training the SVM.

2.2.2 Model Parameters

The SVM to classify the images was created us-
ing LIBSVM [2] and LIBLINEAR [7]. The linear
and polynomial kernels yielded worse accuracy
than the Radial Bias Function kernel (essentially a
Gaussian kernel). Furthermore, it has been shown
that the RBF kernel can emulate the performance

meanArea

Feature
num
totalArea

Description
Number of Synapses
Total Area Occupied
by Synapses
Mean Area Occupied
per Synapse
totalIntensity Total Intensity
of All Synapses
Mean Intensity Per Pixel
of All Synapses
Distance Between
Terminal Synapses

meanIntensity

len

Calculated on. . . Using . . .
MATLAB’s bwlabel
Output Mask
Output Mask
MATLAB’s regionprops’s “Area” property

Output Mask

totalArea divided by num

Input Image &
Output Mask
Input Image &
Output Mask
Output Mask

Table 1: Features

MATLAB’s regionprops’s “MeanIntensity”
property multiplied by num
totalIntensity divided by totalArea

Euclidean distance between leftmost synapse
and rightmost synapse

of both linear and sigmoidal kernels, so it encom-
passes multiple models [9], [11].
The parameters of the RBF kernel are C and
γ . A grid search was used to try 1600 combi-
nations of C (logarithmically spaced from 1 to
1010 ) and γ (logarithmically spaced from 10−10
to 1).
Since there was no separate training
set from the test set of data, three-fold cross-
validation was used to calculate the accuracy
of the SVM. Hence the options string input to
the function svmtrain in MATLAB was ’-c
16237.7674 -g 0.0023357 -v 3’.

3. Experiment
3.1. Data Set
The software was evaluated on images of both
wild-type and mutant worms captured in my re-
I grew wild-type and plx-1 mutant
search lab.
worms, and captured those images using a mi-
croﬂuidics system developed at Georgia Tech [3].
This system allows the user to image multiple
worms per minute, which is faster than the current
process of selecting individual worms and placing
them on slides.
Due to the size of the microﬂuidics system
imaging chamber, the worms need to be the same
age when imaged. C. elegans grow very quickly
(their lifespan is less than a week), so special
precautions need to be taken to synchronize the
worms’ ages. Worms are bleached to isolate their
eggs, which are placed on Petri dishes with bac-
teria to begin growing at the same time. Then the

78
Wild-type Images
75
Mutant Images
Total Images
153
Table 2: Data Set

Cross-Validation Accuracy
Human Accuracy
Accuracy Improvement
Table 3: Accuracy

75%
58%
29%

worms are sent through the microﬂuidics system
to be imaged. I imaged over 150 worms over mul-
tiple imaging sessions (see Table 2). Then I used
those images to train and test my software.

3.2. Evaluation

3.2.1 Accuracy

According to biologists who are familiar with the
microﬂuidics system, approximately 30%-50% of
the images captured with the system are consid-
ered usable for various reasons [10]. Sometimes
the worms are rotated, or other tissues block the
view of the synapses. Sometimes the worms are
still moving during imaging, so the output im-
ages are too blurry to use. The human accuracy
of 58% for classifying these images corroborates
this statistic (see Table 3).
In comparison, the
75% cross-validation accuracy of my software is
nearly a 30% improvement over the status quo.

3.2.2 Speed

A key beneﬁt of my software over the current
manual method of classifying C. elegans is the
increase in speed. The ﬂuorescence molecules
that are imaged are susceptible to photobleach-
ing when they are excited by the ﬂuorescent light
in the microscope. The photobleaching causes an
exponential decay in intensity [13], so it is criti-
cal to make decisions about the worm quickly. In
particular, when the biologists are classifying the
worms, if they are unable to classify them before
the ﬂuorescence molecules fade, my software can
still make those decisions accurately.
To ﬁnd the synapse masks manually, the user
needs to click on each pixel in synapse and clas-
sify which neuron it belongs to, which is an in-
credibly tedious process. Then, even if the biol-
ogist is not manually calculating all of the fea-
tures mentioned above, the user still needs to take
time to consider such a high-dimensional prob-
lem. Conversely, using my software, synapses
can be identiﬁed in an image, on average, within
4 seconds. I used MATLAB’s Proﬁler to track the
amount of time spent on processing each image in
my data set. Training the SVM takes time, but ob-
viously that step only needs to be completed once,
and does not increase the time to classify a worm
at the time of imaging.

4. Conclusion

For the CS229 ﬁnal project, I implemented
software to classify ﬂuorescent biological images
of synapses in C. elegans. The algorithm trained
an SVM with a Radial Basis Function kernel and
has 75% cross-validation accuracy, which is very
high given that biologists only consider about half
of the images captured with the microﬂuidics sys-
tem useful. The software also incorporates work
completed for the CS231A ﬁnal project, which
identiﬁes synapses in the noisy input images. The
entire software package can classify an image
quickly (on average within four seconds), making
it not only more accurate, but also much faster,
than a biologist.

Cell,

References
[1] C.-C. C. C.-W. Hsu and C.-J. Lin. A practical guide to sup-
port vector classiﬁcation. 2010.
[2] C.-C. Chang and C.-J. Lin. LIBSVM: A library for support
vector machines. ACM Transactions on Intelligent Systems
and Technology, 2:27:1–27:27, 2011. Software available at
http://www.csie.ntu.edu.tw/ cjlin/libsvm.
[3] K. Chung, M. Crane, and H. Lu. Automated on-chip rapid
microscopy, phenotyping and sorting of C. elegans. Nat
Meth, 5(7):638–643, 2008.
[4] R. Cooper. Accelerating neuronal genetic research in C. el-
egans with computer vision & machine learning. CS231A
Final Project Report, 2012.
[5] M. M. Crane, J. N. Stirman, C. Ou, P. T. Kurshan, J. M.
Rehg, and K. S. H. Lu. Autonomous screening of c. elegans
identiﬁes genes implicated in synaptogenesis. Nat Meth,
9(10):977–80, 2012.
[6] G. Danuser.
Computer vision in cell biology.
147(5):973–978, 2011.
[7] R.-E. Fan, K.-W. Chang, C.-J. Hsieh, X.-R. Wang, and C.-J.
Lin. LIBLINEAR: A library for large linear classiﬁcation.
Journal of Machine Learning Research, 9:1871–1874, 2008.
[8] J. Hua, Z. Xiong, J. Lowey, E. Suh, and E. R. Dougherty. Op-
timal number of features as a function of sample size for var-
ious classiﬁcation rules. Bioinformatics, 21(8):1509–1515,
2005.
[9] S. Keerthi and C. Lin. Asymptotic behaviors of support
vector machines with gaussian kernel. Neural computation,
15(7):1667–1689, 2003.
[10] P. Kurshan. Personal communication, 2012.
[11] H. Lin and C. Lin. A study on sigmoid kernels for svm and
the training of non-psd kernels by smo-type methods, 2003.
[12] A. S. Miguel. Personal communication, 2012.
[13] N. B. Vicente, J. E. D. Zamboni, J. F. Adur, E. V. Paravani,
and V. H. Casco. Photobleaching correction in ﬂuorescence
microscopy images. Journal of Physics: Conference Series,
90(1):012068, 2007.
[14] J. G. White, E. Southgate, J. N. Thomson, and S. Brenner.
The structure of the ventral nerve cord of caenorhabditis ele-
gans. Philos Trans R Soc Lond B Biol Sci, 275(938):327–48,
1976.
Honor Code Acknowledgements
The software developed for the CS231A and
CS229 ﬁnal projects will be used in my research
lab at Stanford (Prof. Kang Shen’s lab in Bi-
ology). The synapses were extracted for the
CS231A ﬁnal project, and then the images were
classiﬁed for the CS229 ﬁnal project. I worked
by myself so all of the completed code was im-
plemented by only me.

