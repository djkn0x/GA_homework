Learning to Discover Social Circles in Ego Networks

Julian McAuley
Stanford, USA
jmcauley@cs.stanford.edu

Jure Leskovec
Stanford, USA
jure@cs.stanford.edu

Abstract

Our personal social networks are big and cluttered, and currently there is no good
way to organize them. Social networking sites allow users to manually categorize
their friends into social circles (e.g. ‘circles’ on Google+, and ‘lists’ on Facebook
and Twitter), however they are laborious to construct and must be updated when-
ever a user’s network grows. We deﬁne a novel machine learning task of identi-
fying users’ social circles. We pose the problem as a node clustering problem on
a user’s ego-network, a network of connections between her friends. We develop
a model for detecting circles that combines network structure as well as user pro-
ﬁle information. For each circle we learn its members and the circle-speciﬁc user
proﬁle similarity metric. Modeling node membership to multiple circles allows us
to detect overlapping as well as hierarchically nested circles. Experiments show
that our model accurately identiﬁes circles on a diverse set of data from Facebook,
Google+, and Twitter for all of which we obtain hand-labeled ground-truth.

1

Introduction

Online social networks allow users to follow streams of posts generated by hundreds of their friends
and acquaintances. Users’ friends generate overwhelming volumes of information and to cope with
the ‘information overload’ they need to organize their personal social networks. One of the main
mechanisms for users of social networking sites to organize their networks and the content gener-
ated by them is to categorize their friends into what we refer to as social circles. Practically all
major social networks provide such functionality, for example, ‘circles’ on Google+, and ‘lists’ on
Facebook and Twitter. Once a user creates her circles, they can be used for content ﬁltering (e.g. to
ﬁlter status updates posted by distant acquaintances), for privacy (e.g. to hide personal information
from coworkers), and for sharing groups of users that others may wish to follow.
Currently, users in Facebook, Google+ and Twitter identify their circles either manually, or in a
na¨ıve fashion by identifying friends sharing a common attribute. Neither approach is particularly
satisfactory: the former is time consuming and does not update automatically as a user adds more
friends, while the latter fails to capture individual aspects of users’ communities, and may function
poorly when proﬁle information is missing or withheld.
In this paper we study the problem of automatically discovering users’ social circles. In particular,
given a single user with her personal social network, our goal is to identify her circles, each of which
is a subset of her friends. Circles are user-speciﬁc as each user organizes her personal network of
friends independently of all other users to whom she is not connected. This means that we can
formulate the problem of circle detection as a clustering problem on her ego-network, the network
of friendships between her friends. In Figure 1 we are given a single user u and we form a network
between her friends vi . We refer to the user u as the ego and to the nodes vi as alters. The task then
is to identify the circles to which each alter vi belongs, as in Figure 1. In other words, the goal is to
ﬁnd nested as well as overlapping communities/clusters in u’s ego-network.
Generally, there are two useful sources of data that help with this task. The ﬁrst is the set of edges
of the ego-network. We expect that circles are formed by densely-connected sets of alters [20].

1

Figure 1: An ego-network with labeled circles. This network shows typical behavior that we ob-
serve in our data: Approximately 25% of our ground-truth circles (from Facebook) are contained
completely within another circle, 50% overlap with another circle, and 25% of the circles have no
members in common with any other circle. The goal is to discover these circles given only the
network between the ego’s friends. We aim to discover circle memberships and to ﬁnd common
properties around which circles form.

However, different circles overlap heavily, i.e., alters belong to multiple circles simultaneously [1,
21, 28, 29], and many circles are hierarchically nested in larger ones (Figure 1). Thus it is important
to model an alter’s memberships to multiple circles. Secondly, we expect that each circle is not only
densely connected but its members also share common properties or traits [18, 28]. Thus we need
to explicitly model different dimensions of user proﬁles along which each circle emerges.
We model circle afﬁliations as latent variables, and similarity between alters as a function of com-
mon proﬁle information. We propose an unsupervised method to learn which dimensions of proﬁle
similarity lead to densely linked circles. Our model has two innovations: First, in contrast to mixed-
membership models [2] we predict hard assignment of a node to multiple circles, which proves
critical for good performance. Second, by proposing a parameterized deﬁnition of proﬁle similar-
ity, we learn the dimensions of similarity along which links emerge. This extends the notion of
homophily [12] by allowing different circles to form along different social dimensions, an idea re-
lated to the concept of Blau spaces [16]. We achieve this by allowing each circle to have a different
deﬁnition of proﬁle similarity, so that one circle might form around friends from the same school,
and another around friends from the same location. We learn the model by simultaneously choosing
node circle memberships and proﬁle similarity functions so as to best explain the observed data.
We introduce a dataset of 1,143 ego-networks from Facebook, Google+, and Twitter, for which we
obtain hand-labeled ground-truth from 5,636 different circles.1 Experimental results show that by
simultaneously considering social network structure as well as user proﬁle information our method
performs signiﬁcantly better than natural alternatives and the current state-of-the-art. Besides being
more accurate our method also allows us to generate automatic explanations of why certain nodes
belong to common communities. Our method is completely unsupervised, and is able to automati-
cally determine both the number of circles as well as the circles themselves.
Further Related Work.
Topic-modeling techniques have been used to uncover ‘mixed-
memberships’ of nodes to multiple groups [2], and extensions allow entities to be attributed with
text information [3, 5, 11, 13, 26]. Classical algorithms tend to identify communities based on node
features [9] or graph structure [1, 21], but rarely use both in concert. Our work is related to [30] in
the sense that it performs clustering on social-network data, and [23], which models memberships
to multiple communities. Finally, there are works that model network data similar to ours [6, 17],
though the underlying models do not form communities. As we shall see, our problem has unique
characteristics that require a new model. An extended version of our article appears in [15].

2 A Generative Model for Friendships in Social Circles

We desire a model of circle formation with the following properties: (1) Nodes within circles should
have common properties, or ‘aspects’. (2) Different circles should be formed by different aspects,
e.g. one circle might be formed by family members, and another by students who attended the same
university. (3) Circles should be allowed to overlap, and ‘stronger’ circles should be allowed to form
within ‘weaker’ ones, e.g. a circle of friends from the same degree program may form within a circle

1http://snap.stanford.edu/data/

2

from the same university, as in Figure 1. (4) We would like to leverage both proﬁle information and
network structure in order to identify the circles. Ideally we would like to be able to pinpoint which
aspects of a proﬁle caused a circle to form, so that the model is interpretable by the user.
The input to our model is an ego-network G = (V , E ), along with ‘proﬁles’ for each user v ∈ V .
The ‘center’ node u of the ego-network (the ‘ego’) is not included in G, but rather G consists only of
u’s friends (the ‘alters’). We deﬁne the ego-network in this way precisely because creators of circles
do not themselves appear in their own circles. For each ego-network, our goal is to predict a set of
circles C = {C1 . . . CK }, Ck ⊆ V , and associated parameter vectors θk that encode how each circle
emerged. We encode ‘user proﬁles’ into pairwise features φ(x, y) that in some way capture what
properties the users x and y have in common. We ﬁrst describe our model, which can be applied
using arbitrary feature vectors φ(x, y), and in Section 5 we describe several ways to construct feature
vectors φ(x, y) that are suited to our particular application.
We describe a model of social circles that treats circle memberships as latent variables. Nodes within
a common circle are given an opportunity to form an edge, which naturally leads to hierarchical and
overlapping circles. We will then devise an unsupervised algorithm to jointly optimize the latent
variables and the proﬁle similarity parameters so as to best explain the observed network data.
(cid:40) (cid:88)
(cid:41)
Our model of social circles is deﬁned as follows. Given an ego-network G and a set of K circles
C = {C1 . . . CK }, we model the probability that a pair of nodes (x, y) ∈ V × V form an edge as
− (cid:88)
p((x, y) ∈ E ) ∝ exp
(cid:104)φ(x, y), θk (cid:105)
αk (cid:104)φ(x, y), θk (cid:105)
(cid:124)
(cid:123)(cid:122)
(cid:125)
(cid:124)
(cid:123)(cid:122)
(cid:125)
Ck⊇{x,y}
Ck(cid:43){x,y}
circles containing both nodes
all other circles
For each circle Ck , θk is the proﬁle similarity parameter that we will learn. The idea is that
(cid:104)φ(x, y), θk (cid:105) is high if both nodes belong to Ck , and low if either of them do not (αk trades-off
these two effects). Since the feature vector φ(x, y) encodes the similarity between the proﬁles of
two users x and y , the parameter vector θk encodes what dimensions of proﬁle similarity caused the
circle to form, so that nodes within a circle Ck should ‘look similar’ according to θk .
p(e ∈ E ) × (cid:89)
PΘ (G; C ) = (cid:89)
Considering that edges e = (x, y) are generated independently, we can write the probability of G as
p(e /∈ E ),
(2)
e∈E
e(cid:54)∈E
dk (e) = δ(e ∈ Ck ) − αk δ(e /∈ Ck ), Φ(e) = (cid:88)
where Θ = {(θk , αk )}k=1...K is our set of model parameters. Deﬁning the shorthand notation
dk (e) (cid:104)φ(e), θk (cid:105)
Ck ∈C
log (cid:16)1 + eΦ(e)(cid:17)
lΘ (G; C ) = (cid:88)
Φ(e) − (cid:88)
allows us to write the log-likelihood of G:
e∈V ×V
e∈E
Next, we describe how to optimize node circle memberships C as well as the parameters of the user
proﬁle similarity functions Θ = {(θk , αk )} (k = 1 . . . K ) given a graph G and user proﬁles.

(3)

.

.

(1)

3 Unsupervised Learning of Model Parameters
Treating circles C as latent variables, we aim to ﬁnd ˆΘ = { ˆθ , ˆα} so as to maximize the regularized
log-likelihood of (eq. 3), i.e.,

lΘ (G; C ) − λΩ(θ).
ˆΘ, ˆC = argmax
Θ,C
We solve this problem using coordinate ascent on Θ and C [14]:
lΘt (G; C )
C t = argmax
C
lΘ (G; C t ) − λΩ(θ).
Θt+1 = argmax
Θ

3

(4)

(5)

(6)

∂ l
∂ θk

−de (k)θk

eΦ(e)
1 + eΦ(e)

(7)

Ee (1, 1) =

δ(e /∈ Ck ) (cid:104)φ(e), θk (cid:105) .

Noting that (eq. 3) is concave in θ , we optimize (eq. 6) through gradient ascent, where partial deriva-
+ X
= X
tives are given by
dk (e)θk − ∂Ω
1 + eΦ(e) − X
= X
∂ θk
e∈V ×V
e∈E
eΦ(e)
∂ l
δ(e /∈ Ck ) (cid:104)φ(e), θk (cid:105)
∂αk
e∈V ×V
e∈E
lΘ (G; C \ Ci ) can be expressed as pseudo-boolean
For ﬁxed C \ Ci we note that solving argmax
(cid:88)
Ci
optimization in a pairwise graphical model [4], i.e., it can be written as
E(x,y) (δ(x ∈ C ), δ(y ∈ C )).
Ck = argmax
appear outside of Ck . Deﬁning ok (e) = (cid:80)
(x,y)∈V ×V
C
In words, we want edges with high weight (under θk ) to appear in Ck , and edges with low weight to
 ok (e) − αk (cid:104)φ(e), θk (cid:105) − log(1 + eok (e)−αk (cid:104)φ(e),θk (cid:105) ),
dk (e) (cid:104)φ(e), θk (cid:105) the energy Ee of (eq. 7) is
Ck ∈C\Ci
e ∈ E
 ok (e) + (cid:104)φ(e), θk (cid:105) − log(1 + eok (e)+(cid:104)φ(e),θk (cid:105) ),
Ee (0, 0) = Ee (0, 1) = Ee (1, 0) =
− log(1 + eok (e)−αk (cid:104)φ(e),θk (cid:105) ),
e /∈ E
e ∈ E
− log(1 + eok (e)+(cid:104)φ(e),θk (cid:105) ),
e /∈ E
By expressing the problem in this form we can draw upon existing work on pseudo-boolean op-
timization. We use the publicly-available ‘QPBO’ software described in [22], which is able to
accurately approximate problems of the form shown in (eq. 7). We solve (eq. 7) for each Ck in a
random order.
We regularize (eq. 4) using the (cid:96)1 norm, i.e., Ω(θ) = (cid:80)K
(cid:80)|θk |
The two optimization steps of (eq. 5) and (eq. 6) are repeated until convergence, i.e., until C t+1 = C t .
i=1 |θki |, which leads to sparse (and
k=1
readily interpretable) parameters. Since ego-networks are naturally relatively small, our algorithm
can readily handle problems at the scale required. In the case of Facebook, the average ego-network
has around 190 nodes [24], while the largest network we encountered has 4,964 nodes. Note that
since the method is unsupervised, inference is performed independently for each ego-network. This
means that our method could be run on the full Facebook graph (for example), as circles are inde-
pendently detected for each user, and the ego-networks typically contain only hundreds of nodes.
Hyperparameter estimation. To choose the optimal number of circles, we choose K so as to
minimize an approximation to the Bayesian Information Criterion (BIC) [2, 8, 25],
ˆK = argmin
BIC (K ; ΘK )
K
where ΘK is the set of parameters predicted for a particular number of communities K , and
BIC (K ; ΘK ) (cid:39) −2lΘK (G; C ) + |ΘK | log |E |.
(9)
The regularization parameter λ ∈ {0, 1, 10, 100} was determined using leave-one-out cross valida-
tion, though in our experience did not signiﬁcantly impact performance.

.

(8)

4 Dataset Description

Our goal is to evaluate our unsupervised method on ground-truth data. We expended signiﬁcant time,
effort, and resources to obtain high quality hand-labeled data.2 We were able to obtain ego-networks
and ground-truth from three major social networking sites: Facebook, Google+, and Twitter.
From Facebook we obtained proﬁle and network data from 10 ego-networks, consisting of 193 cir-
cles and 4,039 users. To do so we developed our own Facebook application and conducted a survey
of ten users, who were asked to manually identify all the circles to which their friends belonged. On
average, users identiﬁed 19 circles in their ego-networks, with an average circle size of 22 friends.
Examples of such circles include students of common universities, sports teams, relatives, etc.

2http://snap.stanford.edu/data/

4

1 − σ

(cid:48)
x,y

=

1 − σx,y =

ﬁrst name : Dil ly
last name : Knox
ﬁrst name : Alan
last name : Turing
work : position : Cryptanalyst
work : location : GC &CS
work : location : Royal Navy
education : name : Cambridge
education : type : Col lege
education : name : Princeton
education : type : Graduate School

3777777777777775
2666666666666664
0
0
0
0
1
1
0
1
1
0
2666664
3777775
0
0
ﬁrst name
0
last name
1
work : position
1
work : location
1
education : name
1
education : type
Figure 2: Feature construction. Proﬁles are tree-structured, and we construct features by com-
paring paths in those trees. Examples of trees for two users x (blue) and y (pink) are shown at
left. Two schemes for constructing feature vectors from these proﬁles are shown at right: (1) (top
right) we construct binary indicators measuring the difference between leaves in the two trees, e.g.
‘work→position→Cryptanalyst’ appears in both trees. (2) (bottom right) we sum over the leaf nodes
in the ﬁrst scheme, maintaining the fact that the two users worked at the same institution, but dis-
carding the identity of that institution.
For the other two datasets we obtained publicly accessible data. From Google+ we obtained data
from 133 ego-networks, consisting of 479 circles and 106,674 users. The 133 ego-networks rep-
resent all 133 Google+ users who had shared at least two circles, and whose network information
was publicly accessible at the time of our crawl. The Google+ circles are quite different to those
from Facebook, in the sense that their creators have chosen to release them publicly, and because
Google+ is a directed network (note that our model can very naturally be applied to both to directed
and undirected networks). For example, one circle contains candidates from the 2012 republican
primary, who presumably do not follow their followers, nor each other. Finally, from Twitter we
obtained data from 1,000 ego-networks, consisting of 4,869 circles (or ‘lists’ [10, 19, 27, 31]) and
81,362 users. The ego-networks we obtained range in size from 10 to 4,964 nodes.
Taken together our data contains 1,143 different ego-networks, 5,541 circles, and 192,075 users.
The size differences between these datasets simply reﬂects the availability of data from each of the
three sources. Our Facebook data is fully labeled, in the sense that we obtain every circle that a
user considers to be a cohesive community, whereas our Google+ and Twitter data is only partially
labeled, in the sense that we only have access to public circles. We design our evaluation procedure
in Section 6 so that partial labels cause no issues.

5 Constructing Features from User Proﬁles

Proﬁle information in all of our datasets can be represented as a tree where each level encodes
increasingly speciﬁc information (Figure 2, left). From Google+ we collect data from six categories
(gender, last name, job titles, institutions, universities, and places lived). From Facebook we collect
data from 26 categories, including hometowns, birthdays, colleagues, political afﬁliations, etc. For
Twitter, many choices exist as proxies for user proﬁles; we simply collect data from two categories,
namely the set of hashtags and mentions used by each user during two-weeks’ worth of tweets.
‘Categories’ correspond to parents of leaf nodes in a proﬁle tree, as shown in Figure 2.
We ﬁrst describe a difference vector to encode the relationship between two proﬁles. A non-technical
description is given in Figure 2. Suppose that users v ∈ V each have an associated proﬁle tree Tv ,
and that l ∈ Tv is a leaf in that tree. We deﬁne the difference vector σx,y between two users x and y
as a binary indicator encoding the proﬁle aspects where users x and y differ (Figure 2, top right):
σx,y [l] = δ((l ∈ Tx ) (cid:54)= (l ∈ Ty )).
(10)
Note that feature descriptors are deﬁned per ego-network: while many thousands of high schools
(for example) exist among all Facebook users, only a small number appear among any particular
user’s friends.
Although the above difference vector has the advantage that it encodes proﬁle information at a ﬁne
granularity, it has the disadvantage that it is high-dimensional (up to 4,122 dimensions in the data

5

ﬁrst namelast nameworkAlanTuringpositionCryptanalystcompanyGC&CSeducationnameCambridgetypeCollegenamePrincetontypeGraduate Schoolﬁrst namelast nameworkDillyKnoxpositionCryptanalystcompanyGC&CSeducationpositionCryptanalystcompanyRoyal NavynameCambridgetypeCollegewe considered). One way to address this is to form difference vectors based on the parents of leaf
nodes: this way, we encode what proﬁle categories two users have in common, but disregard speciﬁc
[p] = (cid:80)
values (Figure 2, bottom right). For example, we encode how many hashtags two users tweeted in
common, but discard which hashtags they tweeted:
σ (cid:48)
l∈children (p)σx,y [l].
(11)
x,y
This scheme has the advantage that it requires a constant number of dimensions, regardless of the
size of the ego-network (26 for Facebook, 6 for Google+, 2 for Twitter, as described above).
Based on the difference vectors σx,y (and σ (cid:48)
x,y ) we now describe how to construct edge features
φ(x, y). The ﬁrst property we wish to model is that members of circles should have common rela-
tionships with each other:
φ1 (x, y) = (1; −σx,y ).
(12)
The second property we wish to model is that members of circles should have common relationships
φ2 (x, y) = (1; −(cid:12)(cid:12)σx,u − σy ,u
(cid:12)(cid:12))
to the ego of the ego-network. In this case, we consider the proﬁle tree Tu from the ego user u. We
then deﬁne our features in terms of that user:
(13)
(|σx,u − σy ,u | is taken elementwise). These two parameterizations allow us to assess which mecha-
nism better captures users’ subjective deﬁnition of a circle. In both cases, we include a constant fea-
ture (‘1’), which controls the probability that edges form within circles, or equivalently it measures
the extent to which circles are made up of friends. Importantly, this allows us to predict memberships
even for users who have no proﬁle information, simply due to their patterns of connectivity.
), ψ2 (x, y) = (1; −(cid:12)(cid:12)σ (cid:48)
(cid:12)(cid:12)).
Similarly, for the ‘compressed’ difference vector σ (cid:48)
x,y , we deﬁne
x,u − σ (cid:48)
ψ1 (x, y) = (1; −σ (cid:48)
(14)
y ,u
x,y
To summarize, we have identiﬁed four ways of representing the compatibility between different
aspects of proﬁles for two users. We considered two ways of constructing a difference vector (σx,y
vs. σ (cid:48)
x,y ) and two ways of capturing the compatibility of a pair of proﬁles (φ(x, y) vs. ψ(x, y)).

6 Experiments

Although our method is unsupervised, we can evaluate it on ground-truth data by examining the
maximum-likelihood assignments of the latent circles C = {C1 . . . CK } after convergence. Our
goal is that for a properly regularized model, the latent variables will align closely with the human
labeled ground-truth circles ¯C = { ¯C1 . . . ¯C ¯K }.
(cid:16) |C \ ¯C |
(cid:17)
Evaluation metrics. To measure the alignment between a predicted circle C and a ground-truth
circle ¯C , we compute the Balanced Error Rate (BER) between the two circles [7], BER(C, ¯C ) =
|C | + | ¯C \C |
1
. This measure assigns equal importance to false positives and false negatives,
| ¯C |
2
so that trivial or random predictions incur an error of 0.5 on average. Such a measure is preferable to
the 0/1 loss (for example), which assigns extremely low error to trivial predictions. We also report
the F1 score, which we ﬁnd produces qualitatively similar results.
Aligning predicted and ground-truth circles. Since we do not know the correspondence between
(cid:88)
circles in C and ¯C , we compute the optimal match via linear assignment by maximizing:
1
(1 − BER(C, f (C ))),
max
|f |
f :C→ ¯C
C∈dom(f )
where f is a (partial) correspondence between C and ¯C . That is, if the number of predicted circles |C |
is less than the number of ground-truth circles | ¯C |, then every circle C ∈ C must have a match ¯C ∈ ¯C ,
but if |C | > | ¯C |, we do not incur a penalty for additional predictions that could have been circles
but were not included in the ground-truth. We use established techniques to estimate the number of
circles, so that none of the baselines suffers a disadvantage by mispredicting ˆK = |C |, nor can any
method predict the ‘trivial’ solution of returning the powerset of all users. We note that removing the
bijectivity requirement (i.e., forcing all circles to be aligned by allowing multiple predicted circles
to match a single groundtruth circle or vice versa) lead to qualitatively similar results.

(15)

6

Figure 3: Performance on Facebook, Google+, and Twitter, in terms of the Balanced Error Rate
(top), and the F1 score (bottom). Higher is better. Error bars show standard error. The improvement
of our best features φ1 compared to the nearest competitor are signiﬁcant at the 1% level or better.

Baselines. We considered a wide number of baseline methods, including those that consider only
network structure, those that consider only proﬁle information, and those that consider both. First
we experimented with Mixed Membership Stochastic Block Models [2], which consider only net-
work information, and variants that also consider text attributes [5, 6, 13]. For each node, mixed-
membership models predict a stochastic vector encoding partial circle memberships, which we
threshold to generate ‘hard’ assignments. We also considered Block-LDA [3], where we generate
‘documents’ by treating aspects of user proﬁles as words in a bag-of-words model.
Secondly, we experimented with classical clustering algorithms, such as K-means and Hierarchical
Clustering [9], that form clusters based only on node proﬁles, but ignore the network. Conversely we
considered Link Clustering [1] and Clique Percolation [21], which use network information, but ig-
nore proﬁles. We also considered the Low-Rank Embedding approach of [30], where node attributes
and edge information are projected into a feature space where classical clustering techniques can
be applied. Finally we considered Multi-Assignment Clustering [23], which is promising in that it
predicts hard assignments to multiple clusters, though it does so without using the network.
Of the eight baselines highlighted above we report the three whose overall performance was the best,
namely Block-LDA [3] (which slightly outperformed mixed membership stochastic block models
[2]), Low-Rank Embedding [30], and Multi-Assignment Clustering [23].
Performance on Facebook, Google+, and Twitter Data. Figure 3 shows results on our Facebook,
Google+, and Twitter data. Circles were aligned as described in (eq. 15), with the number of circles
ˆK determined as described in Section 3. For non-probabilistic baselines, we chose ˆK so as to
maximize the modularity, as described in [20]. In terms of absolute performance our best model
φ1 achieves BER scores of 0.84 on Facebook, 0.72 on Google+ and 0.70 on Twitter (F1 scores are
0.59, 0.38, and 0.34, respectively). The lower F1 scores on Google+ and Twitter are explained by the
fact that many circles have not been maintained since they were initially created: we achieve high
recall (we recover the friends in each circle), but at low precision (we recover additional friends who
appeared after the circle was created).
Comparing our method to baselines we notice that we outperform all baselines on all datasets by a
statistically signiﬁcant margin. Compared to the nearest competitors, our best performing features
φ1 improve on the BER by 43% on Facebook, 26% on Google+, and 16% on Twitter (improvements
in terms of the F1 score are similar). Regarding the performance of the baseline methods, we
note that good performance seems to depend critically on predicting hard memberships to multiple
circles, using a combination of node and edge information; none of the baselines exhibit precisely
this combination, a shortcoming our model addresses.
Both of the features we propose (friend-to-friend features φ1 and friend-to-user features φ2 ) perform
similarly, revealing that both schemes ultimately encode similar information, which is not surprising,

7

FacebookGoogle+Twitter0.51.0Accuracy(1-BER).77.72.70.84.72.70Accuracyondetectedcommunities(1-BalancedErrorRate,higherisbetter)multi-assignmentclustering(Streich,Frank,etal.)low-rankembedding(Yoshida)block-LDA(BalasubramanyanandCohen)ourmodel(friend-to-friendfeaturesφ1,eq.12)ourmodel(friend-to-userfeaturesφ2,eq.13)ourmodel(compressedfeaturesψ1,eq.14)ourmodel(compressedfeaturesψ2,eq.14)FacebookGoogle+Twitter0.01.0Accuracy(F1score).40.38.34.59.38.34Accuracyondetectedcommunities(F1score,higherisbetter)multi-assignmentclustering(Streich,Frank,etal.)low-rankembedding(Yoshida)block-LDA(BalasubramanyanandCohen)ourmodel(friend-to-friendfeaturesφ1,eq.12)ourmodel(friend-to-userfeaturesφ2,eq.13)ourmodel(compressedfeaturesψ1,eq.14)ourmodel(compressedfeaturesψ2,eq.14)Figure 4: Three detected circles on a small ego-network from Facebook, compared to three ground-
truth circles (BER (cid:39) 0.81). Blue nodes: true positives. Grey: true negatives. Red: false positives.
Yellow: false negatives. Our method correctly identiﬁes the largest circle (left), a sub-circle con-
tained within it (center), and a third circle that signiﬁcantly overlaps with it (right).

Figure 5: Parameter vectors of four communities for a particular Facebook user. The top four plots
show ‘complete’ features φ1 , while the bottom four plots show ‘compressed’ features ψ1 (in both
cases, BER (cid:39) 0.78). For example the former features encode the fact that members of a particular
community tend to speak German, while the latter features encode the fact that they speak the same
language. (Personally identiﬁable annotations have been suppressed.)

since users and their friends have similar proﬁles. Using the ‘compressed’ features ψ1 and ψ2 does
not signiﬁcantly impact performance, which is promising since they have far lower dimension than
the full features; what this reveals is that it is sufﬁcient to model categories of attributes that users
have in common (e.g. same school, same town), rather than the attribute values themselves.
We found that all algorithms perform signiﬁcantly better on Facebook than on Google+ or Twitter.
There are a few explanations: Firstly, our Facebook data is complete, in the sense that survey partici-
pants manually labeled every circle in their ego-networks, whereas in other datasets we only observe
publicly-visible circles, which may not be up-to-date. Secondly, the 26 proﬁle categories available
from Facebook are more informative than the 6 categories from Google+, or the tweet-based proﬁles
we build from Twitter. A more basic difference lies in the nature of the networks themselves: edges
in Facebook encode mutual ties, whereas edges in Google+ and Twitter encode follower relation-
ships, which changes the role that circles serve [27]. The latter two points explain why algorithms
that use either edge or proﬁle information in isolation are unlikely to perform well on this data.
Qualitative analysis. Finally we examine the output of our model in greater detail. Figure 4 shows
results of our method on an example ego-network from Facebook. Different colors indicate true-,
false- positives and negatives. Our method is correctly able to identify overlapping circles as well
as sub-circles (circles within circles). Figure 5 shows parameter vectors learned for four circles for
a particular Facebook user. Positive weights indicate properties that users in a particular circle have
in common. Notice how the model naturally learns the social dimensions that lead to a social circle.
Moreover, the ﬁrst parameter that corresponds to a constant feature ‘1’ has the highest weight; this
reveals that membership to the same community provides the strongest signal that edges will form,
while proﬁle data provides a weaker (but still relevant) signal.
Acknowledgements. This research has been supported in part by NSF IIS-1016909, CNS-1010921,
IIS-1159679, DARPA XDATA, DARPA GRAPHS, Albert Yu & Mary Bechmann Foundation, Boe-
ing, Allyes, Samsung, Intel, Alfred P. Sloan Fellowship and the Microsoft Faculty Fellowship.

8

featureindexforφ1i1weightθ1,ipeoplewithPhDslivinginS.F.orStanfordfeatureindexforφ1i1weightθ2,iGermanswhowenttoschoolin1997featureindexforφ1i1weightθ3,iAmericansfeatureindexforφ1i1weightθ4,icollegeeducatedpeopleworkingataparticularinstitutefeatureindexforψ1i1weightθ1,istudiedthesamedegreespeakthesamelanguagesfeatureindexforψ1i1weightθ2,istudiedthesamedegreefeatureindexforψ1i1weightθ3,isamelevelofeducationfeatureindexforψ1i1weightθ4,iworkedforthesameemployeratthesametimeReferences
[1] Y.-Y. Ahn, J. Bagrow, and S. Lehmann. Link communities reveal multiscale complexity in networks.
Nature, 2010.
[2] E. Airoldi, D. Blei, S. Fienberg, and E. Xing. Mixed membership stochastic blockmodels. JMLR, 2008.
[3] R. Balasubramanyan and W. Cohen. Block-LDA: Jointly modeling entity-annotated text and entity-entity
links. In SDM, 2011.
[4] E. Boros and P. Hammer. Pseudo-boolean optimization. Discrete Applied Mathematics, 2002.
[5] J. Chang and D. Blei. Relational topic models for document networks. In AIStats, 2009.
[6] J. Chang, J. Boyd-Graber, and D. Blei. Connections between the lines: augmenting social networks with
text. In KDD, 2009.
[7] Y. Chen and C. Lin. Combining SVMs with various feature selection strategies. Springer, 2006.
[8] M. Handcock, A. Raftery, and J. Tantrum. Model-based clustering for social networks. Journal of the
Royal Statistical Society Series A, 2007.
[9] S. Johnson. Hierarchical clustering schemes. Psychometrika, 1967.
[10] D. Kim, Y. Jo, L.-C. Moon, and A. Oh. Analysis of twitter lists as a potential source for discovering latent
characteristics of users. In CHI, 2010.
[11] P. Krivitsky, M. Handcock, A. Raftery, and P. Hoff. Representing degree distributions, clustering, and
homophily in social networks with latent cluster random effects models. Social Networks, 2009.
[12] P. Lazarsfeld and R. Merton. Friendship as a social process: A substantive and methodological analysis.
In Freedom and Control in Modern Society. 1954.
[13] Y. Liu, A. Niculescu-Mizil, and W. Gryc. Topic-link LDA: joint models of topic and author community.
In ICML, 2009.
[14] D. MacKay. Information Theory, Inference and Learning Algorithms. Cambrdige University Press, 2003.
[15] J. McAuley and J. Leskovec. Discovering social circles in ego networks. arXiv:1210.8182, 2012.
[16] M. McPherson. An ecology of afﬁliation. American Sociological Review, 1983.
[17] A. Menon and C. Elkan. Link prediction via matrix factorization. In ECML/PKDD, 2011.
[18] A. Mislove, B. Viswanath, K. Gummadi, and P. Druschel. You are who you know: Inferring user proﬁles
in online social networks. In WSDM, 2010.
[19] P. Nasirifard and C. Hayes. Tadvise: A twitter assistant based on twitter lists. In SocInfo, 2011.
[20] M. Newman. Modularity and community structure in networks. PNAS, 2006.
[21] G. Palla, I. Derenyi, I. Farkas, and T. Vicsek. Uncovering the overlapping community structure of complex
networks in nature and society. Nature, 2005.
[22] C. Rother, V. Kolmogorov, V. Lempitsky, and M. Szummer. Optimizing binary MRFs via extended roof
duality. In CVPR, 2007.
[23] A. Streich, M. Frank, D. Basin, and J. Buhmann. Multi-assignment clustering for boolean data. JMLR,
2012.
[24] J. Ugander, B. Karrer, L. Backstrom, and C. Marlow. The anatomy of the Facebook social graph. preprint,
2011.
[25] C. Volinsky and A. Raftery. Bayesian information criterion for censored survival models. Biometrics,
2000.
[26] D. Vu, A. Asuncion, D. Hunter, and P. Smyth. Dynamic egocentric models for citation networks.
ICML, 2011.
[27] S. Wu, J. Hofman, W. Mason, and D. Watts. Who says what to whom on twitter. In WWW, 2011.
[28] J. Yang and J. Leskovec. Community-afﬁliation graph model for overlapping community detection. In
ICDM, 2012.
[29] J. Yang and J. Leskovec. Deﬁning and evaluating network communities based on ground-truth. In ICDM,
2012.
[30] T. Yoshida. Toward ﬁnding hidden communities based on user proﬁles. In ICDM Workshops, 2010.
[31] J. Zhao. Examining the evolution of networks based on lists in twitter. In IMSAA, 2011.

In

9

