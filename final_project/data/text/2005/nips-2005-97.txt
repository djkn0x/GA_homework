From Lasso regression to Feature vector
machine

Fan Li1 , Yiming Yang1 and Eric P. Xing1;2
1 LTI and 2CALD, School of Computer Science, Carnegie Mellon University,
Pittsburgh, PA USA 15213
fhustlf,yiming,epxingg@cs.cmu.edu

Abstract

Lasso regression tends to assign zero weights to most irrelevant or redun-
dant features, and hence is a promising technique for feature selection.
Its limitation, however, is that it only offers solutions to linear models.
Kernel machines with feature scaling techniques have been studied for
feature selection with non-linear models. However, such approaches re-
quire to solve hard non-convex optimization problems. This paper pro-
poses a new approach named the Feature Vector Machine (FVM). It re-
formulates the standard Lasso regression into a form isomorphic to SVM,
and this form can be easily extended for feature selection with non-linear
models by introducing kernels deﬁned on feature vectors. FVM gener-
ates sparse solutions in the nonlinear feature space and it is much more
tractable compared to feature scaling kernel machines. Our experiments
with FVM on simulated data show encouraging results in identifying the
small number of dominating features that are non-linearly correlated to
the response, a task the standard Lasso fails to complete.

1 Introduction

Finding a small subset of most predictive features in a high dimensional feature space is an
interesting problem with many important applications, e.g. in bioinformatics for the study
of the genome and the proteome, and in pharmacology for high throughput drug screening.

Lasso regression ([Tibshirani et al., 1996]) is often an effective technique for shrinkage and
feature selection. The loss function of Lasso regression is deﬁned as:
L = Xi
(yi (cid:0) Xp
(cid:12)p xip )2 + (cid:21) Xp
where xip denotes the pth predictor (feature) in the ith datum, yi denotes the value of the
response in this datum, and (cid:12)p denotes the regression coefﬁcient of the pth feature. The
norm-1 regularizer Pp jj(cid:12)p jj1 in Lasso regression typically leads to a sparse solution in the
feature space, which means that the regression coefﬁcients for most irrelevant or redundant
features are shrunk to zero. Theoretical analysis in [Ng et al., 2003] indicates that Lasso
regression is particularly effective when there are many irrelevant features and only a few
training examples.

jj(cid:12)p jj1

One of the limitations of standard Lasso regression is its assumption of linearity in the
feature space. Hence it is inadequate to capture non-linear dependencies from features to
responses (output variables). To address this limitation, [Roth, 2004] proposed “general-
ized Lasso regressions” (GLR) by introducing kernels. In GLR, the loss function is deﬁned
as
(cid:11)j k(xi ; xj ))2 + (cid:21) Xi
(yi (cid:0) Xj
L = Xi
where (cid:11)j can be regarded as the regression coefﬁcient corresponding to the j th basis in an
instance space (more precisely, a kernel space with its basis deﬁned on all examples), and
k(xi ; xj ) represents some kernel function over the “ar gument”
instance x i and the “basis”
instance xj . The non-linearity can be captured by a non-linear kernel. This loss function
typically yields a sparse solution in the instance space, but not in feature space where data
was originally represented. Thus GLR does not lead to compression of data in the feature
space.

jj(cid:11)i jj1

[Weston et al., 2000], [Canu et al., 2002] and [Krishnapuram et al., 2003] addressed the
limitation from a different angle. They introduced feature scaling kernels in the form of:
K(cid:18) (xi ; xj ) = (cid:30)(xi (cid:3) (cid:18))(cid:30)(xj (cid:3) (cid:18)) = K (xi (cid:3) (cid:18); xj (cid:3) (cid:18))
where xi (cid:3) (cid:18) denotes the component-wise product between two vectors: x i (cid:3) (cid:18) =
(xi1 (cid:18)1 ; :::; xip (cid:18)p ). For example, [Krishnapuram et al., 2003] used a feature scaling poly-
nomial kernel:
K(cid:13) (xi ; xj ) = (1 + Xp
where (cid:13)p = (cid:18)2
p . With a norm-1 or norm-0 penalizer on (cid:13) in the loss function of a fea-
ture scaling kernel machine, a sparse solution is supposed to identify the most in ﬂuential
features. Notice that in this formalism the feature scaling vector (cid:18) is inside the kernel func-
tion, which means that the solution space of (cid:18) could be non-convex. Thus, estimating (cid:18)
in feature scaling kernel machines is a much harder problem than the convex optimization
problem in conventional SVM of which the weight parameters to be estimated are outside
of the kernel functions.

(cid:13)p xip xjp )k ;

What we are seeking for here is an alternative approach that guarantees a sparse solution
in the feature space, that is sufﬁcient
for capturing both linear and non-linear relationships
between features and the response variable, and that does not involve parameter optimiza-
tion inside of kernel functions. The last property is particularly desirable in the sense that
it will allow us to leverage many existing works in kernel machines which have been very
successful in SVM-related research.

We propose a new approach where the key idea is to re-formulate and extend Lasso re-
gression into a form that is similar to SVM except that it generates a sparse solution in the
feature space rather than in the instance space. We call our newly formulated and extended
Lasso regression ”Feature Vector Machine” (FVM). We will show (in Section 2) that FVM
has many interesting properties that mirror SVM. The concepts of support vectors, kernels
and slack variables can be easily adapted in FVM. Most importantly, all the parameters we
need to estimate for FVM are outside of the kernel functions, ensuring the convexity of the
solution space, which is the same as in SVM. 1 When a linear kernel is put to use with no
slack variables, FVM reduces to the standard Lasso regression.

1Notice that we can not only use FVM to select important features from training data, but also use
it to predict the values of response variables for test data (see section 5). We have shown that we only
need convex optimization in the training phase of FVM. In the test phase, FVM makes a prediction for
each test example independently. This only involves with a one-dimensional optimization problem
with respect to the response variable for the test example. Although the optimization in the test phase
may be non-convex, it will be relatively easy to solve because it is only one-dimensional. This is the
price we pay for avoiding the high dimensional non-convex optimization in the training phase, which
may involve thousands of model parameters.

We notice that [Hochreiter et al., 2004] has recently developed an interesting feature selec-
tion technique named ”potential SVM”, which has the same form as the basic version of
FVM (with linear kernel and no slack variables). However, they did not explore the rela-
tionship between ”potential SVM” and Lasso regression. Furthermore, their method does
not work for feature selection tasks with non-linear models since they did not introduce the
concepts of kernels deﬁned on feature vectors.

In section 2, we analyze some geometric similarities between the solution hyper-planes in
the standard Lasso regression and in SVM. In section 3, we re-formulate Lasso regression
in a SVM style form. In this form, all the operations on the training data can be expressed
by dot products between feature vectors. In section 4, we introduce kernels (deﬁned for
feature vectors) to FVM so that it can be used for feature selection with non-linear models.
In section 5, we give some discussions on FVM. In section 6, we conduct experiments and
in section 7 we give conclusions.

2 Geometric parity between the solution hyper-planes of Lasso
regression and SVM

Formally, let X = [x1 ; : : : ; xN ] denote a sample matrix, where each column xi =
(x1 ; : : : ; xK )T represents a sample vector deﬁned on K features. A feature vector can be
deﬁned as a transposed row in the sample matrix, i.e., fq = (x1q ; : : : ; xN q )T (correspond-
ing to the q row of X). Note that we can write XT = [f1 ; : : : ; fK ] = F. For convenience,
let y = (y1 ; : : : ; yn )T denote a response vector containing the responses corresponding to
all the samples.
Now consider an example space of which each basis is represented by an x i in our sample
matrix (note that this is different from the space “spanned ”
by the sample vectors). Under
the example space, both the features fq and the response vector y can be regarded as a
point in this space. It can be shown that the solution of Lasso regression has a very in-
tuitive meaning in the example space: the regression coefﬁcients can be regarded as the
weights of feature vectors in the example space; moreover, all the non-zero weighted fea-
ture vectors are on two parallel hyper-planes in the example space. These feature vectors,
together with the response variable, determine the directions of these two hyper-planes.
This geometric view can be drawn from the following recast of the Lasso regression due
to [Perkins et al., 2003]:

(cid:12)pxip )xiq j (cid:20)

j Xi
(yi (cid:0) Xp
) jfq (y (cid:0) [f1 ; : : : ; fK ](cid:12) )j (cid:20)

;

(cid:21)
2

;

8q

(cid:21)
2
It is apparent from the above equation that y (cid:0) [f1 ; : : : ; fK ](cid:12) deﬁnes
the orientation of a
separation hyper-plane. It can be shown that equality only holds for non-zero weighted
features, and all the zero weighted feature vectors are between the hyper-planes with (cid:21)=2
margin (Fig. 1a).

8q :

(1)

The separating hyper-planes due to (hard, linear) SVM have similar properties as those of
the regression hyper-planes described above, although the former are now deﬁned in the
feature space (in which each axis represents a feature and each point represents a sample)
instead of the example space. In an SVM, all the non-zero weighted samples are also on
the two (cid:21)=2-margin separating hyper-planes (as is the case in Lasso regression), whereas
all the zero-weighted samples are now outside the pair of hyper-planes (Fig 1b). It’s well
known that the classiﬁcation hyper-planes in SVM can be extended to hyper-surfaces by
introducing kernels deﬁned for example vectors. In this way, SVM can model non-linear
dependencies between samples and the classiﬁcation boundary. Given the similarity of the

feature f

feature e

X1
response variable
feature a

feature b

X2
feature c

feature d

(a)

feature a

X3

X1

X5

feature b

X4

X2

X8

X6
(b)

Figure 1: Lasso regression vs. SVM. (a) The solution of Lasso regression in the example
space. X 1 and X 2 represent two examples. Only feature a and d have non-zero weights,
and hence the support features. (b)The solution of SVM in the feature space. Sample X 1,
X 3 and X 5 are in one class and X 2, X 4, X 6 and X 8 are in the other. X 1 and X 2 are the
support vectors (i.e., with non-zero weights).
geometric structures of Lasso regression and SVM, it is nature to pursue in parallel how
one can apply similar “k ernel tricks”
to the feature vectors in Lasso regression, so that its
feature selection power can be extended to non-linear models. This is the intension of this
paper, and we envisage full leverage of much of the computational/optimization techniques
well-developed in the SVM community in our task.

3 A re-formulation of Lasso regression akin to SVM

(2)

(3)

8q :

8q :

[Hochreiter et al., 2004] have proposed a ”potential SVM” as follows:
( min(cid:12)
1
2 Pi (Pp (cid:12)pxip )2
s.t.
j Pi (yi (cid:0) Pp (cid:12)p xip )xiq j (cid:20) (cid:21)
2
To clean up a little bit, we rewrite Eq. (2) in linear algebra format:
( min(cid:12)
1
2 k[f T
1 ; : : : ; f T
K ](cid:12)k2
s.t.
jfq (y (cid:0) [f1 ; : : : ; fK ](cid:12) )j (cid:20) (cid:21)
2 ;
A quick eyeballing of this formulation reveals that it shares the same constrain function
needed to be satisﬁed in Lasso regression. Unfortunately, this connection was not further
explored in [Hochreiter et al., 2004], e.g., to relate the objection function to that of the
Lasso regression, and to extend the objective function using kernel tricks in a way similar
to SVM. Here we show that the solution to Eq. (2) is exactly the same as that of a standard
Lasso regression. In other words, Lasso regression can be re-formulated as Eq. (2). Then,
based on this re-formulation, we show how to introduce kernels to allow feature selection
under a non-linear Lasso regression. We refer to the optimization problem deﬁned by Eq.
(3), and its kernelized extensions, as feature vector machine (FVM).
Proposition 1: For a Lasso regression problem min(cid:12) Pi (Pp xip (cid:12)p (cid:0) yi )2 + (cid:21) Pp j(cid:12)p j,
2 ; if (cid:12)q < 0, then
if we have (cid:12) such that: if (cid:12)q = 0, then j Pi (Pp (cid:12)pxip (cid:0) yi )xiq j < (cid:21)
2 ; and if (cid:12)q > 0, then Pi (Pp (cid:12)pxip (cid:0) yi )xiq = (cid:0) (cid:21)
2 , then
Pi (Pp (cid:12)p xip (cid:0) yi )xiq = (cid:21)
(cid:12) is the solution of the Lasso regression deﬁned above. For convenience, we refer to the
aforementioned three conditions on (cid:12) as the Lasso sandwich.
Proof: see [Perkins et al., 2003].
Proposition 2: For Problem (3), its solution (cid:12) satisﬁes

the Lasso sandwich

Sketch of proof: Following the equivalence between feature matrix F and sample matrix
X (see the begin of x2), Problem (3) can be re-written as:

min(cid:12)
s.t.

1
2 jjX T (cid:12) jj2
8<
X (X T (cid:12) (cid:0) y) (cid:0) (cid:21)
2 e (cid:20) 0
X (X T (cid:12) (cid:0) y) + (cid:21)
:
2 e (cid:21) 0
where e is a one-vector of K dimensions. Following the standard constrained optimization
procedure, we can derive the dual of this optimization problem. The Lagrange L is given
by

(4)

;

e)

L =

1
(cid:21)
(cid:21)
e) + (cid:11)T
(cid:12) T X X T (cid:12) (cid:0) (cid:11)T
(cid:0) (X (X T (cid:12) (cid:0) y) +
+ (X (X T (cid:12) (cid:0) y) +
2
2
2
where (cid:11)+ and (cid:11)(cid:0) are K (cid:2) 1 vectors with positive elements. The optimizer satisﬁes:
r(cid:12) L = X X T (cid:12) (cid:0) X X T ((cid:11)+ (cid:0) (cid:11)(cid:0) ) = 0
Suppose the data matrix X has been pre-processed so that the feature vectors are centered
and normalized. In this case the elements of X X T reﬂect
the correlation coefﬁcients of
feature pairs and X X T is non-singular. Thus we know (cid:12) = (cid:11)+ (cid:0) (cid:11)(cid:0) is the solution of
this loss function. For any element (cid:12)q > 0, obviously (cid:11)+q should be larger than zero.
2 holds at this time. For
From the KKT condition, we know Pi (yi (cid:0) Pp (cid:12)pxip )xiq = (cid:0) (cid:21)
the same reason we can get when (cid:12)q < 0, (cid:11)(cid:0)q should be larger than zero thus Pi (yi (cid:0)
2 holds. When (cid:12)q = 0, (cid:11)+q and (cid:11)(cid:0)q must both be zero (it’s easy to
Pp (cid:12)pxip )xiq = (cid:21)
see they can not be both non-zero from KKT condition), thus from KKT condition, both
2 and Pi (yi (cid:0) Pp (cid:12)p xip )xiq < (cid:21)
2 hold now, which means
Pi (yi (cid:0) Pp (cid:12)pxip )xiq > (cid:0) (cid:21)
2 at this time.
j Pi (yi (cid:0) Pp (cid:12)pxip )xiq j < (cid:21)
Theorem 3: Problem (3) (cid:17) Lasso regression.
Proof. Follows from proposition 1 and proposition 2.

4 Feature kernels

In many cases, the dependencies between feature vectors are non-linear. Analogous to the
SVM, here we introduce kernels that capture such non-linearity. Note that unlike SVM, our
kernels are deﬁned on feature vectors instead of the sampled vectors (i.e., the rows rather
than the columns in the data matrix). Such kernels can also allow us to easily incorporate
certain domain knowledge into the classiﬁer .
Suppose that two feature vectors fp and fq have a non-linear dependency relationship. In
the absence of linear interaction between fp and fq in the the original space, we assume
that they can be mapped to some (higher dimensional, possibly in ﬁnite-dimensional)
space
via transformation (cid:30)((cid:1)), so that (cid:30)(fq ) and (cid:30)(fq ) interact linearly, i.e., via a dot product
(cid:30)(fp )T (cid:30)(fq ). We introduce kernel K (fq ; fp ) = (cid:30)(fp )T (cid:30)(fq ) to represent the outcome of
this operation.

Replacing f with (cid:30)(f ) in Problem (3), we have
( min(cid:12)
1
2 Pp;q (cid:12)p(cid:12)qK (fp ; fp )
s.t.
j Pp (cid:12)pK (fq ; fp ) (cid:0) K (fq ; y)j (cid:20) (cid:21)
8q ;
2
Now, in Problem 5, we no longer have (cid:30)((cid:1)), which means we do not have to work in
the transformed feature space, which could be high or in ﬁnite dimensional, to capture non-
linearity of features. The kernel K ((cid:1); (cid:1)) can be any symmetric semi-positive deﬁnite matrix.

(5)

When domain knowledge from experts is available, it can be incorporated into the choice
of kernel (e.g., based on the distribution of feature values). When domain knowledge is not
available, we can use some general kernels that can detect non-linear dependencies without
any distribution assumptions. In the following we give one such example.

One possible kernel is the mutual information [Cover et al., 1991] between two feature
vectors: K (fp ; fq ) = M I (fp ; fq ). This kernel requires a pre-processing step to discritize
the elements of features vectors because they are continuous in general. In this paper, we
discritize the continuous variables according to their ranks in different examples. Suppose
we have N examples in total. Then for each feature, we sort its values in these N examples.
The ﬁrst m values (the smallest m values) are assigned a scale 1. The m + 1 to 2m
values are assigned a scale 2. This process is iterated until all the values are assigned with
corresponding scales. It’s easy to see that in this way, we can guarantee that for any two
features p and q , K (fp ; fp ) = K (fq ; fq ), which means the feature vectors are normalized
and have the same length in the (cid:30) space (residing on a unit sphere centered at the origin).
Mutual information kernels have several good properties. For example, it is symmetric
(i.e., K (fp ; fq ) = K (fq ; fp ), non-negative, and can be normalized. It also has intuitive
interpretation related to the redundancy between features. Therefore, a non-linear feature
selection using generalized Lasso regression with this kernel yields human interpretable
results.

5 Some extensions and discussions about FVM

As we have shown, FVM is a straightforward feature selection algorithm for nonlinear fea-
tures captured in a kernel; and the selection can be easily done by solving a standard SVM
problem in the feature space, which yield an optimal vector (cid:12) of which most elements are
zero. It turns out that the same procedure also seemlessly leads to a Lasso-style regularized
nonlinear regression capable of predicting the response given data in the original space.

In the prediction phase, all we have to do is to keep the trained (cid:12) ﬁx ed, and turn the
optimization problem (5) into an analogous one that optimizes over the response y . Specif-
ically, given a new sample xt of unknown response, our sample matrix X grows by one
column X ! [X; xt ], which means all our feature vectors gets one more dimension. We
denote the newly elongated features by F 0 = ff 0
q gq2A (note that A is the pruned index
set corresponding to features whose weight (cid:12)q is non-zero). Let y 0 denote the elongated
response vector due to the newly given sample: y 0 = (y1 ; :::; yN ; yt )T , it can be shown that
the optimum response yt can be obtained by solving the following optimization problem 2 :
minyt K (y 0 ; y 0 ) (cid:0) 2 Xp2A
When we replace the kernel function K with a linear dot product, FVM reduces to Lasso
regression. Indeed, in this special case, it is easy to see from Eq. (6) that y t = Pp2A (cid:12)pxtp ,
which is exactly how Lasso regression would predict the response. In this case one predicts
yt according to (cid:12) and xt without using the training data X. However, when a more complex
kernel is used, solving Eq. (6) is not always trivial. In general, to predict y t , we need not
only xt and (cid:12) , but also the non-zero weight features extracted from the training data.

(cid:12)pK (y 0 ; f 0
p )

(6)

2For simplicity we omit details here, but as a rough sketch, note that Eq. (5) can be reformed as
p )jj2 + Xp
min(cid:12) jj(cid:30)(y 0 ) (cid:0) Xp
(cid:12)p (cid:30)(f 0
Replacing the opt. argument (cid:12) with y and dropping terms irrelevant to yt , we will arrive at Eq. (6).

jj(cid:12)p jj1 :

feature surface.
As in SVM, we can introduce slack variables into FVM to deﬁne a “soft”
But due to space limitation, we omit details here. Essentially, most of the methodologies
developed for SVM can be easily adapted to FVM for nonlinear feature selection.

6 Experiments

We test FVM on a simulated dataset with 100 features and 500 examples. The response
variable y in the simulated data is generated by a highly nonlinear rule:
y = sin(10 (cid:3) f1 (cid:0) 5) + 4 (cid:3) q1 (cid:0) f 2
2 (cid:0) 3 (cid:3) f3 + (cid:24) :
Here feature f1 and f3 are random variables following a uniform distribution in [0; 1];
feature f2 is a random variable uniformly distributed in [(cid:0)1; 1]; and (cid:24) represents Gaussian
noise. The other 97 features f4 ; f5 ; :::; f100 are conditionally independent of y given the
three features f1 , f2 and f3 . In particular, f4 ; :::; f33 are all generated by the rule fj =
3 (cid:3) f1 + (cid:24) ; f34 ; :::; f72 are all generated by the rule fj = sin(10 (cid:3) f2) + (cid:24) ; and the remaining
features (f73 ; :::; f100 ) simply follow a uniform distribution in [0; 1]. Fig. 2 shows our data
projected in a space spanned by f1 and f2 and y .
We use a mutual information kernel for our FVM. For each feature, we sort its value in
different examples and use the rank to discritize these values into 10 scales (thus each scale
corresponds to 50 data points). An FVM can be solved by quadratic programming, but
more efﬁcient
solutions exist. [Perkins et al., 2003] has proposed a fast grafting algorithm
to solve Lasso regression, which is a special case of FVM when linear kernel is used. In our
implementation, we extend the idea of fast grafting algorithm to FVM with more general
kernels. The only difference is that, each time when we need to calculate Pi xpi xqi , we
calculate K (fp ; fq ) instead. We found that fast grafting algorithm is very efﬁcient
in our
case because it uses the sparse property of the solution of FVM.
We apply both standard Lasso regression and FVM with mutual information kernel on this
dataset. The value of the regularization parameter (cid:21) can be tuned to control the number
of non-zero weighted features. In our experiment, we tried two choices of the (cid:21), for both
FVM and the standard Lasso regression. In one case, we set (cid:21) such that only 3 non-zero
weighted features are selected; in another case, we relaxed a bit and allowed 10 features.

The results are very encouraging. As shown in Fig.
(3), under stringent (cid:21), FVM suc-
cessfully identiﬁed the three correct features, f1 , f2 and f3 , whereas Lasso regression has
missed f1 and f2 , which are non-linearly correlated with y . Even when (cid:21) was relaxed,
Lasso regression still missed the right features, whereas FVM was very robust.

y
 
e
l
b
a
i
r
a
v
 
e
s
n
o
p
s
e
r

6

5

4

3

2

1

0

−1

−2

−3
1

0.5
 f2
−0.5

0

y
 
e
l
b
a
i
r
a
v
 
e
s
n
o
p
s
e
r
−1

6

5

4

3

2

1

0

−2

−3

1

0.8

1

0.5

0

−1

0

0.6
0.4
f1
f2
Figure 2: The responses y and the two features f1 and f2 in our simulated data. Two graphs
from different angles are plotted to show the distribution more clearly in 3D space.

0.2

−0.5

−1

0

1

0.8

0.4

0.6
f1

0.2

7 Conclusions

In this paper, we proposed a novel non-linear feature selection approach named FVM,
which extends standard Lasso regression by introducing kernels on feature vectors. FVM

s
e
r
u
t
a
e
f
 
o
t
 
d
e
n
g
i
s
s
a
 
t
h
g
i
e
W

x 10−3

0

Lasso (3 features)

−0.5

−1

−1.5

−2

−2.5

−3

0

20

40

60

80

100

x 10−3

FVM (3 features)

1

0.8

0.6

0.4

0.2

5

0

−5

−10

−15

−20

0.01

0.008

0.006

0.004

0.002

x 10−3 Lasso (10 features)

0

20

40

60

80

100

FVM (10 features)

0

0

20

40
60
Feature id

80

100

0

0

20

40
60
Feature id

80

100

Figure 3: Results of FVM and the standard Lasso regression on this dataset. The X axis
represents the feature IDs and the Y axis represents the weights assigned to features. The
two left graphs show the case when 3 features are selected by each algorithm and the two
right graphs show the case when 10 features are selected. From the down left graph, we can
see that FVM successfully identiﬁed f1 ,f2 and f3 as the three non-zero weighted features.
From the up left graph, we can see that Lasso regression missed f1 and f2 , which are
non-linearly correlated with y . The two right graphs show similar patterns.

has many interesting properties that mirror the well-known SVM, and can therefore lever-
age many computational advantages of the latter approach. Our experiments with FVM
on highly nonlinear and noisy simulated data show encouraging results, in which it can
correctly identify the small number of dominating features that are non-linearly correlated
to the response variable, a task the standard Lasso fails to complete.

References

[Canu et al., 2002] Canu, S. and Grandvalet, Y. Adaptive Scaling for Feature Selection in SVMs
NIPS 15, 2002
[Hochreiter et al., 2004] Hochreiter, S. and Obermayer, K. Gene Selection for Microarray Data. In
Kernel Methods in Computational Biology, pp. 319-355, MIT Press, 2004.
[Krishnapuram et al., 2003] Krishnapuram, B. et al. Joint classiﬁer and feature optimization for can-
cer diagnosis using gene expression data. The Seventh Annual International Conference on Re-
search in Computational Molecular Biology (RECOMB) 2003, ACM press, April 2003
[Ng et al., 2003] Ng, A. Feature selection, L1 vs L2 regularization, and rotational invariance. ICML
2004
[Perkins et al., 2003] Perkins, S., Lacker, K. & Theiler, J. Grafting: Fast,Incremental Feature Selec-
tion by gradient descent in function space JMLR 2003 1333-1356
[Roth, 2004] Roth, V. The Generalized LASSO. IEEE Transactions on Neural Networks (2004), Vol.
15, NO. 1.
[Tibshirani et al., 1996] Tibshirani, R. Optimal Reinsertion:Regression shrinkage and selection via
the lasso. J.R.Statist. Soc. B(1996), 58,No.1, 267-288
[Cover et al., 1991] Cover, TM. and Thomas, JA. Elements in Information Theory. New York: John
Wiley & Sons Inc (1991).
[Weston et al., 2000] Weston, J., Mukherjee, S., Chapelle, O., Pontil, M., Poggio, T. and Vapnik V.
Feature Selection for SVMs NIPS 13, 2000

