Gaussian Process Dynamical Models

Jack M. Wang, David J. Fleet, Aaron Hertzmann
Department of Computer Science
University of Toronto, Toronto, ON M5S 3G4
{jmwang,hertzman}@dgp.toronto.edu, fleet@cs.toronto.edu

Abstract
This paper introduces Gaussian Process Dynamical Models (GPDM) for
nonlinear time series analysis. A GPDM comprises a low-dimensional
latent space with associated dynamics, and a map from the latent space
to an observation space. We marginalize out the model parameters in
closed-form, using Gaussian Process (GP) priors for both the dynamics
and the observation mappings. This results in a nonparametric model
for dynamical systems that accounts for uncertainty in the model. We
demonstrate the approach on human motion capture data in which each
pose is 62-dimensional. Despite the use of small data sets, the GPDM
learns an effective representation of the nonlinear dynamics in these
∼
spaces. Webpage: http://www.dgp.toronto.edu/
jmwang/gpdm/

Introduction
1
A central difﬁculty in modeling time-series data is in determining a model that can capture
the nonlinearities of the data without overﬁtting. Linear autoregressive models require
relatively few parameters and allow closed-form analysis, but can only model a limited
range of systems. In contrast, existing nonlinear models can model complex dynamics, but
may require large training sets to learn accurate MAP models.

In this paper we investigate learning nonlinear dynamical models for high-dimensional
datasets. We take a Bayesian approach to modeling dynamics, averaging over dynamics
parameters rather than estimating them. Inspired by the fact that averaging over nonlinear
regression models leads to a Gaussian Process (GP) model, we show that integrating over
parameters in nonlinear dynamical systems can also be performed in closed-form. The
resulting Gaussian Process Dynamical Model (GPDM) is fully deﬁned by a set of low-
dimensional representations of the training data, with both dynamics and observation map-
pings learned from GP regression. As a natural consequence of GP regression, the GPDM
removes the need to select many parameters associated with function approximators while
retaining the expressiveness of nonlinear dynamics and observation.

Our work is motivated by modeling human motion for video-based people tracking and
data-driven animation. Bayesian people tracking requires dynamical models in the form
of transition densities in order to specify prediction distributions over new poses at each
time instant (e.g., [11, 14]); similarly, data-driven computer animation requires prior dis-
tributions over poses and motion (e.g., [1, 4, 6]). An individual human pose is typically
parameterized with more than 60 parameters. Despite the large state space, the space of
activity-speciﬁc human poses and motions has a much smaller intrinsic dimensionality; in
our experiments with walking and golf swings, 3 dimensions often sufﬁce.

Our work builds on the extensive literature in nonlinear time-series analysis, of which we

A

B

x1

x2

x3

x4

X

y1

y2

y3

(a)
(b)
Figure 1: Time-series graphical models. (a) Nonlinear latent-variable model for time se-
ries. (Hyperparameters ¯α and ¯β are not shown.) (b) GPDM model. Because the mapping
parameters A and B have been marginalized over, all latent coordinates X = [x1 , ..., xN ]T
are jointly correlated, as are all poses Y = [y1 , ..., yN ]T .

y4

Y

mention a few examples. Two main themes are the use of switching linear models (e.g.,
[11]), and nonlinear transition functions, such as represented by Radial Basis Functions
[2]. Both approaches require sufﬁcient amounts of training data that one can learn the
parameters of the switching or basis functions. Determining the appropriate number of
basis functions is also difﬁcult.
In Kernel Dynamical Modeling [12], linear dynamics are
kernelized to model nonlinear systems, but a density function over data is not produced.

Supervised learning with GP regression has been used to model dynamics for a variety
of applications [3, 7, 13]. These methods model dynamics directly in observation space,
which is impractical for the high-dimensionality of motion capture data. Our approach
is most directly inspired by the unsupervised Gaussian Process Latent Variable Model
(GPLVM) [5], which models the joint distribution of the observed data and their corre-
sponding representation in a low dimensional latent space. This distribution can then be
used as a prior for inference from new measurements. However, the GPLVM is not a dy-
namical model; it assumes that data are generated independently. Accordingly it does not
respect temporal continuity of the data, nor does it model the dynamics in the latent space.
Here we augment the GPLVM with a latent dynamical model. The result is a Bayesian
generalization of subspace dynamical models to nonlinear latent mappings and dynamics.

2 Gaussian Process Dynamics
The Gaussian Process Dynamical Model (GPDM) comprises a mapping from a latent space
to the data space, and a dynamical model in the latent space (Figure 1). These mappings
are typically nonlinear. The GPDM is obtained by marginalizing out the parameters of the
two mappings, and optimizing the latent coordinates of training data.
More precisely, our goal is to model the probability density of a sequence of vector-valued
states y1 ..., yt , ..., yN , with discrete-time index t and yt ∈ R
D . As a basic model, consider
a latent-variable mapping with ﬁrst-order Markov dynamics:
xt = f (xt−1 ; A) + nx,t
(1)
yt = g(xt ; B) + ny ,t
(2)
Here, xt ∈ R
d denotes the d-dimensional latent coordinates at time t, nx,t and ny ,t are
zero-mean, white Gaussian noise processes, f and g are (nonlinear) mappings parameter-
ized by A and B, respectively. Figure 1(a) depicts the graphical model.
While linear mappings have been used extensively in auto-regressive models, here we con-
(cid:1)
sider the nonlinear case for which f and g are linear combinations of basis functions:
(cid:1)
i

f (x; A) =

ai φi (x)

(3)

(4)

g(x; B) =

bj ψj (x)

j

for weights A = [a1 , a2 , ...] and B = [b1 , b2 , ...], and basis functions φi and ψj . In order
to ﬁt the parameters of this model to training data, one must select an appropriate number
of basis functions, and one must ensure that there is enough data to constrain the shape of
each basis function. Ensuring both of these conditions can be very difﬁcult in practice.

However, from a Bayesian perspective, the speciﬁc forms of f and g — including the
numbers of basis functions — are incidental, and should therefore be marginalized out.
With an isotropic Gaussian prior on the columns of B, marginalizing over g can be done in
(cid:3)
(cid:5)(cid:6)
closed form [8, 10] to yield
(cid:4)
(cid:2)
|W|N
p(Y | X, ¯β ) =
− 1
K−1
Y YW2YT
tr
(2π)N D |KY |D exp
(5)
,
2
where Y = [y1 , ..., yN ]T , KY is a kernel matrix, and ¯β = {β1 , β2 , ..., W} comprises the
kernel hyperparameters. The elements of kernel matrix are deﬁned by a kernel function,
(KY )i,j = kY (xi , xj ). For the latent mapping, X → Y , we currently use the RBF kernel
(cid:3)
(cid:6)
||x − x(cid:2) ||2
− β2
−1
kY (x, x(cid:2)
) = β1 exp
+ β
3 δx,x(cid:1) .
(6)
2
As in the SGPLVM [4], we use a scaling matrix W ≡ diag(w1 , ..., wD ) to account for
different variances in the different data dimensions. This is equivalent to a GP with kernel
function k(x, x(cid:2) )/w2
m for dimension m. Hyperparameter β1 represents the overall scale of
the output function, while β2 corresponds to the inverse width of the RBFs. The variance
−1
of the noise term ny ,t is given by β
3 .
The dynamic mapping on the latent coordinates X is conceptually similar, but more subtle.1
As above, we form the joint probability density over the latent coordinates and the dynamics
(cid:7)
(cid:7)
weights A in (3). We then marginalize over the weights A, i.e.,
p(X, A | ¯α) dA =
p(X | A, ¯α) p(A | ¯α) dA .
p(X | ¯α) =
(cid:7) N(cid:8)
Incorporating the Markov property (Eqn. (1)) gives:
p(X | ¯α) = p(x1 )
p(xt | xt−1 , A, ¯α) p(A | ¯α) dA ,

(7)

(8)

t=2
where ¯α is a vector of kernel hyperparameters. Assuming an isotropic Gaussian prior on
(cid:3)
(cid:5)(cid:6)
the columns of A, it can be shown that this expression simpliﬁes to:
(cid:4)
(cid:2)
p(X | ¯α) = p(x1 )
− 1
1
K−1
X Xout XT
tr
exp
(9)
(2π)(N −1)d |KX |d
,
out
2
where Xout = [x2 , ..., xN ]T , KX is the (N −1) × (N −1) kernel matrix constructed from
{x1 , ..., xN −1 }, and x1 is assumed to be have an isotropic Gaussian prior.
We model dynamics using both the RBF kernel of the form of Eqn. (6), as well as the
(cid:10)
(cid:9)
following “linear + RBF ” kernel:
kX (x, x(cid:2)

− α2
2
The kernel corresponds to representing g as the sum of a linear term and RBF terms. The
inclusion of the linear term is motivated by the fact that linear dynamical models, such as

−1
+ α
4 δx,x(cid:1) .

) = α1 exp

||x − x(cid:2) ||2

+ α3xT x(cid:2)

(10)

1Conceptually, we would like to model each pair (xt , xt+1 ) as a training pair for regression with
g . However, we cannot simply substitute them directly into the GP model of Eqn. (5) as this leads to
the nonsensical expression p(x2 , ..., xN | x1 , ..., xN −1 ).

ﬁrst or second-order autoregressive models, are useful for many systems. Hyperparameters
α1 , α2 represent the output scale and the inverse width of the RBF terms, and α3 represents
the output scale of the linear term. Together, they control the relative weighting between
−1
represents the variance of the noise term nx,t .
the terms, while α
4
It should be noted that, due to the nonlinear dynamical mapping in (3), the joint distribution
of the latent coordinates is not Gaussian. Moreover, while the density over the initial state
may be Gaussian, it will not remain Gaussian once propagated through the dynamics. One
can also see this in (9) since xt variables occur inside the kernel matrix, as well as outside
Finally, we also place priors on the hyperparameters ( p( ¯α) ∝ (cid:11)
of it. So the log likelihood is not quadratic in xt .
(cid:11)
, and p( ¯β ) ∝
−1
i α
i
−1
) to discourage overﬁtting. Together, the priors, the latent mapping, and the dy-
i β
i
namics deﬁne a generative model for time-series observations (Figure 1(b)):
p(X, Y , ¯α, ¯β ) = p(Y |X, ¯β ) p(X| ¯α) p( ¯α) p( ¯β ) .

(11)

Multiple sequences. This model extends naturally to multiple sequences Y1 , ..., YM .
Each sequence has associated latent coordinates X1 , ..., XM within a shared latent space.
For the latent mapping g we can conceptually concatenate all sequences within the GP
likelihood (Eqn. (5)). A similar concatenation applies for the dynamics, but omitting the
ﬁrst frame of each sequence from Xout , and omitting the ﬁnal frame of each sequence from
the kernel matrix KX . The same structure applies whether we are learning from multiple
sequences, or learning from one sequence and inferring another. That is, if we learn from
a sequence Y1 , and then infer the latent coordinates for a new sequence Y2 , then the joint
likelihood entails full kernel matrices KX and KY formed from both sequences.

Higher-order features. The GPDM can be extended to model higher-order Markov
chains, and to model velocity and acceleration in inputs and outputs. For example, a
second-order dynamical model,
xt = f (xt−1 , xt−2 ; A) + nx,t

(12)

may be used to explicitly model the dependence of the prediction on two past frames (or
on velocity). In the GPDM framework, the equivalent model entails deﬁning the kernel
(cid:10)
(cid:9)
function as a function of the current and previous time-step:
||xt−1 − xτ−1 ||2
||xt − xτ ||2 − α3
− α2
kX ( [xt , xt−1 ], [xτ , xτ−1 ] ) = α1 exp
2
2
−1
t−1xτ−1 + α
t xτ + α5 xT
+ α4 xT
6 δt,τ

(13)

Similarly, the dynamics can be formulated to predict velocity:
vt−1 = f (xt−1 ; A) + nx,t

(14)

Velocity prediction may be more appropriate for modeling smoothly motion trajectories.
Using Euler integration with time-step ∆t, we have xt = xt−1 + vt−1∆t. The dynam-
ics likelihood p(X | ¯α) can then be written by redeﬁning Xout = [x2 − x1 , ..., xN −
xN −1 ]T /∆t in Eqn. (9). In this paper, we use a ﬁxed time-step of ∆t = 1. This is analo-
gous to using xt−1 as a “mean function.” Higher-order features can also be fused together
with position information to reduce the Gaussian process prediction variance [15, 9].

3 Properties of the GPDM and Algorithms
Learning the GPDM from measurements Y entails minimizing the negative log-posterior:
L = − ln p(X, ¯α, ¯β | Y)

(15)

(cid:4)

tr

(cid:1)

j

(cid:5)
(cid:4)

(cid:5)

(16)

(cid:1)

+

ln αj

ln |KX | +

K−1
X Xout XT
out

1
= d
2
2
ln |KY | +
− N ln |W| + D
1
K−1
Y YW2YT
+
tr
ln βj
2
2
j
up to an additive constant. We minimize L with respect to X, ¯α, and ¯β numerically.
Figure 2 shows a GPDM 3D latent space learned from a human motion capture data com-
prising three walk cycles. Each pose was deﬁned by 56 Euler angles for joints, 3 global
(torso) pose angles, and 3 global (torso) translational velocities. For learning, the data was
mean-subtracted, and the latent coordinates were initialized with PCA. Finally, a GPDM is
learned by minimizing L in (16). We used 3D latent spaces for all experiments shown here.
Using 2D latent spaces leads to intersecting latent trajectories. This causes large “jumps ”
to appear in the model, leading to unreliable dynamics.

For comparison, Fig. 2(a) shows a 3D SGPLVM learned from walking data. Note that
the latent trajectories are not smooth; there are numerous cases where consecutive poses
in the walking sequence are relatively far apart in the latent space. By contrast, Fig. 2(b)
shows that the GPDM produces a much smoother con ﬁguration of latent positions. Here
the GPDM arranges the latent positions roughly in the shape of a saddle.
Figure 2(c) shows a volume visualization of the inverse reconstruction variance, i.e.,
−2 ln σy|x,X,Y, ¯β . This shows the con ﬁdence with which the model reconstructs a pose
from latent positions x.
In effect, the GPDM models a high probability “tube” around
the data. To illustrate the dynamical process, Fig. 2(d) shows 25 fair samples from the
latent dynamics of the GPDM. All samples are conditioned on the same initial state, x0 ,
and each has a length of 60 time steps. As noted above, because we marginalize over the
weights of the dynamic mapping, A, the distribution over a pose sequence cannot be fac-
tored into a sequence of low-order Markov transitions (Fig. 1(a)). Hence, we draw fair
1:60 ∼ p( ˜X1:60 | x0 , X, Y , ¯α), using hybrid Monte Carlo [8]. The resulting
samples ˜X(j )
trajectories (Fig. 2(c)) are smooth and similar to the training motions.

3.1 Mean Prediction Sequences
For both 3D people tracking and computer animation, it is desirable to generate new mo-
tions efﬁciently. Here we consider a simple online method for generating a new motion,
called mean-prediction, which avoids the relatively expensive Monte Carlo sampling used
above. In mean-prediction, we consider the next timestep ˜xt conditioned on ˜xt−1 from the
Gaussian prediction [8]:
˜xt ∼ N (µX (˜xt−1 ); σ2
X (˜xt−1 )I)
X (x) = kX (x, x) − kX (x)T K−1
out K−1
µX (x) = XT
X kX (x) ,
X kX (x)
σ2
(18)
where kX (x) is a vector containing kX (x, xi ) in the i-th entry and xi is the ith training
vector. In particular, we set the latent position at each time-step to be the most-likely (mean)
point given the previous step: ˜xt = µX (˜xt−1 ). In this way we ignore the process noise that
one might normally add. We ﬁnd that this mean-prediction often generates motions that are
more like the fair samples shown in Fig. 2(d), than if random process noise had been added
at each time step (as in (1)). Similarly, new poses are given by ˜yt = µY (˜xt ).
Depending on the dataset and the choice of kernels, long sequences generated by sampling
or mean-prediction can diverge from the data. On our data sets, mean-prediction trajec-
tories from the GPDM with an RBF or linear+RBF kernel for dynamics usually produce
sequences that roughly follow the training data (e.g., see the red curves in Figure 3). This
usually means producing closed limit cycles with walking data. We also found that mean-
prediction motions are often very close to the mean obtained from the HMC sampler; by

(17)

  

 

 

(a)

(b)

(c)

(d)

(e)

Figure 2: Models learned from a walking sequence of 2.5 gait cycles. The latent positions
learned with a GPLVM (a) and a GPDM (b) are shown in blue. Vectors depict the temporal
sequence. (c) - log variance for reconstruction shows regions of latent space that are recon-
structed with high conﬁdence. (d) Random trajectories drawn from the model using HMC
(green), and their mean (red). (e) A GPDM of walk data learned with RBF+linear kernel
dynamics. The simulation (red) was started far from the training data, and then optimized
(green). The poses were reconstructed from points on the optimized trajectory.

 

 

 

 

 

 

(a)
(b)
Figure 3: (a) Two GPDMs and mean predictions. The ﬁrst is that from the previous ﬁgure.
The second was learned with a linear kernel. (b) The GPDM model was learned from 3
swings of a golf club, using a 2nd order RBF kernel for dynamics. The two plots show 2D
orthogonal projections of the 3D latent space.

initializing HMC with mean-prediction, we ﬁnd that the sampler reaches equilibrium in a
small number of interations. Compared to the RBF kernels, mean-prediction motions gen-
erated from GPDMs with the linear kernel often deviate from the original data (e.g., see
Figure 3a), and lead to over-smoothed animation.

Figure 3(b) shows a 3D GPDM learned from three swings of a golf club. The learning
aligns the sequences and nicely accounts for variations in speed during the club trajectory.

3.2 Optimization
While mean-prediction is efﬁcient, there is nothing in the algorithm that prevents trajecto-
ries from drifting away from the training data. Thus, it is sometimes desirable to optimize
a particular motion under the GPDM, which often reduces drift of the mean-prediction mo-

(b)
(a)
Figure 4: GPDM from walk sequence with missing data learned with (a) a RBF+linear
kernel for dynamics, and (b) a linear kernel for dynamics. Blue curves depict original data.
Green curves are the reconstructed, missing data.

tions. To optimize a new sequence, we ﬁrst select a starting point ˜x1 and a number of
time-steps. The likelihood p( ˜X | X, ¯α) of the new sequence ˜X is then optimized directly
(holding the latent positions of the previously learned latent positions, X, and hyperparam-
eters, ¯α, ﬁxed). To see why optimization generates motion close to the traing data, note
that the variance of pose ˜xt+1 is determined by σ2
X (˜xt ), which will be lower when ˜xt is
nearer the training data. Consequently, the likelihood of ˜xt+1 can be increased by moving
˜xt closer to the training data. This generalizes the preference of the SGPLVM for poses
similar to the examples [4], and is a natural consequence of the Bayesian approach. As an
example, Fig. 2(e) shows an optimized walk sequence initialized from the mean-prediction.

3.3 Forecasting
We performed a simple experiment to compare the predictive power of the GPDM to a
linear dynamical system, implemented as a GPDM with linear kernel in the latent space and
RBF latent mapping. We trained each model on the ﬁrst 130 frames of the 60Hz walking
sequence (corresponding to 2 cycles), and tested on the remaining 23 frames. From each
test frame mean-prediction was used to predict the pose 8 frames ahead, and then the RMS
pose error was computed against ground truth. The test was repeated using mean-prediction
and optimization for three kernels, all based on ﬁrst-order predictions as in (1):
Linear+RBF
RBF
Linear
59.69
48.72
36.74
mean-prediction
31.97
45.89
58.32
optimization
Due to the nonlinear nature of the walking dynamics in latent space, the RBF and Lin-
ear+RBF kernels outperform the linear kernel. Moreover, optimization (initialized by
mean-prediction) improves the result in all cases, for reasons explained above.

3.4 Missing Data
The GPDM model can also handle incomplete data (a common problem with human motion
capture sequences). The GPDM is learned by minimizing L (Eqn. (16)), but with the terms
corresponding to missing poses yt removed. The latent coordinates for missing data are
initialized by cubic spline interpolation from the 3D PCA initialization of observations.

While this produces good results for short missing segments (e.g., 10–15 frames of the
157-frame walk sequence used in Fig. 2), it fails on long missing segments. The problem
lies with the difﬁculty in initializing the missing latent positions sufﬁciently close to the
training data. To solve the problem, we ﬁrst learn a model with a subsampled data sequence.
Reducing sampling density effectively increases uncertainty in the reconstruction process
so that the probability density over the latent space falls off more smoothly from the data.
We then restart the learning with the entire data set, but with the kernel hyperparameters
ﬁxed. In doing so, the dynamics terms in the objective function exert more in ﬂuence over
the latent coordinates of the training data, and a smooth model is learned.

With 50 missing frames of the 157-frame walk sequence, this optimization produces mod-

els (Fig. 4) that are much smoother than those in Fig. 2. The linear kernel is able to pull
the latent coordinates onto a cylinder (Fig. 4b), and thereby provides an accurate dynam-
ical model. Both models shown in Fig. 4 produce estimates of the missing poses that are
visually indistinguishable from the ground truth.

4 Discussion and Extensions
One of the main strengths of the GPDM model is the ability to generalize well from small
datasets. Conversely, performance is a major issue in applying GP methods to larger
datasets. Previous approaches prune uninformative vectors from the training data [5]. This
is not straightforward when learning a GPDM, however, because each timestep is highly
correlated with the steps before and after it. For example, if we hold xt ﬁxed during opti-
mization, then it is unlikely that the optimizer will make much adjustment to xt+1 or xt−1 .
The use of higher-order features provides a possible solution to this problem. Speciﬁcally,
consider a dynamical model of the form vt = f (xt−1 , vt−1 ). Since adjacent time-steps
are related only by the velocity vt ≈ (xt − xt−1 )/∆t, we can handle irregularly-sampled
datapoints by adjusting the timestep ∆t, possibly using a different ∆t at each step.
A number of further extensions to the GPDM model are possible. It would be straightfor-
ward to include a control signal ut in the dynamics f (xt , ut ). It would also be interesting to
explore uncertainty in latent variable estimation (e.g., see [3]). Our use of maximum like-
lihood latent coordinates is motivated by Lawrence’s observation that model uncertainty
and latent coordinate uncertainty are interchangeable when learning PCA [5]. However, in
some applications, uncertainty about latent coordinates may be highly structured (e.g., due
to depth ambiguities in motion tracking).
Acknowledgements This work made use of Neil Lawrence’s publicly-available GPLVM code, the
CMU mocap database (mocap.cs.cmu.edu), and Joe Conti’s volume visualization code from math-
works.com. This research was supported by NSERC and CIAR.
References
[1] M. Brand and A. Hertzmann. Style machines. Proc. SIGGRAPH, pp. 183-192, July 2000.
[2] Z. Ghahramani and S. T. Roweis. Learning nonlinear dynamical systems using an EM algo-
rithm. Proc. NIPS 11, pp. 431-437, 1999.
[3] A. Girard, C. E. Rasmussen, J. G. Candela, and R. Murray-Smith. Gaussian process priors with
uncertain inputs - application to multiple-step ahead time series forecasting. Proc. NIPS 15, pp.
529-536, 2003.
[4] K. Grochow, S. L. Martin, A. Hertzmann, and Z. Popovi ´c. Style-based inverse kinematics. ACM
Trans. Graphics, 23(3):522-531, Aug. 2004.
[5] N. D. Lawrence. Gaussian process latent variable models for visualisation of high dimensional
data. Proc. NIPS 16, 2004.
[6] J. Lee, J. Chai, P. S. A. Reitsma, J. K. Hodgins, and N. S. Pollard. Interactive control of avatars
animated with human motion data. ACM Trans. Graphics, 21(3):491-500, July 2002.
[7] W. E. Leithead, E. Solak, and D. J. Leith. Direct identiﬁcation of nonlinear structure using
Gaussian process prior models. Proc. European Control Conference, 2003.
[8] D. MacKay. Information Theory, Inference, and Learning Algorithms. 2003.
[9] R. Murray-Smith and B. A. Pearlmutter. Transformations of Gaussian process priors. Technical
Report, Department of Computer Science, Glasgow University, 2003
[10] R. M. Neal. Bayesian Learning for Neural Networks. Springer-Verlag, 1996.
[11] V. Pavlovi ´c, J. M. Rehg, and J. MacCormick. Learning switching linear models of human
motion. Proc. NIPS 13, pp. 981-987, 2001.
[12] L. Ralaivola and F. d’Alch ´e-Buc. Dynamical modeling with kernels for nonlinear time series
prediction. Proc. NIPS 16, 2004.
[13] C. E. Rasmussen and M. Kuss. Gaussian processes in reinforcement learning. Proc. NIPS 16,
2004.
[14] H. Sidenbladh, M. J. Black, and D. J. Fleet. Stochastic tracking of 3D human ﬁgures using 2D
motion. Proc. ECCV, volume 2, pp. 702-718, 2000.
[15] E. Solak, R. Murray-Smith, W. Leithead, D. Leith, and C. E. Rasmussen. Derivative observa-
tions in Gaussian process models of dynamic systems. Proc. NIPS 15, pp. 1033-1040, 2003.

