Click Prediction and Preference Ranking of RSS Feeds
December 11, 2009

Steven Wu

1

Introduction

RSS (Really Simple Syndication) is a family of data formats used to publish frequently updated works. RSS
is often used for temporally relevant information updates. An RSS document consists of a series of entries,
each tagged with a title, description, link, date of publication, and sometimes other metadata.
However, it is often the case that a large amount of RSS feeds in aggregate will create considerably more
information than the average user will be able to follow. In this case the user will read only those feeds that
he or she ﬁnds interesting. However, the volume of information involved can sometimes make this search for
interesting reading a time-consuming and laborious task.
Several machine learning methods have been applied with some success to text categorization problems,
such as Bayesian spam ﬁlters for email[1]. Here we explore text categorization algorithms for the purpose of
ranking user preferences for RSS entries.

2 Preference and Clicks

In our problem we are given a series of RSS feeds and click information and must derive from these the
preferences of the user. We are given a set of candidate entries X = {X (i) }. For each X (i) we deﬁne y (i) to
correspond to the number of clicks made on X (i) . We also store publication time t(i) , ie the time at which
is the time of j − 1th click on
the entry was produced, and associated timestamp vectors z (i) such that z (i)
(cid:40)
j
x(i) . Hence, y (i) = |z (i) |. We will also speciﬁcally discuss the time to click c(i) , deﬁned as
for |z (i) | > 0,
0 − t(i)
z (i)
∞
for |z (i) | = 0

c(i) =

Each entry X (i) also has a corresponding feed ID f (i) which speciﬁes the speciﬁc feed that it belongs to. The
importance of this is that diﬀerent RSS feeds are treated in diﬀerent ways by the user - a user may check
certain feeds more often or be more likely to click entries from it due to topical reasons.
We are attempting to predict preference using click data as an indicator for preference. However, clicks
are not a perfect indicator of preference, in that the average user will not have an opportunity to click every
article that interests them. It is also the case that even if an article is to be clicked, it will likely not happen
for some nonzero amount of time after that article has been published on RSS.
Hence we will make a few assumptions regarding click behavior. First, we assume that there exists some
latent variable I (i) tied to X (i) which is an indicator for whether an entry will ever be clicked. We also
assume that if an entry X (i) , then c(i) is distributed as an exponential. This is to deal with the following
diﬃculty: given some time t, if we have some entry Xi where yi ≥ 1, then we know both ci and Ii . However,
if, conversely, yi = 0, then we have 3 possible explanations. First, the entry may not ever be read, ie Ii = 0.
Second, the entry may be too old, and the reader may have seen the entry elsewhere, ie t − ti is too large.
Lastly, the reader may eventually read this entry, but not have had the opportunity to yet, ie ti + ci > t.
We may now formally state that our goal is to determine P (I (i) = 1), i.e. the chance that the user will
ever read a given feed entry.
With these assumptions we can ﬁnd probability p(y (i)
t > y (i) ) by specifying functions for the rate
parameter λ of the exponential, fλ (X ), and a preference function fI (X ) returning a vector of λ and I
respectively. We then need to decompose the distribution into a time distribution (exponential) and an
binomial indicator. The standard Bayesian technique here would be to construct a generative model for y (i) ,
z (i) , and c(i) based on X (i) . However, the exact motivations behind RSS preference are not always very clear
and often vary from case to case, and so this is not feasible in our case. Hence, it would be ideal to train

a classiﬁer under this model. Naively, we can inject features into our data by creating for each data X (i) a
large number of y (i)
indicating the number of clicks at each time t. However, this is not entirely feasible, as
t
we would have to increase an already large dataset by another very large constant factor. Hence, the naive
approach fails here.
However, in general we are viewing y (i) and zi as time series, and attempting to model y and z . By
(cid:40)
MLE, given the rate parameter λ, we can train a regressor on
(cid:82) ∞
for y (i) ≥ 1,
1
t Exp(t(cid:48) , λ)dt(cid:48)
for y < 1
Note that here y (i)(cid:48) = p(I (i) = 1) given our assumptions. In this case we can determine λ merely by looking
at all entries X (i) that can no longer be clicked (ie are no longer on the RSS feed) and their respective c(i) .
We can then simply determine λ using any number of analytical methods.
With the knowledge of this distribution in mind we can then adapt traditional text categorization
algorithms to use the soft labels y (cid:48) .

y (i)(cid:48) =

3 Data and Methodology

Our dataset consists of 112,828 RSS entries from a total of 163 unique RSS feeds, of which 2,607 have been
clicked. These were collected over a period of three months and represent a cross section of real-life RSS
usage.
For evaluation purposes we pick a time t and partition the dataset such that we train on Xi where
zi,0 < t and test on the remainder. In all the cases we use a modiﬁed vector space model where the ﬁrst
dimension of our feature space for X (i) is f (i) , and each following dimension corresponds to a word in the
corpus. For all tests here we train on the ﬁrst 500 entries chronologically and then attempt to predict future
clicks on entries beyond those 500.

3.1 Naive Bayes
A naive Bayes classiﬁer is a special case of Bayesian network applied to the task of classiﬁcation. Naive
Bayes assumes that every feature X (i) is conditionally independent from every other feature given y , or,
P(X (i) = X |y (cid:48) = c) = (cid:89)
formally,
i
Using Bayes’ rule our hypothesis looks as follows:

i = Xi |y (cid:48) = c)
P(X (i)
P(I (i) = 1) (cid:81)
(cid:81)
i P(Xi = xi )
h(X ) = P(I (i) = 1|X ) = P(y (cid:48) = 1|X ) =
i P(Xi = xi |C = ck )
In our case we are attempting to classify based on soft labels y (cid:48) rather than discrete labels. To account
for this when training, for each entry X (i) we consider it instead to be y (i)(cid:48) entries with y (i)(cid:48) = 1 and 1 − y (i)(cid:48)
entries with y (i)(cid:48) = 0.

3.2 Regularized Logistic Regression
Logistic regression is a conditional probability model in which we assume that the posterior is logistic, ie
that

1
1 + exp(−θT x)
Here we can generate θ by minimizing the negative log-likelihood

p(I (i) |θ , xi ) =

l(θ) = − (cid:88)
i
across our dataset. Note in this case we use the calculated y (cid:48) rather than y . We l1-regularize our dataset
by using the lasso algorithm, which is known to have good performance with text categorization[2], hence
l(θ)lasso = l(θ) + α|θ |
where we use Mallows’ Cp as α. We can then easily solve for the maximizing value of θ using this
function with gradient descent.

log(1 + exp(−θT xy (cid:48) ))

3.3 Decision Trees and Random Forests
For the purposes of generating decision trees we use Quinlan’s C4.5 algorithm [3]. Again, to account for the
use of soft labels when maximizing information gain, for each entry X (i) we consider it instead to be y (i)(cid:48)
entries with y (i)(cid:48) = 1 and 1 − y (i)(cid:48) entries with y (i)(cid:48) = 0.
We create random forests as described by Breiman et al in [4]. In the random forests technique, we
construct each individual decision tree as above, bootstrapping the data in each case, to create the complete
ensemble.

3.4 Support Vector Machines
The case of SVMs is a unique one since SVMs cannot consider soft labels. Hence we train the SVM only
by using those entries in X that have been removed from user access and hence can no longer be clicked,
using a Gaussian kernel with Automatic Relevance Determination (ARD). Apart from this pre-processing
the training is a reasonably straightforward application of Platt’s SMO algorithm on these points [5].

4 Results and Conclusions

We run each of these algorithms on the data set as described. The performance of each algorithm can be
seen in Table 1.
Perhaps one of the most interesting results here is the unusually good performance of naive Bayes.
Support vector machines and random forests have been shown to signiﬁcantly outperform naive Bayes in
[6]. However, here we see that naive Bayes performs only slightly worse than random forests and in fact
outperforms the SVM.
We suspect this performance gap is caused by most of the predictive power of our features being in the
feed ID f (i) rather than in the actual bag-of-words. This is intuitively sensible, as feeds, like human interests,
tend to be restricted to a few topics, and an ”interesting” feed will tend to be clicked signiﬁcantly more often.
This is also an explanation of the poor performance of logistic regression: logistic regression cannot account
for the feed IDs properly as it can only separate in the feature space, in which a meaningful distinction and
ordering does not exist for the feeds - hence, it is forced to operate entirely on the textual information given.
SVMs suﬀer a similar plight. The remaining algorithms that can consider a feature independent of any given
space fare much better.
The strong predictive capability of the feed ID intuitively makes sense. Most RSS feeds tend to be
focused around one or two topics, as do most user preferences. Hence, if a user clicks on entries from a given
feed it is quite likely that he is interested in the topics that feed provides. One can think of the feed ID as
a latent variable linked directly to the topic of the feed.
We also note a strong mutability in preferences. Figure 1 shows the ability of three of the classiﬁers
trained on data, and then tested on increasingly more recent data. We note an almost exponential degra-
dation of prediction quality as we increase our prediction horizon. Hence, in order to properly predict clicks
we need a dynamic model, or at least one that is frequently re-trained.

Figure 1: Predictive performance over increasing prediction horizon. Time t

0100020003000400050000.00.20.40.60.81.0Prediction degradation over timeprediction horizonclicks predictedRandom ForestsDecision TreeSVMAlgorithm RMSE
0.79
Naive Bayes
0.92
Regularized Logistic Regression
0.86
Decision Trees
0.76
Random Forests
0.82
SVM

Table 1: RMSE on testing set for the various classiﬁcation algorithms.

5 Further Directions

As it seems the most performant feature we observed was the feed ID, which seems to derive its predictive
power from being directly linked to topic, the next logical step seems to be topic models. We plan on
exploring Latent Dirichlet Allocation and the hierarchical version thereof in order to create topic models
with RSS feeds, which will allow us to classify with potentially greater accuracy than before. Other possible
approaches include collaborative ﬁltering; however, these require a volume of data that we, at this moment,
do not have access to.

6 References

1. Sahami, M., Dumais, S., Heckerman, D. and Horvitz, E. (1998) A Bayesian Approach to Filtering Junk
E-mail. AAAI Workshop on Learning for Text Categorization.

2. Genkin, A., Lewis, D. and Madigan, D. (2004) Sparse Logistic Regression for Text Categorization.

3. Quinlan, J. (1993) C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers.

4. Breiman, L. (2001). Random Forests. Machine Learning.

5. Platt, J. (1999). Fast training of support vector machines using sequential minimal optimization.
Technical Report MSR-TR-98-14.

6. Caruana, R. and Miculescu-Mizil, A. (2006) Proceedings of the 23rd international conference on Ma-
chine learning

