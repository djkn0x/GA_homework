Recognizing Informed Option Trading

Alex Bain, Prabal Tiwaree, Kari Okamoto

1 Abstract

While equity (stock) markets are generally eﬃcient
in discounting public information into stock prices,
we believe that in option markets a certain class of
informed trading exists which is based on private
information that cannot be eﬃciently discounted
into stock prices. This kind of trade, made ei-
ther by insiders or large institutions with the re-
sources to deduce non-public information about a
stock, allows participants to make bets with a lim-
ited downside risk and enormous upside potential.
We demonstrate the ability to recognize this class
of trades using machine learning algorithms and
the rich features available for option markets. We
present a simple trading strategy that buys a port-
folio of selected options and show that it generates
outstanding returns.

2 Background

2.1 Equity Options Market

While many people are familiar with debt and eq-
uity markets, knowledge of option markets is far
more limited. While there are several types of op-
tions markets, we will be concerned with the equity
options market, which is simply a public market for
stock options. The Chicago Board of Options Ex-
change (CBOE) is the largest and most important
equity options market in the United States. The
CBOE lists options on over 2,000 stocks. In gen-
eral, most US equities with market caps of $500
million or more have publicly listed options avail-
able to trade.
Although stock market prediction is a classic ma-
chine learning problem, hardly any work has been
done in the options market. Despite this, we be-
lieve that machine learning in the options market
can be very fruitful. Because options are expir-
ing derivatives with a theoretically optimal price,
options have wonderful features upon which to ap-
ply machine learning. Option volumes for many
stocks are generally low. The consequence of this

is that unusual purchases in the options market
have much stronger signals than in the noisy stock
market.

2.2

Informed Option Trading

In this paper we focus on informed option trad-
ing. When an informed trader wants to make a
big bet for a relatively small amount of money,
they do it with options. In particular they might
buy near term out-of-the-money options; that is,
options that are about to expire (perhaps in the
next few weeks) which require a large price move
in a short amount of time if they are to not ex-
pire worthless. These options are inexpensive and
the maximum downside risk is simply the purchase
price. However, the upside reward can be phenom-
enal if the options expire in the money.
Note that informed trading does not necessar-
ily mean insider trading. We are looking for
large unusual trades that are likely to have been
made by hedge funds or institutional money man-
agers with the resources to draw (legal) conclu-
sions about companies. Such trades are denoted
informed trades in options parlance, and the man-
agers running the funds are known as informed
traders.
While human beings notice unusual option trades,
it can be diﬃcult to tell if such trades are indica-
tive of an informed trader with private information
about the stock. Indeed, while Cao [1] ﬁnds that
options are a good predictor of material events,
Pan [2] ﬁnds that it takes several weeks for stock
prices to fully adjust to the information given by
options volume. It is here that we will apply ma-
chine learning to help us recognize informed option
trades that are highly likely to be proﬁtable.

3 Approach

3.1 Stock Option Classiﬁcation

For this problem, we consider publicly traded eq-
uity options. Since call options are more often used

1

for speculation than puts (which are often used for
portfolio protection), we will focus exclusively on
calls (although our analysis could be extended to
puts). Each stock has a series of listed options that
expire on a monthly basis. To limit our scope, we
will focus on front month options, i.e. options that
expire within the next 30 days.
Given the daily trading data for a particular front
month option, we would like to pose the following
classiﬁcation problem:
”Will the underlying stock be trading at a price at
expiration above the strike price plus the purchase
price of the option?”
We could have also proposed a regression problem
that estimates the value of options at expiration.
However, since you generally stand to make a large
proﬁt by purchasing out-of-the-money options that
expire in-the-money, we preferred the clarity of the
classiﬁcation problem.

3.2 Training and Testing Data

We gathered trading data from the Ivy DB Op-
tionMetrics database, a comprehensive options
database. Data for the entire year of 2006 was
downloaded for the 796 stocks comprising the Rus-
sell Midcap Index. We chose to use this list of
stocks because the average market capitalization of
companies in this index is about $6 billion. There-
fore, the options for stocks in this index are liquid,
but have relatively low daily option volume.
A large Python framework was built to parse and
assemble the data. The data was initially ﬁltered
to options expiring in 30 days or less that are at
least 5% out-of-the-money. This ﬁltered the data
down to 64,801 records. Each record corresponds
to trading data for one option on one day. At this
point a second key ﬁlter was applied, according to
these three criteria:
1. The volume for the option exceeds twice
the daily average (unusual volume rule)
2. The volume of options traded is at least
500 (institutional-sized blocks rule)
3. The change in implied volatility for the op-
tion is positive (institutional buying rule)
The ﬁrst rule ﬁnds options with unusual trading
volume. The second makes it more likely that
institutions or hedge funds rather than individu-
als are participating in the trades, since institu-
tions generally buy large blocks of options. The
third rule shows aggressive buying instead of hedg-
ing or closing positions. These ﬁlters condition
the data to show only strong, unusual buying

2

with institutional participation. For more intu-
ition behind these rules, see our original pro ject
proposal.
These rules ﬁltered our data into 341 candidate op-
tions. We split our data into 60% for training and
40% for testing. Each option was labeled as posi-
tive if its value at expiration exceeded the purchase
price of the option. The training data consisted of
210 options with 22 positive examples, while the
testing data had 131 options with 17 positive ex-
amples.

3.3 Features

The rich properties of stock options aﬀord us a
number of potential features to use for machine
learning. With our Python framework, we built
a base set of 13 features designed to measure the
pattern of buying for the candidate option. We im-
plemented feature selection using backwards search
and dropped the ﬁrst feature (see next section).
For some learning algorithms, we normalized our
data by rescaling features to [0, 1] or to a z-score.
Our ﬁnal features were:

1.

7.
8.

9.

2.
3.

4.
5.
6.

How far out-of-the-money the option is as
a % of the stock price
Price of the option (best closing oﬀer)
Implied volatility of a standardized 30-day
at-the-money option
Daily change in implied volatility
Volume / total call volume for the stock
Volume / one month average total call vol-
ume
Total call volume / total put volume
Average total call volume / average total
put volume
Total call volume / average total call vol-
ume
10. Change in open interest from todays trades
11. Change in open interest / volume
12. Change in open interest / total open inter-
est
Below is an example of what the features would be
for the Vertex Pharmaceuticals (NASDAQ:VRTX)
November 35 call on October 24, 2006 right before
the stock exploded from $33 to $45. This option
was identiﬁed by several of our models as likely to
be proﬁtable.
VRTX Nov 2006 $35 call on October 24,
2006

5%
Percentage out-of-the-money
$1.90
Option price
0.72
Implied volatility
0.02
Change in implied volatility
0.39
Volume / total call volume
4.17
Volume / one month avg vol
7.53
Total call volume / tot put vol
0.34
Average call vol / avg put vol
10.6
Total call vol / avg call vol
0.48
Change in open interest %
0.55
Change in open int / volume
0.13
Change open int / tot open int
Figure 1. Example Features for an Option
For this example, VRTX closed on October 24,
2006 at $33.32. Buyers came in and bought four
times the average number of calls, paying up for
them (implied volatility went up). The overall
number of calls they bought at all near-term strikes
was 10.6 times the average. VRTX reported earn-
ings and discussed its new drug telaprevir two days
later.

3.4 Feature Selection: Backwards
Search

Figure 2. Feature Selection Process with Backwards Search
In order to ﬁnd an optimal subset of features to use,
we implemented a feature selection algorithm us-
ing a backwards search. Starting with 13 features
and using our Bayesian logistic regression model
(see section 4), we found the baseline performance
of our algorithm on a dataset. Running the same
algorithm, removing one feature at a time to form

3

a subset of 12 features, we found the optimal fea-
ture to remove to improve our performance. After
removing this feature, we continued the process by
removing one optimal feature at a time and de-
creasing the size of our feature subset by one until
there was no longer any recognized improvement.
Figure 2 shows the iterations of this algorithm un-
til convergence. This optimal subset contains 10 of
our original features. We can see from the last few
iterations of the backwards search that the overall
error will remain the same if several of the features
are kept or discarded. This implies that these fea-
tures most likely will not decrease the eﬀectiveness
of the learning algorithm, but will not improve it
either.

3.5 Learning Algorithms

For the classiﬁcation problem we evaluated several
learning algorithms including SMO, SVM light,
logistic regression, and boosted decision trees.
We replaced logistic regression with l2-regularized
Bayesian logistic regression, which gave us much
better results.
For the support vector machines, we found that a
polynomial kernel clearly gave us the best results.
We performed a grid search over the regularization
parameter C and the kernel polynomial degree d
using SMO to optimize the SVM parameters (see
the results section).
We evaluated boosted decision trees using Gen-
tleAdaBoost. Boosting did not perform very well,
but we include some of our results using Boosting
for comparison.
Each training and testing example is a pair
(y (i) , x(i) ), where y (i) indicates whether the stock
price was above the option strike price + the total
cost of the option at expiration, and x(i) is a vector
of our 12 option features.

4 Experimental Results

4.1 Parameter Optimization

We ran a simulation to ﬁnd the optimal value of
the degree ’d’ for the polynomial kernel and of the
error penalization parameter, ’C’, for the SMO al-
gorithm. The degrees of the polynomial chosen
ranged from 0 to 50, and we found that in gen-
eral the SMO ran faster for higher degree poly-
nomial kernels and slower when C was increased.
Also, SMO ran signiﬁcantly faster on the normal-
ized data compared to the raw data. The ’max-

passes’ value of 1000 was found to be good enough
to get consistent results and tolerance of 0.0001 was
used. The following table summarizes the simula-
tion result:

tradeoﬀ of low precision and low recall. Overall, it
averages out these ratios, and therefore provides a
decent model.

Figure 3. Grid Search for Optimal C and d
The best d and C parameters were found to be 15
and 1 respectively based on the accuracy, number
of true positives, and number of false positives. It
is important for the algorithm to have as many
true positives as possible since it would allow us
to proﬁt from these trades while minimizing false
positives as these trades would lose money. Fig-
ure 4 shows the number of true positives and false
positives using a polynomial kernel of degree 15
for various values of C.

Figure 4. Search for Optimal SVM Polynomial Kernel
Figure 5 shows the accuracy, precision, and re-
call for diﬀerent values of C, while degree is held
constant at d = 15. From this ﬁgure, we can
clearly see that precision and recall are both max-
imized around C = 1, while accuracy is still fairly
good.
Likewise, Figure 6 shows the corresponding accu-
racy, precision, and recall for various values of de-
gree, with constant C = 1. From this graph, it
can be seen that a degree around 15 minimizes the

Figure 5. Precision, Recall, Accuracy for SVM parameter C

Figure 6. Precision, Recall, Accuracy for Kernel degree d
We ran a similar simulation for SVM light and
Bayesian logistic regression to obtain the best ’d’
and ’C’ parameters. For SVM light, we also used
’j’ parameter which is a ratio of cost on false posi-
tives to false negatives.

4.2 Testing Results

After coming up with the optimal parameters, we
ran the learning algorithms and obtained the out-
puts. In the optimal case, the learning algorithms
obtained ﬁve true positives - albeit not all the same
- and around 15 false positives.

Figure 7. Training and Testing Precision, Recall, Accuracy

4

4.3 Trading Strategy

6 Future Work

We then came up with two diﬀerent investment
scenarios.
In the unweighted case, we invest an
equal amount of money in each of the output rec-
ommendations from each learning algorithm.
In
the weighted case, we add more weight to the
outputs that diﬀerent learning algorithms all rec-
ommend and less to the ones that are unique to
each of our learning algorithms. For instance, if
SVM light, SMO, and Bayesian logistic regression
all recommended buying option ’A’, then we as-
signed 3 times more weight to it than to an option
recommended by only one algorithm. We then cal-
culated the returns which are shown in the table
below.
In the weighted case, the options recom-
mended by Bayesian logistic regression had the
most returns, while the SVM light recommenda-
tion performed the best for the unweighted case.
Some of the weighted returns more than double
the initial investment.
Investing in random op-
tions produced negative returns.

Figure 8. Returns from our Options Trading Strategy

5 Summary

The goal of this pro ject was to detect informed
option trades using machine learning techniques.
We used four diﬀerent
learning algorithms
-
SMO, SVM light, Bayesian logistic regression, and
Boosting - to learn from 796 stocks worth of data
from 2006. We wrote scripts in Python to process
large amounts of data obtained from the database
and ﬁltered them to options showing strong un-
usual buying. We normalized the data, and ran
various simulations to obtain the optimal set of
parameters for diﬀerent learning algorithms. Our
algorithms learned from the data and detected
many trades that were proﬁtable. As discussed
in the results section, investing in the options rec-
ommended by our algorithms generated signiﬁcant
returns. To be more conﬁdent on the ability of our
algorithms to learn, we need to test it on larger and
varied test sets over longer time periods to see if
the positive returns can be generated consistently.
We will also be looking to ﬁnd the best set of fea-
tures and analyze the training set to improve on
the classiﬁcation error.

5

There are many ideas that this pro ject could have
employed, some of which are:
1. Our work used information from the past
trading days by looking into 20 trading day
moving-averages, but we could employ more
a sophisticated time-series analysis to create
better features.
2. We used end-of-day summary data which, for
instance, did not look into the number and
size of trades during the day. Because of
this, we might have missed crucial insights
on whether the volume was created by one
large buyer or a few small buyers.
3. We used backward search for feature selec-
tion, but could experiment with other feature
selection algorithm.
4. We could use the characteristics of the under-
lying stock as our features to link the option
price movement to that of its underlying as-
set.
5. We could explore the data on put volume
and the downward movement of the underly-
ing stock to detect if information was leaked
prior to bad news (stock decline).

7 Related Work

A large number of machine learning techniques
have been applied to the stock market. We men-
tion some particularly relevant papers here. Our
paper is in the spirit of Choudhry and Garg [3] but
using options features instead of technical anal-
ysis. The use of SVMs speciﬁcally for ﬁnancial
time series forecasting was studied by Tay and Cao
[4].
A fantastic paper on detecting insider trading
using machine learning techniques was given by
Donoho [5]. Some of our features are based on
his ideas, although we are more focused on detect-
ing institutional buying while he focuses on insider
trading.
A small number of recent papers have focused on
the options market. Recently, Audrino and Colan-
gelo [6] used regression trees to predict implied
volatility changes and demonstrated a successful
trading strategy with their results.
Interestingly,
informed trading has been exten-
sively studied by game theorists, with many non-
intuitive results. The pioneering work was done by
Kyle [7].

8 References

[1] Cao, Chen, and Griﬀen. Informational Content
of Option Volume Prior to Takeovers. Journal of
Business, 78 2005, pp. 1073-1109.
[2] Pan and Poteshman. The Information in Op-
tion Volume for Stock Prices. Review of Financial
Studies, 19 2006, pp. 871-908.
[3] Choudhry and Garg. A Hybrid Machine Learn-
ing System for Stock Market Forecasting. World
Academy of Science, Engineering, and Technology,
39 2008, pp. 315-318.

[4] Cao and Tay. Financial forecasting using sup-
port vector machines. Neural Computing Applica-
tions, 10 2001, pp. 184-192.
[5] Donoho. Early Detection of Insider Trading in
Options Markets, 2004.
[6] Audrino and Colangelo. Option trading strate-
gies based on semiparametric implied volatility
surface prediction. August 2009 Discussion Paper
No. 2009-24.
[7] Kyle. Continuous auctions and insider trading.
Econometrica, 53 1985, pp. 1315-1335.

6

