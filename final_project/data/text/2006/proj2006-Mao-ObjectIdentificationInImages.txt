CS229 Project: Object(Keyboard) Identiﬁcation in Images

By: Mark Mao

Abstract

In this project, an object detection algorithm is imple-
mented. The algorithm is capable of locating keyboards
in images. Main component of the algorithm is based on
GMM models which can be applied to objects other than
keyboards as well, while parts of the algorithm is heuristics
based on the characteristics of the keyboard object. The
algorithm achieved 80% detection rate for this task.

1. Introduction
Identifying objects in images is a trivial task for human
brains, while at the same time, an extremely challenging
task for computers. In this project, a speciﬁc object – key-
board is selected to limit the scope and the difﬁculty of the
task, the goal of the project is to implement an algorithm
that can locate the position of keyboard in images.
Many algorithms have been developed for object iden-
tiﬁcation and image segmentation. Some algorithms only
use local features while other algorithms try to combine lo-
cal and non-local features.
GMM has been shown to be a robust technique for classi-
ﬁcation in high dimensional feature space. The algorithm in
this project starts with local block based features and build
GMM models for these features, it then tries to incorporate
some non-block base features.
The training and testing images are real photos of ofﬁces,
desks and computers from the MIT-CSAIL image library,
an example image is shown below. The images are manu-
ally annotated, 33 images are used for training and another
30 images are used for testing.

1

2. Algorithm Summary
The algorithm consists of six main steps:

1. Feature extraction: extracts DCT features on each
block of the training and testing images.

2. GMM training: creates 2 GMM models from training
images, one for the keyboard, one for the background
using feature vectors obtained in step 1.

3. GMM classiﬁcation: In testing images, calculates the
probabilities of each pixel block belonging to the key-
board class based on the GMM model.

4. Edge detection: detects the edges in the images.

5. Combining: combines the probability score of the
GMM model in step 3 and the edge features in step
4 to create a ﬁnal score for each pixel block.

6. Locate keyboard: searches through images and locate
the keyboard object using the score obtained from step
5.

f0 =

3. Feature Extraction
All training and testing images are ﬁrst normalized into
640 × 480 gray scale images. DCT is then calculated for
all 32 × 32 blocks in images, shifting by 8 pixels between
each block. Let the DCT coefﬁcients for each blocks be
Dij , i = 1..32, j = 1..32. A 10 dimension feature vector
F = (f0 , f1 , ...f9 ) is calculated as follow:
4X
4X
8X
4X
j=1
i=1
j=5
i=1
16X
16X
Dij /64
j=9
i=9
32X
32X
i=17
j=17

Dij /256

Dij /16

(5)

(6)

Dij /16

(1)

(2)

(3)

(4)

f1 =

f6 =

...

...

f9 =

(11)

1
32

φj =

µj =

Σj =

p(x|k) =

mX
tion until convergence.
1
1{z (i) = j },
Pm
m
Pm
i=1
i=1 1{z (i) = j }x(i)
Pm
(12)
i=1 1{z (i) = j } ,
Pm
i=1 1{z (i) = j }I [(x(i) − µj ) · (x(i) − µj )]
(13)
i=1 1{z (i) = j }
4.3. Classiﬁcation with GMM
Once the GMM is created with training images, it is used on
testing images to classify each block as keyboard or back-
ground. The probability is calculated as follow:
32X
φ(k)
j
(2π)10/2 |Σ(k)
32X
j=1
j
φ(b)
j
|1/2
(2π)10/2 |Σ(b)
j=1
j
where k is keyboard, b is background and p is the proba-
bility of pixel x is part of a keyboard
p(x|k)
p(x|k) + p(x|b)
The classiﬁcation results of one test image is shown be-
low. The ﬁrst one is the original image. The second im-
age represents likelihood of a pixel being part of a keyboard
or background with intensity. The darker pixel blocks are
more likely to be keyboard blocks. The classiﬁcation shows
reasonable results as pixels in the keyboard area are gener-
ally darker. But it also shows that the model can not distin-
guish well enough between keyboard and certain areas such
as the upper right corner wall, and the notepad to the left.

2 (x−µ
e(− 1
j )>Σ
(b)

e(− 1
2 (x−µ
(k)
j

p(x|b) =

(k)−1
j

1
32

|1/2

p =

(16)

)>Σ

(x−µ
(k)
j

)) (14)

(b)−1
j

(x−µ
(b)
j )) (15)

4. GMM

Once feature vectors are extracted, two models are trained,
one for the keyboard, one for the background. Gaussian
Mixture Model is used to represent the models in the 10 di-
mensional feature space. 32 Gaussians are used for each
model. And to simplify the model, diagonal covariance ma-
trix is used for each Gaussian.

ω (i)
j

4.1. Training with EM
For each class, the Gaussian Mixture Model is trained with
the standard EM algorithm. Parameters of the Gaussians
are calculated with the following equation in each iteration
until convergence.
mX
= p(z (i) = j |x(i) ; φ, µ, Σ)
1
Pm
m
Pm
i=1
i=1 ω (i)
j x(i)
Pm
,
i=1 ω (i)
j
Pm
j I [(x(i) − µj ) · (x(i) − µj )]
i=1 ω (i)
i=1 ω (i)
j

Σj =

µj =

φj =

ω (i)
j

(10)

(9)

(7)

(8)

,

4.2. Training Simpli ﬁcation with VQ
A simpliﬁed version of Gaussian Mixture Model with hard
assignment of data points of VQ instead of the soft decision
with EM is also implemented to save computation time. The
resulting models showed no signiﬁcant changes in terms of
performance. In the simpliﬁed model, the Gaussian param-
eters are updated with the following equation in each itera-

2

probability scores obtained from the GMM model for all
blocks. A new image showing this combined score is shown
below, now the lighter area represents pixel more likely to
be keyboards. As we can see, now the keyboard blocks
standout well compare to the background.

5.

Edge Detection and Combined
Score
For the speci ﬁc object we want to detect in this project –
keyboards, it is noticed that pixel blocks on the keyboards
all have a very high frequency component because of the
individual keys. This becomes obvious after running edge
detection on the test images, as shown below. The keyboard
area has the highest concentration of edges.

6. Locating Keyboard
A simple algorithm is implemented to search through all
pixels in the image, and ﬁnd a rectangular box such that
pixels inside the rectangular box have the maximal average
combined score, as shown in the image below.

Even though the DCT features being used captures both
low and high frequency energy, this speciﬁc high frequency
component is not well captured because of the low resolu-
tion in our features for high frequency components.
To compensate this, a new score is computed for this
high frequency component for each block on the edge de-
tected images. Then this new score is combined with the

6.1. A Simple Markov Chain
Anther keyboard locating algorithm that follows a simple 3-
state Markov chain is also tried. In this algorithm, for each

3

the center, arrow and control keys on the center right,
and numeric keys to the far right, can be modeled. It
will greatly help identifying the whole keyboard.
• At higher level, keyboard almost always show up be-
low the monitor, combined identiﬁcation of monitor
and keyboard should also improve the robustness of
the keyboard locating algorithm.

References

”CS 229 Machine Learning Course
[1] Andrew Ng,
Notes,” Fall, 2006

Appendix

Images that the algorithm failed

Total 6:

Images that the algorithm succeeded

Total 24:

pixel block, start with a small rectangular box around it, as-
suming the pixel inside the box are keyboard pixels, then
grow the rectangular box larger and larger, and accumulate
the probabilities that the pixels on the edge of the box be-
long to keyboard. At some point, the box will grow pass
the edge of the keyboard, then start calculating the proba-
bilities that the pixels on the edge of the box belong to the
background. Unfortunately, this algorithm did not perform
as well as the simple algorithm above. The reason is that
this algorithm is more sensitive to the shape and and the ro-
tation of the keyboard. But if more tuning time is available,
I do feel that this algorithm has more potentials.

7. Experiment Results and Summary
The training is done on 33 gray scale images.(640x480)
Testing is done on a different set of 30 images. The al-
gorithm correctly identi ﬁed the location of the keyboard in
24 images, achieving accuracy rate of 80% (or 20% error
rate). All testing images(6 errors, 24 correct) are attached
in the appendix.

8. Conclusion, Discussion and Future
Work
In this project, an algorithm that locates the keyboard in im-
ages is implemented, the main component of the algorithm
uses GMM model trained based on DCT features. This part
of the algorithm can be applied to any objects. Another
component of the algorithm uses heuristics that tailored to
the characteristics of the keyboard, which is less than uni-
versal. Overall, the algorithm achieved good results, with
80% recognition accuracy on the 30 test images.
Through this project, I learned that with enough train-
ing data, a decent GMM model can be built for local fea-
tures. But local features at single resolution level can only
go so far in a complicated task such as object identiﬁcation.
Things I would like to try in the future:
• Explore features in hierarchical structure, in the con-
text of keyboards, it means:.
• At lower level, keyboard does have internal structures,
if individual keys can be modeled, and also if the struc-
ture of groups of keys, e.g. regular keys on the left and

4

5

