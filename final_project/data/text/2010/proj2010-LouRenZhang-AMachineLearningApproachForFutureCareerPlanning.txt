A Machine Learning Approach for Future Career Planning

Yu Lou
Computer Science
Stanford University
yulou@stanford.edu

Ran Ren
Computer Science
Stanford University
rren@stanford.edu

Yiyang Zhao
Computer Science
Stanford University
zhaoyy@stanford.edu

Abstract

In this paper, we work on the modeling of peoples ca-
reer paths. We ﬁrst collect a large number of people’s
proﬁle and extract features from the descriptive informa-
tion. Hand rules and clustering algorithm has been applied
to help avoid the negative effect of natural language. We
model people’s career developments with Markov Chain,
and present our approach to estimate the transition prob-
ability matrix. Finally, we solve the problem that given a
person’s current career path and his/her goal, what is the
best best career development recommendation for him/her.
As a conclusion, we will analyze the results and discuss pos-
sible improvements of our model.

1. Introduction
1.1. Motivation
For college students, when facing various career options
upon graduation, it could be overwhelming to choose a job
that better ﬁts with his/her future career goals. Also, for cur-
rent employees, it could be unclear that whether changing
a job or pursuing advanced study will help to reach his/her
ambition. This is when people start to looking for other peo-
ple who have similar backgrounds to see what were their
decisions and where did they end up. Instead of consulting
only a few acquaintance, we present a way to help people
learn from thousands of others with similar backgrounds,
and ﬁnd best career steps that enable them to reach their
goals.

1.2. Problem Deﬁnition

We model a person’s career path with a sequence of
his/her education or working experiences in time order.
Each piece of experience regarding either work or education
is denoted as a node. Education is deﬁned by university, ma-
jor and degree, while working experience is represented by
position and employer. 1 gives a graphical representation.

Figure 1. Sample career paths

We view each person’s proﬁle and career path as
sequence with multiple nodes(steps) (X1 , X2 , ...). Each
node will be represented by various multinomial features
(vi1 , vi2 , ..., vik ). Given a person’s current career path and
his/her goal, we try to discover the optimal career path, that
is, the path that has the highest probability to reach the goal
node.

This project consists of various challenges. For instance,
how to translate the descriptive information in one’s
proﬁle into features. Also, as there are tens of thousands
non-standard position titles, we need to ﬁnd a way to group
the ones describing the same or similar positions together,
so as to avoid having billions of possible states in the
model and hence under-ﬁtting. Moreover, the algorithm
for estimating the parameters and path recommendations
should be carefully chosen.

The rest of this paper is organized as follows. We de-
scribes the collecting of data and data preparation in Section
2. Then in Section 3, we presents our model and approach
for this problem. Section 4 shows some of the main results
we get and analysis based on such results. Finally, we con-
clude this project and discuss possible future extensions in
Section 4.

2. Data Preparation
2.1. Data Collection

We obtained about 67,000 proﬁles from LinkedIn as our
data source. Each proﬁle contains an average of 3.7 pieces
of education or working experience. As for working experi-
ence, the raw data consists: name of the company, position,
time period and optional description. Education informa-
tion also breaks down into: name of the university, degree,
major and time period. We ﬁrst sorted the experiences of
one person by their beginning date. Then, we pre-process
the data in the following way in order to better model the
nature of people’s careers.

2.2. Data Pre-processing

Instead of company name, we use company size and in-
dustry as feature to represent the employer. Such informa-
tion is obtained from LinkedIn’s company pages. Using
company name as a multinomial feature would not cause
much problem for cases like Google or Goldman Sachs, as
there are plenty of people working/worked there. However,
for small companies and start-ups, it would be hard for their
employees to ﬁnd people with similar experience.
Similarly, in order to generalize the university feature
and avoid under-ﬁtting, we collect last year’s university
rank from US News[2] and divided all universities into four
categories: top 10, top 50, top 100 and other. Though uni-
versity rank does not necessarily reﬂect the reputation of a
student’s program (e.g. some school have bad overall rank
but is quite famous for certain department, like CMU), it
works well as an indicator in most cases and is relatively
easy to apply.
For degree and major, hand written rules are applied to
translate various representations to a standard set of degrees
and majors. However, for positions, we discovered that peo-
ple use too many different terms for positions. It is impossi-
ble for us to hand write some rule to categorize those tens of
thousands positions into a reasonable number of categories.
Therefore, we run a modiﬁed k-means clustering algorithm
on position titles.

2.3. Clustering

2.3.1 Distance

2.3.2 Algorithm

We use the K-means clustering algorithm and choose k to
be an arbitrary number, 1000. Also, instead of updating the
k means to be the centroids of each cluster, we set the new
means to be the phrase that has the highest total similarity
with all the phrases in the cluster.

2.3.3 Clustering Result

After clustering, many semantically similar position titles
are grouped together. For example, “software develop-
ment engineer”, “programmer”, “software developer” are
all grouped together with “software engineer”, and “Re-
cruiting Coordinator”, “Technical Recruiter” are grouped
with “Recruiter”. However, some acronyms, like “VP”, in-
stead of clustered to be with “Vice President”, just stand
alone as WordNet does not contain information regarding
this word.

3. Model
3.1. Markov Chain
First, we assume people’s current job only depends on
his most recent job (or education). This is a simpliﬁed ver-
sion of the problem; however, we can always index the state
by considering all history information to achieve Markov
property.
Thus, we can model a career path as a Markov chain, i.e.
the next state depends only on the current state.
P (Xt = xt |Xt−1 = xt−1 , ..., X1 = x1 )
= P (Xt = xt |Xt−1 = xt−1 )
And we further assume the career path is a time-
homogeneous Markov chain, so that the process is de-
scribed by a single, time-independent transition matrix p.

Figure 2. Markov chain

The distance between each two position titles is deﬁned by
their averaged semantic similarity. The semantic similarity
is generated from the WordNet::Similarity project[1], which
is a Perl module that implements a variety of semantic sim-
ilarity measures based on information from lexical database
WordNet[3].

3.2. Probability Estimation
We need to estimate the transition matrix p(N ,N ) , where
N is the total number of different states, and entry pi,j rep-
resents the probability of going from state i to state j
pi,j = P r(Xt = j |Xt−1 = i)

We have observation z (n) of people’s proﬁle, which is
a sequence of states x1 , x2 , ..., xn , and we also think a ca-
reer path of length n is a random variable Z (n) . Then the
probability of Z (n) taking value of z (n)
n(cid:89)
P r(Z (n) = z (n) )
n(cid:89)
t=2
t=2

P r(Xt = xt |Z (t−1) = z (t−1) )

P r(Xt = xt |Xt−1 = xt−1 )

=P r(X1 = x1 )

=P r(X1 = x1 )

,

=

=

all observations Z (n1 )
likelihood of
1
given transition matrix p

the
Now,
Z (n2 )
,..., Z (nm )
m
2
m(cid:89)
L(p)
i = z (ni )
P r(Z (ni )
)
m(cid:89)
ni(cid:89)
i
i=1
P r(Xi,t = xi,t |Xi,t−1 = xi,t−1 )
P r(Xi,1 = xi,1 )
t=2
i=1

(cid:35)  N(cid:89)
(cid:34) m(cid:89)
If we rewrite the likelihood in terms of pi,j , we will get
N(cid:89)
j=1
i=1
i=1
Here nij is the number of times that state i goes to states j
among all observations.
Therefore, we want to maximize the log likelihood,
which is
N(cid:88)
N(cid:88)
m(cid:88)
(cid:96)(p) = log L(p)
j=1
i=1
i=1

log P r(Xi,1 = xi,1 ) +

P r(Xi,1 = xi,1 )

nij log pi,j

L(p) =

pnij
i,j

=

Also notice the probabilities have the property that the
summation of probability of making a transition from state
N(cid:88)
i is equal to 1, that is
j=1

pi,j = 1

Now we are facing a constrained optimization problem,
βi (1 − N(cid:88)
N(cid:88)
we deﬁne the Lagrangian of this problem to be
i=1
j=1

L(p, β ) = (cid:96)(p) +

pi,j )

By setting

∂L
∂ pi,j

= 0,

∂L
∂βi

= 0

We get

N(cid:88)
j=1

− βi = 0

pi,j = 1,

nij
pi,j
The solution to the problem is
nij(cid:80)N
j=1 nij

pi,j =

4. Path Prediction
Once we have the model, we can use the model to predict
a career path according to user’s requirement. We allow
user to specify a concrete objective. A concrete objective is
deﬁned by exact information he wants to achieve (Software
Engineer at Facebook, Trader at Morgan Stanley, etc.). We
apply graph search technique to solve the problem.

P ∗ = arg max
P

P r(Xt+1 = xit+1 |Xt = xit )

4.1. Shortest Path
In the concrete objective case, we have a start state xs
representing user’s background so far. The objective can
also be converted into a state xo using the information pro-
vided. Now we want to predict a path P ∗ = xi1 , xi2 , ..., xin
which is most possible from xs = xi1 to xo = xin , that is
n−1(cid:89)
n−1(cid:88)
t=1
= arg max
n−1(cid:88)
P
t=1
= arg min
P
t=1
So if we consider each state as a vertex, put − log pit+1 ,it
as weight on edge (it+1 , it ). Solving the problem is equiv-
alent to ﬁnding a shortest path between a single source and
a single destination on directed graph, and all weights are
positive. The problem can be solved using Dijkstra’s algo-
rithm.

− log pit+1 ,it

log pit+1 ,it

5. Results
On given queries, our model has generated plausible and
logical career path recommendations.
For instance, when a person with a computer science de-
gree intends to reach a senior developer position in a large
non-IT-related company, the generated path would ﬁrst rec-
ommend a developer position in junior level in a IT com-
pany, then try to switch over to that goal position, which
corresponds to our conventional opinion.
Also, if a person with a computer science degree intends
to land a director position in a ﬁnancial ﬁrm, the model

sons education info is the query input. However, when a se-
nior position is the goal, there may not be enough multi-step
entries in the proﬁle that outweighs the number of direct
transition entries found. As a way of reducing the models
ﬁnal search space and easing the data preparing phase, we
imposed strict format restrictions on parsing of the original
data. It is likely that the more transitions a person experi-
enced, the more likely that format is violated, thus resulting
the proﬁle ﬁltered out. This is one of the areas that require
the most urgent optimization.
Finally, as mentioned in the result section, the accuracy
of the generated paths is mostly to be measured against
common sense, so given a real proﬁles education info and
current position, the generated path may differ from that
persons actual experience, but this does not necessarily
mean that the accuracy is bad on this query.
As for future work and modiﬁcations, we intend to ﬁrst
improve the quality of the transition from raw data in nat-
ural language format to the training input in mathematical
format. This includes a more powerful initial parser and a
better clustering algorithm to cluster major and position ti-
tles, or even company industry. Then we would seek other
applicable learning algorithm to train the model, possibly
on binary-component features. In addition, we would seek
ways to automatically evaluate the quality and accuracy for
the generated path.

References
[1] T. Pederson, S. Patwardhan, J. Michelizze, and S. Baner-
jee. Wordnet::similarity, 2008. http://www.d.umn.edu/ tped-
erse/similarity.html.
[2] National
news,
us
-
rankings
universities
http://colleges.usnews.rankingsandreviews.com/best-
colleges/national-universities-rankings.
[3] Wordnet, 2006. http://wordnet.princeton.edu/.

2010.

would ﬁrst recommend obtaining a degree in the ﬁnancial-
related major, preferably masters, then climb the ladder up
through assistant manager, manager and eventually reach
director. This also conforms to the common understanding
that transition into another industry ﬁeld is eased by obtain-
ing a relevant degree.
However, due to the nature that the accuracy of our ca-
reer path generation is largely to be measured against hu-
man common sense, it is difﬁcult to provide means of au-
tomatic result evaluation. This is further elaborated in the
conclusion section.

6. Conclusion
Our model gives convincing result on basic queries that
generally results in short-stepped paths. However, despite
the effort, the models logical accuracy quickly falls off
when the expected length of the path increases, or in other
words, the level of goal position increases. One such in-
teresting, however undesirable result comes from querying
the path from a college graduate to a large companys CEO.
The model gives just a single step conversion. The falloff
is most likely the result of the original data skew and our
preprocessing of the data, and is further explained later.
Several reasons factored into the lack of desirable result.
First of all, the feature components that are relevant to the
career path module are difﬁcult to be automatically quanti-
ﬁed and compared. Aside from the rankings of graduating
universities and the sizes of the company, both of which are
more considered as ranges rather than an exact number, the
values of other components, including the majors, position
titles and industry ﬁelds, are all distinct and incomparable to
each other, and can only be indexed or treated with binary
representations. Except for the binary representation that
would create sparse features with thousands of components
of which only few of them are 1s, the lack of proper mathe-
matical representation seriously limits the machine learning
algorithms that are applicable to the proposed problem.
Secondly, the raw data from LinkedIn is represented in
natural language format, and this added to the task of data
cleaning an additional level of processing requirement. The
entries in the raw data highly vary from person to person,
depending on their input. Many position titles contain more
details than what we desire, which is more general, e.g.
computer engineer.
In addition, many titles are actually
meaning the same position (software developer vs. soft-
ware engineer vs. programmer). Our clustering algorithm
depends on similarity between words, so the actual accuracy
of similarity between title phrases is yet to be examined.
Thirdly, our model is completely trained from real hu-
man input, so it may be largely skewed towards education-
position transition, which in our interpretation of the model
is a must-have step in that persons career path. This results
a more accurate path generation in the ﬁrst step when a per-

