Getting lost in space: Large sample analysis of the
commute distance

Agnes Radl
Ulrike von Luxburg
Max Planck Institute for Biological Cybernetics, T ¨ubingen, Germany
{ulrike.luxburg,agnes.radl}@tuebingen.mpg.de

Matthias Hein
Saarland University, Saarbr ¨ucken, Germany
hein@cs.uni-sb.de

Abstract

The commute distance between two vertices in a graph is the expected time it takes
a random walk to travel from the ﬁrst to the second vertex and back. We study the
behavior of the commute distance as the size of the underlying graph increases.
We prove that the commute distance converges to an expression that does not take
into account the structure of the graph at all and that is completely meaningless
as a distance function on the graph. Consequently, the use of the raw commute
distance for machine learning purposes is strongly discouraged for large graphs
and in high dimensions. As an alternative we introduce the ampliﬁed commute
distance that corrects for the undesired large sample effects.

1

Introduction

Given an undirected, weighted graph, the commute distance between two vertices u and v is deﬁned
as the expected time it takes a random walk starting in vertex u to travel to vertex v and back to u.
As opposed to the shortest path distance, it takes into account all paths between u and v , not just the
shortest one. As a rule of thumb, the more paths connect u with v , the smaller the commute distance
becomes. As a consequence, it supposedly satisﬁes the following, highly desirable property:
Property (F): Vertices in the same cluster of the graph have a small commute
distance, whereas two vertices in different clusters of the graph have a “large”
commute distance.

It is because of this property that the commute distance has become a popular choice and is widely
used, for example in clustering (Yen et al., 2005), semi-supervised learning (Zhou and Sch ¨olkopf,
2004), in social network analysis (Liben-Nowell and Kleinberg, 2003), for proximity search (Sarkar
et al., 2008), in image processing (Qiu and Hancock, 2005), for dimensionality reduction (Ham
et al., 2004), for graph embedding (Guattery, 1998, Saerens et al., 2004, Qiu and Hancock, 2006,
Wittmann et al., 2009) and even for deriving learning theoretic bounds for graph labeling (Herbster
and Pontil, 2006, Cesa-Bianchi et al., 2009). One of the main contributions of this paper is to
establish that property (F) does not hold in many relevant situations.
In this paper we study how the commute distance (up to a constant factor equivalent to the resistance
distance, see below for exact deﬁnitions) behaves when the size of the graph increases. We focus on
the case of random geometric graphs as this is most relevant to machine learning, but similar results
hold for very general classes of graphs under mild assumptions. Denoting by Hij the expected
hitting time, by Cij the commute distance between two vertices vi and vj and by di the degree of

1

+

.

and

vertex vi we prove that the hitting times and commute distances can be approximated (up to the
constant vol(G) that denotes the volume of the graph) by
1
1
1
vol(G) Cij ≈ 1
vol(G) Hij ≈ 1
dj
dj
di
The intuitive reason for this behavior is that if the graph is large, the random walk “gets lost” in
the sheer size of the graph. It takes so long to travel through a substantial part of the graph that by
the time the random walk comes close to its goal it has already “forgotten” where it started from.
For this reason, the hitting time Hij does not depend on the starting vertex vi any more. It only
depends on the inverse degree of the target vertex vj , which intuitively represents the likelihood that
the random walk exactly hits vj once it is in its neighborhood. In this respect it shows the same
behavior as the mean return time at j (the mean time it takes a random walk that starts at j to return
to its staring point) which is well-known to be vol(G) · 1/dj as well.
Our ﬁndings have very strong implications:
The raw commute distance is not a useful distance function on large graphs. On the negative
side, our approximation result shows that contrary to popular belief, the commute distance does not
take into account any global properties of the data, at least if the graph is “large enough”. It just
considers the local density (the degree of the vertex) at the two vertices, nothing else. The resulting
large sample commute distance dist(vi , vj ) = 1/di + 1/dj is completely meaningless as a distance
on a graph. For example, all data points have the same nearest neighbor (namely, the vertex with
the largest degree), the same second-nearest neighbor (the vertex with the second-largest degree),
and so on. In particular, the main motivation to use the commute distance, Property (F), no longer
holds when the graph becomes “large enough”. Even more disappointingly, computer simulations
show that n does not even need to be very large before (F) breaks down. Often, n in the order of
1000 is already enough to make the commute distance very close to its approximation expression
(see Section 5 for details). This effect is even stronger if the dimensionality of the underlying data
space is large. Consequently, even on moderate-sized graphs, the use of the raw commute distance
as a basis for machine learning algorithms should be discouraged.
Correcting the commute distance. It has been reported in the literature that hitting times and com-
mute times can be observed to be quite small if the vertices under consideration have a high degree,
and that the spread of the commute distance values can be quite large (Liben-Nowell and Kleinberg,
2003, Brand, 2005, Yen et al., 2009). Subsequently, the authors suggested several different methods
to correct for this unpleasant behavior. In the light of our theoretical results we can see immediately
why the undesired behavior of the commute distance occurs. Moreover, we are able to analyze the
suggested corrections and prove which ones are meaningful and which ones not (see Section 4).
Based on our theory we suggest a new correction, the ampliﬁed commute distance. This is a new
distance function that is derived from the commute distance, but avoids its artifacts. This distance
function is Euclidean, making it well-suited for machine learning purposes and kernel methods.
Efﬁcient computation of approximate commute distances. In some applications the commute
distance is not used as a distance function, but for other reasons, for example in graph sparsiﬁcation
(Spielman and Srivastava, 2008) or when computing bounds on mixing or cover times (Aleliunas
et al., 1979, Chandra et al., 1989, Avin and Ercal, 2007, Cooper and Frieze, 2009) or graph labeling
(Herbster and Pontil, 2006, Cesa-Bianchi et al., 2009). To obtain the commute distance between all
points in a graph one has to compute the pseudo-inverse of the graph Laplacian matrix, an operation
of time complexity O(n3 ). This is prohibitive in large graphs. To circumvent the matrix inversion,
several approximations of the commute distance have been suggested in the literature (Spielman and
Srivastava, 2008, Sarkar and Moore, 2007, Brand, 2005). Our results lead to a much simpler and
well-justiﬁed way of approximating the commute distance on large random geometric graphs.

2 General setup, deﬁnitions and notation
(wij )i,j=1,...,n . By di := Pn
j=1 wij we denote the degree of vertex vi and vol(G) := Pn
We consider undirected, weighted graphs G = (V , E ) with n vertices. We always assume that G is
connected and not bipartite. The non-negative weight matrix (adjacency matrix) is denoted by W :=
j=1 dj is
the volume of the graph. D denotes the diagonal matrix with diagonal entries d1 , . . . , dn and is
called the degree matrix.

2

Our main focus in this paper is the class of random geometric graphs as it is most relevant to machine
learning. Here we are given a sequence of points X1 , . . . , Xn that has been drawn i.i.d. from some
underlying density p on Rd . These points form the vertices v1 , . . . , vn of the graph. The edges in
the graph are deﬁned such that “neighboring points” are connected: In the ε-graph we connect two
points whenever their Euclidean distance is less than or equal to ε. In the undirected, symmetric
k-nearest neighbor graph we connect vi to vj if Xi is among the k nearest neighbors of Xj or vice
versa. In the mutual k-nearest neighbor graph we connect vi to vj if Xi is among the k nearest
neighbors of Xj and vice versa. For space constraints we only discuss the case of unweighted
graphs in this paper. Our results can be carried over to weighted graphs, in particular to weighted
kNN-graphs and Gaussian similarity graphs.
Consider the natural random walk on G, that is the random walk with transition matrix P = D−1W .
The hitting time Hij is deﬁned as the expected time it takes a random walk starting in vertex vi to
travel to vertex vj (with Hii := 0 by deﬁnition). The commute distance (also called commute time)
between vi and vj is deﬁned as Cij := Hij + Hj i . Some readers might also know the commute
distance under the name resistance distance. Here one interprets the graph as an electrical network
where the edges represent resistors. The conductance of a resistor is given by the corresponding edge
weight. The resistance distance Rij between i and j is deﬁned as the effective resistance between
the vertices i and j in the network. It is well known that the resistance distance coincides with the
commute distance up to a constant: Cij = vol(G) ·Rij . For background reading see Doyle and Snell
(1984), Klein and Randic (1993), Xiao and Gutman (2003), Fouss et al. (2006), Bollob ´as (1998),
Lyons and Peres (2010).
For the rest of the paper we consider a probability distribution with density p on Rd . We want to
study the behavior of the commute distance between two ﬁxed points s and t. We will see that we
only need to study the density in a reasonably small region X ⊂ Rd that contains s and t. For
convenience, let us make the following deﬁnition.
Deﬁnition 1 (Valid region) Let p be any density on Rd , and s, t ∈ Rd be two points with
p(s), p(t) > 0. We call a connected subset X ⊂ Rd a valid region with respect to s, t and p if
the following properties are satisﬁed:
1. s and t are interior points of X .
2. The density on X is bounded away from 0, that is for all x ∈ X we have that p(x) ≥
pmin > 0 for some constant pmin . Assume that pmax := maxx∈X p(x) < ∞.
3. X has “bottleneck” larger than some value h > 0: the set {x ∈ X : dist(x, ∂X ) > h/2}
is connected (here ∂X denotes the topological boundary of X ).
4. The boundary of X is regular in the following sense. We assume that there exist positive
constants α > 0 and ε0 > 0 such that if ε < ε0 , then for all points x ∈ ∂X we have
vol(Bε (x) ∩ X ) ≥ α vol(Bε (x)) (where vol denotes the Lebesgue volume). Essentially
this condition just excludes the situation where the boundary has arbitrarily thin spikes.

For readability reasons, we are going to state some of our main results using constants ci > 0. These
constants are independent of n and the graph connectivity parameter (ε or k , respectively) but depend
on the dimension, the geometry of X , and p. The values of all constants are determined explicitly in
the proofs. They do not coincide across different propositions. For notational convenience, we will
formulate all the following results in terms of the resistance distance. To obtain the results for the
commute distance one just has to multiply by factor vol(G).

3 Convergence of the resistance distance on random geometric graphs

In this section we present our theoretical main results for random geometric graphs. We show that
on this type of graph, the resistance distance Rij converges to the trivial limit 1/di + 1/dj . For
space constraints we only formulate these results for unweighted kNN and ε-graphs. Similar results
also hold for weighted variants of these graphs and for Gaussian similarity graphs.

Theorem 2 (Resistance distance on kNN-graphs) Fix two points Xi and Xj . Consider a valid
region X with respect to Xi and Xj with bottleneck h and density bounds pmin and pmax . Assume
that Xi and Xj have distance at least h from the boundary of X and that (k/n)1/d /2pmax ≤ h.

3

Then there exist constants c1 , . . . , c5 > 0 such that with probability at least 1 − c1n exp(−c2k) the
(cid:0)log(n/k) + (k/n)1/3 + 1(cid:1)
(cid:12)(cid:12)(cid:12)(cid:12)kRij −
(cid:19)(cid:12)(cid:12)(cid:12)(cid:12) ≤
(cid:26)c4
(cid:18) k
resistance distance on both the symmetric and the mutual kNN-graph satisﬁes
if d = 3
1
+ k
k
if d > 3
1
c5
di
dj
k
The probability converges to 1 if n → ∞ and k/ log(n) → ∞. The rhs of the deviation bound
converges to 0 as n → ∞, if k → ∞ and k/ log(n/k) → ∞ in case d = 3, and if k → ∞ in case
d > 3. Under these conditions, if the density p is continuous and if additionally k/n → 0, then
kRij → 2 in probability.
Theorem 3 (Resistance distance on ε-graphs) Fix two points Xi and Xj . Consider a valid region
X with respect to Xi and Xj with bottleneck h and density bounds pmin and pmax . Assume that Xi
and Xj have distance at least h from the boundary of X and that ε ≤ h. Then there exist constants
c1 , . . . , c6 > 0 such that with probability at least 1 − c1n exp(−c2nεd ) − c3 exp(−c4nεd )/εd the
(
(cid:12)(cid:12)(cid:12)(cid:12)nεdRij −
(cid:19)(cid:12)(cid:12)(cid:12)(cid:12) ≤
(cid:18) nεd
resistance distance on the ε-graph satisﬁes
if d = 3
+ nεd
c5
if d > 3
1
di
dj
c6
nεd
The probability converges to 1 if n → ∞ and nεd/ log(n) → ∞. The rhs of the deviation bound
converges to 0 as n → ∞, if nε3 / log(1/ε) → ∞ in case d = 3, and if nεd → ∞ in case d > 3.
Under these conditions, if the density p is continuous and if additionally ε → 0, then
nεdRij → 1
1
ηdp(Xi )
ηdp(Xj )

log(1/ε)+ε+1
nε3

+

in probability.

Let us discuss the theorems en bloc. We start with a couple of technical remarks. Note that to achieve
the convergence of the resistance distance we have to rescale it appropriately (for example, in the
ε-graph we scale by a factor of nεd ). Our rescaling is exactly chosen such that the limit expressions
are ﬁnite, positive values. Scaling by any other factor in terms of n, ε or k either leads to divergence
or to convergence to zero.
The convergence conditions on n and ε (or k , respectively) are the ones to be expected for random
geometric graphs. They are satisﬁed as soon as the degrees are of the order log(n) (for smaller
degrees, the graphs are not connected anyway, see e.g. Penrose, 1999). Hence, our results hold for
sparse as well as for dense connected random geometric graphs.
The valid region X has been introduced for technical reasons. We need to operate in such a region
in order to be able to control the behavior of the graph, e.g. the average degrees. The assumptions
on X are the standard assumptions used in the random geometric graph literature. In our setting, we
have the freedom of choosing X ⊂ Rd as we want. In order to obtain the tightest bounds one should
aim for a valid X that has a wide bottleneck and a high minimal density.
More generally, results about the convergence of the commute distance to 1/di + 1/dj can also be
proved for other kinds of graphs such as graphs with given expected degrees and even for power law
graphs, under the assumption that the minimal degree in the graph slowly increases with n. Details
are beyond the scope of this paper.
Proof outline of Theorems 2 and 3 (full proofs are presented in the supplementary material). Con-
sider two ﬁxed vertices s and t in a connected graph and consider the graph as an electrical network
where each edge has resistance 1. By the electrical laws, resistances in series add up, that is for two
resistances R1 and R2 in series we get the overall resistance R = R1 + R2 . Resistances in parallel
1/R = Pds
lines satisfy 1/R = 1/R1 + 1/R2 . Now consult the situation in Figure 1. Consider the vertex s and
all edges from s to its ds neighbors. The resistance “spanned” by these ds parallel edges satisﬁes
i=1 1, that is R = 1/ds . Similarly for t. Between the neighbors of s and the ones of t there
are very many paths. It turns out that the contribution of these paths to the resistance is negligible
(essentially, we have so many wires between the two neighborhoods that electricity can ﬂow nearly
freely). So the overall effective resistance between s and t is dominated by the edges adjacent to i
and j with contributions 1/ds + 1/dt .
Providing a clean mathematical proof for this argument is quite technical. Our proof is based on
Corollary 6 in Section IX.2 of Bollob ´as (1998) that states that the resistance distance beween two

4

Figure 1: Intuition for the proof of Theorems 2 and 3. See text for details.
(cid:12)(cid:12)(cid:12) u = (ue )e∈E unit ﬂow from s to t
n P
o
ﬁxed vertices s and t can be expressed as
e∈E u2
.
e
To apply this theorem one has to construct a ﬂow that spreads “as widely as possible” over the whole
graph. Counting edges and adding up resistances then leads to the desired results. Details are ﬁddly
and can be found in the supplementary material.
,

Rst = inf

4 Correcting the resistance distance
Obviously, the large sample resistance distance Rij ≈ 1/di + 1/dj is completely meaningless as
a distance on a graph. The question we want to discuss in this section is whether there is a way to
correct the commute distance such that this unpleasant large sample effect does not occur. Let us
start with some references to the literature. It has been observed in several empirical studies that the
commute distances are quite small if the vertices under consideration have a high degree, and that
the spread of the commute distance values can be quite large. Our theoretical results immediately
explain this behavior: if the degrees are large, then 1/di + 1/dj is very small. And compared to the
“spread” of di , the spread of 1/di can be enormous.
Several heuristics have been suggested to solve this problem. Liben-Nowell and Kleinberg (2003)
suggest to correct the hitting times by simply multiplying by the degrees. For the commute distance,
this leads to the suggested correction of CLN K (i, j ) := dj Hij + diHj i . Even though we did
not prove it explicitly in our paper, the convergence results for the commute time also hold for
the individual hitting times. Namely, hitting time Hij can be approximated by vol(G)/dj . These
theoretical results immediately show that the correction CLN K is not useful, at least if we consider
the absolute values. For large graphs, it simply has the effect of normalizing all hitting times to
≈ 1, leading to CLN K ≈ 2. However, we believe that the ranking introduced by this distance
function still contains useful information about the data. The reason is that while the ﬁrst order
terms dominate the absolute value and converge to two, the second order terms introduce some
“variation around two”, and this variation might encode the cluster structure.
Yen et al. (2009) exploit the well-known fact that the commute distance is Euclidean and its kernel
matrix coincides with the Moore-Penrose inverse L+ of the graph Laplacian matrix. The authors
now apply a sigmoid transformation to L+ and consider KYen (i, j ) = 1/(1 + exp(−l+
ij /σ)) for
some contant σ . The idea is that the sigmoid transformation reduces the spread of the distance (or
similarity) values. However, this is an ad-hoc approach that has the disadvantage that the resulting
“kernel” KYen is not positive deﬁnite.
A third correction has been suggested in Brand (2005). As Yen et al. (2009) he considers the kernel
KBrand (i, j ) = ¯Kij /p ¯Kii ¯Kj j
matrix that corresponds to the commute distance. But instead of applying a sigmoid transformation
Pn
Pn
he centers and normalizes the kernel matrix in the feature space. This leads to the corrected kernel
k=1 (Rik + Rkj ) − 1
2 ¯Kij = −Rij + 1
with
k,l=1 Rkl .
n2
n
One the ﬁrst glance it is surprising that using the centered and normalized kernel instead of the
commute distance should make any difference. However, whenever one takes a Euclidean distance
function of the form dist(i, j ) = sij + ui + uj − 2δij ui and computes the corresponding centered
nX
kernel matrix, one obtains
r=1

ij + 2δij ui − 2
Kij = K s
n

(ui + uj ) +

(1)

2
n2

ur ,

5

very many pathsresistance 1edges, each withmany outgoingdtmany outgoingedges, each withresistance 1dsstwhere K s is the kernel matrix induced by s. Thus the off-diagonal terms are still inﬂuenced by ui
n compared to the diagonal. Even though this is no longer the case after
but with a decaying factor 1
normalization (because for the normalization the diagonal terms are important, and these terms still
depend on the di ), we believe that this is the key to why Brand’s kernel is useful.
What would be a suitable correction based on our theoretical results? The proof of our main the-
orems shows that the edges adjacent to i and j completely dominate the behavior of the resistance
distance: they are the “bottleneck” of the ﬂow, and their contribution 1/di + 1/dj dominates all
the other terms. The interesting information about the global topology of the graph is contained
in the remainder terms Sij = Rij − 1/di − 1/dj , which summarize the ﬂow contributions of all
other edges in the graph. We believe that the key to obtaining a good distance function is to remove
the inﬂuence of the 1/di terms and “amplify” the inﬂuence of the general graph term Sij . This
can be achieved by either using the off-diagonal terms of the pseudo-inverse graph Laplacian L†
while ignoring its diagonal, or by building a distance function based on the remainder terms Sij
directly. We choose the second option and propose the following new distance function. We deﬁne
the ampliﬁed commute distance as Camp (i, j ) = Sij + uij with Sij = Rij − 1/di − 1/dj and
i − wj j /d2
uij = 2wij /didj − wii /d2
j . Of course we set Camp (i, i) = 0 for all i.
Proposition 4 (Ampliﬁed commute distance is Euclidean) The matrix D with entries dij =
Camp (i, j )1/2 is a Euclidean distance matrix.
In preliminary work we show that the remainder terms can be written as Sij =
Proof outline.
h(ei − ej ), B (ei − ej )i − uij where ei denotes the i-th unit vector and B is a positive deﬁnite matrix
(see the proof of Proposition 2 in von Luxburg et al., 2010). This implies the desired statement. ,
Additionally to being a Euclidean distance, the ampliﬁed commute distance has a nice limit behavior.
When n → ∞ the terms uij are dominated by the terms Sij , hence all that is left are the “interesting
q ¯Kii ¯Kj j
terms” Sij . For all practical purposes, one should use the kernel induced by the ampliﬁed commute
distance and center and normalize it. In formulas, the ampliﬁed commute kernel is
110 )Camp (I − 1
¯K = (I − 1
110 )
Kamp (i, j ) := ¯Kij /
n
n
(where I is the identity matrix, 1 the vector of all ones, and Camp the ampliﬁed commute distance
matrix). The next section shows that the kernel Kamp works very nicely in practice.
Note that the correction by Brand and our ampliﬁed commute kernel are very similar, but not identi-
cal with each other. The off-diagonal terms of both kernels are very close to each other, see Equation
(1), that is if one is only interested in a ranking based on similarity values, both kernels behave simi-
larly. However, an important difference is that the diagonal terms in the Brand kernel are way bigger
than the ones in the ampliﬁed kernel (using our convergence techniques one can show that the Brand
kernel converges to an identity matrix, that is the diagonal completely dominates the off-diagonal
terms). This might lead to the effect that the Brand kernel behaves worse than our kernel with
algorithms like the SVM that do not ignore the diagonal of the kernel.

with

(2)

5 Experiments

Our ﬁrst set of experiments considers the question how fast the convergence of the commute distance
takes place in practice. We will see that already for relatively small data sets, a very good approx-
imation takes place. This means that the problems of the raw commute distance already occur for
small sample size. Consider the plots in Figure 2. They report the maximal relative error deﬁned as
maxij |Rij − 1/di − 1/dj |/Rij and the corresponding mean relative error on a log10 -scale. We show
the results for ε-graphs, unweighted kNN graphs and Gaussian similarity graphs (fully connected
weighted graphs with edge weights exp(kxi − xj k2 /σ2 )). In order to be able to plot all results in
the same ﬁgure, we need to match the parameters of the different graphs. Given some value k for
the kNN-graph we thus set the values of ε for the ε-graph and σ for the Gaussian graph to be equal
to the maximal k-nearest neighbor distance in the data set.
Sample size. Consider a set of points drawn from the uniform distribution on the unit cube in R10 .
As can be seen in Figure 2 (ﬁrst plot), the maximal relative error decreases very fast with increasing
sample size. Note that already for small sample sizes the maximal deviations get very small.
Dimension. A result that seems surprising at ﬁrst glance is that the maximal deviation decreases

6

Figure 2: Relative deviations between true and approximate commute distances. Solid lines show
the maximal relative deviations, dashed lines the mean relative deviations. See text for details.

as we increase the dimension, see Figure 2 (second plot). The intuitive explanation is that in higher
dimensions, geometric graphs mix faster as there exist more “shortcuts” between the two sides of
the point cloud. Thus, the random walk “forgets faster” where it started from.
Clusteredness. The deviation gets worse if the data has a more pronounced cluster structure. Con-
sider a mixture of two Gaussians in R10 with unit variances and the same weight on both compo-
nents. We call the distance between the centers of the two components the separation. In Figure 2
(third plot) we show both the maximum relative errors (solid lines) and mean relative errors (dashed
lines). We can clearly see that with increasing separation, the deviation increases.
Sparsity. The last plot of Figure 2 shows the relative errors for increasingly dense graphs, namely
for increasing parameter k . Here we used the well-known USPS data set of handwritten digits (9298
points in 256 dimensions). We plot both the maximum relative errors (solid lines) and mean relative
errors (dashed lines). We can see that the errors decrease the denser the graph gets. Again this is
due to the fact that the random walk mixes faster on denser graphs. Note that the deviations are
extremely small on this real-world data set.
In a second set of experiments we compare the different corrections of the raw commute distance. To
this end, we built a kNN graph of the whole USPS data set (all 9298 points, k = 10), computed the
commute distance matrix and the various corrections. The resulting matrices are shown in Figure
3 (left part) as heat plots. In all cases, we only plot the off-diagonal terms. We can see that as
predicted by theory, the raw commute distance does not identify the cluster structure. However, the
cluster structure is still visible in the kernel corresponding to the commute distance, the pseudo-
inverse graph Laplacian L† . The reason is that the diagonal of this matrix can be approximated by
(1/d1 , ...., 1/dn ), whereas the off-diagonal terms encode the graph structure, but on a much smaller
scale than the diagonal. In our heat plots, all four corrections of the graph Laplacian show the cluster
structure to a certain extent (the correction by LNK to a small extent, the corrections by Brand, Yen
and us to a bigger extent).
A last experiment evaluates the performance of the different distances in a semi-supervised learning
task. On the whole USPS data set, we ﬁrst chose some random points to be labeled. Then
we classiﬁed the unlabeled points by the k-nearest neighbor classiﬁer based on the distances
to the labeled data points. For each classiﬁer, k was chosen by 10-fold cross-validation among
k ∈ {1, ..., 10}. The experiment was repeated 10 times. The mean results can be seen in Figure 3
(right ﬁgure). As baseline we also report results based on the standard Euclidean distance between
the data points. As predicted by theory, we can see that the raw commute distance performs
extremely poor. The Euclidean distance behaves reasonably, but is outperformed by all corrections
of the commute distance. This shows ﬁrst of all that using the graph structure does help over the
basic Euclidean distance. While the naive correction by LNK stays close to the Euclidean distance,
the three corrections by Brand, Yen and us virtually lie on top of each other and outperform the

7

20050010002000−3−2.5−2−1.5−1data uniform, dim=10, k= n/10log10(rel deviation)n  Gaussianepsilonknn2510−3−2.5−2−1.5−1−0.5data uniform, n=2000, k=100log10(rel deviation)dim  Gaussianepsilonknn123−4−3−2−10separationlog10(rel deviation)mixture of Gaussians,n=2000, dim=10, k=100  Gaussianepsilonknn0123−5−4−3−2−10log10(k)log10(rel deviation)USPS data set  GaussianepsilonknnFigure 3: Figures on the left: Distances and kernels based on a kNN graph between all 9298 USPS
points (heat plots, off-diagonal terms only): exact resistance distance, pseudo-inverse graph Lapla-
cian L† ; kernels corresponding to the corrections by LNK, Yen, Brand, and our ampliﬁed Kamp .
Figure on the right: Semi-supervised learning results based on the different distances and kernels.
The last three lines corresponding to the ampliﬁed, Brand and Yen kernel lie on top of each other.

other methods by a large margin.

We conclude with the following tentative statements. We believe that the correction by LNK is “a bit
too naive”, whereas the corrections by Brand, Yen and us “tend to work” in a ranking based setting.
Based on our simple experiments it is impossible to judge which out of these candidates is “the best
one”. We are not too fond of Yen’s correction because it does not lead to a proper kernel. Both
Brand’s and our kernel converge to (different) limit functions. So far we do not know the theoretical
properties of these limit functions and thus cannot present any theoretical reason to prefer one over
the other. However, we think that the diagonal dominance of the Brand kernel can be problematic.

6 Discussion

In this paper we have proved that the commute distance on random geometric graphs can be
approximated by a very simple limit expression. Contrary to intuition, this limit expression no
longer takes into account the cluster structure of the graph, nor any other global property (such as
distances in the underlying Euclidean space). Both our theoretical bounds and our simulations tell
the same story: the approximation gets better if the data is high-dimensional and not extremely
clustered, both of which are standard situations in machine learning. This shows that the use of the
raw commute distance for machine learning purposes can be problematic. However, the structure
of the graph can be recovered by certain corrections of the commute distance. We suggest to use
either the correction by Brand (2005) or our own ampliﬁed commute kernel from Section 4. Both
corrections have a well-deﬁned, non-trivial limit and perform well in experiments.

The intuitive explanation for our result is that as the sample size increases, the random walk on the
sample graph “gets lost” in the sheer size of the graph. It takes so long to travel through a substantial
part of the graph that by the time the random walk comes close to its goal it has already “forgotten”
where it started from. Stated differently: the random walk on the graph has mixed before it hits the
desired target vertex. On a higher level, we expect that the problem of “getting lost” not only affects
the commute distance, but many other methods where random walks are used in a naive way to
explore global properties of a graph. For example, the results in Nadler et al. (2009), where artifacts
of semi-supervised learning in the context of many unlabeled points are studied, seem strongly
related to our results.
In general, we believe that one has to be particularly careful when using
random walk based methods for extracting global properties of graphs in order to avoid getting lost
and converging to meaningless results.

8

205010020040000.20.40.60.81Number of labeled pointsclassification errorSemi−supervised learning task  Raw commute distEuclidean distLNK distAmplified kernelBrand kernelYen kernelReferences
R. Aleliunas, R. Karp, R. Lipton, L. Lov ´asz, and C. Rackoff. Random walks, universal traversal
sequences, and the complexity of maze problems. In FOCS, 1979.
C. Avin and G. Ercal. On the cover time and mixing time of random geometric graphs. Theor.
Comput. Sci, 380(1-2):2–22, 2007.
B. Bollob ´as. Modern Graph Theory. Springer, 1998.
M. Brand. A random walks perspective on maximizing satisfaction and proﬁt. In SDM, 2005.
N. Cesa-Bianchi, C. Gentile, and F. Vitale. Fast and optimal prediction on a labeled tree. In COLT,
2009.
A. Chandra, P. Raghavan, W. Ruzzo, R. Smolensky, and P. Tiwari. The electrical resistance of a
graph captures its commute and cover times. In STOC, 1989.
C. Cooper and A. Frieze. The cover time of random geometric graphs. In SODA, 2009.
P. G. Doyle and J. L. Snell. Random walks and electric networks. Mathematical Association of
America, Washington, DC, 1984.
F. Fouss, A. Pirotte, J.-M. Renders, and M. Saerens. A novel way of computing dissimilarities
between nodes of a graph, with application to collaborative ﬁltering and subspace projection of
the graph nodes. Technical Report IAG WP 06/08, Universit ´e catholique de Louvain, 2006.
S. Guattery. Graph embeddings, symmetric real matrices, and generalized inverses. Technical report,
Institute for Computer Applications in Science and Engineering, NASA Research Center, 1998.
J. Ham, D. D. Lee, S. Mika, and B. Sch ¨olkopf. A kernel view of the dimensionality reduction of
manifolds. In ICML, 2004.
M. Herbster and M. Pontil. Prediction on a graph with a perceptron. In NIPS, 2006.
D. Klein and M. Randic. Resistance distance. Journal of Mathematical Chemistry, 12:81–95, 1993.
D. Liben-Nowell and J. Kleinberg. The link prediction problem for social networks. In CIKM, 2003.
R. Lyons and Y. Peres. Probability on trees and networks. Book in preparation, available online on
the webpage of Yuval Peres, 2010.
B. Nadler, N. Srebro, and X. Zhou. Statistical analysis of semi-supervised learning: The limit of
inﬁnite unlabelled data. In NIPS, 2009.
M. Penrose. A strong law for the longest edge of the minimal spanning tree. Ann. of Prob., 27(1):
246 – 260, 1999.
H. Qiu and E. R. Hancock. Image segmentation using commute times. In BMVC, 2005.
H. Qiu and E. R. Hancock. Graph embedding using commute time. S+SSPR 2006, pages 441–449,
2006.
M. Saerens, F. Fouss, L. Yen, and P. Dupont. The principal components analysis of a graph, and its
relationships to spectral clustering. In ECML, 2004.
P. Sarkar and A. Moore. A tractable approach to ﬁnding closest truncated-commute-time neighbors
in large graphs. In UAI, 2007.
P. Sarkar, A. Moore, and A. Prakash. Fast incremental proximity search in large graphs. In ICML,
2008.
D. Spielman and N. Srivastava. Graph sparsiﬁcation by effective resistances. In STOC, 2008.
U. von Luxburg, A. Radl, and M. Hein. Hitting times, commute distances and the spectral gap in
large random geometric graphs. Preprint available at Arxiv, March 2010.
D. M. Wittmann, D. Schmidl, F. Bl ¨ochl, and F. J. Theis. Reconstruction of graphs based on random
walks. Theoretical Computer Science, 2009.
W. Xiao and I. Gutman. Resistance distance and Laplacian spectrum. Theoretical Chemistry Ac-
counts, 110:284–298, 2003.
L. Yen, D. Vanvyve, F. Wouters, F. Fouss, M. Verleysen, and M. Saerens. Clustering using a random
walk based distance measure. In ESANN, 2005.
L. Yen, F. Fouss, C. Decaestecker, P. Francq, and M. Saerens. Graph nodes clustering based on the
commute-time kernel. Advances in Knowledge Discovery and Data Mining, pages 1037–1045,
2009.
D. Zhou and B. Sch ¨olkopf. Learning from Labeled and Unlabeled Data Using Random Walks. In
DAGM, 2004.

9

