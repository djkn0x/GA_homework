Double Q-learning

Hado van Hasselt
Multi-agent and Adaptive Computation Group
Centrum Wiskunde & Informatica

Abstract

In some stochastic environments the well-known reinforcement learning algo-
rithm Q-learning performs very poorly. This poor performance is caused by large
overestimations of action values. These overestimations result from a positive
bias that is introduced because Q-learning uses the maximum action value as an
approximation for the maximum expected action value. We introduce an alter-
native way to approximate the maximum expected value for any set of random
variables. The obtained double estimator method is shown to sometimes under-
estimate rather than overestimate the maximum expected value. We apply the
double estimator to Q-learning to construct Double Q-learning, a new off-policy
reinforcement learning algorithm. We show the new algorithm converges to the
optimal policy and that it performs well in some settings in which Q-learning per-
forms poorly due to its overestimation.

1

Introduction

Q-learning is a popular reinforcement learning algorithm that was proposed by Watkins [1] and can
be used to optimally solve Markov Decision Processes (MDPs) [2]. We show that Q-learning’s
performance can be poor in stochastic MDPs because of large overestimations of the action val-
ues. We discuss why this occurs and propose an algorithm called Double Q-learning to avoid this
overestimation. The update of Q-learning is
Qt+1 (st , at ) = Qt (st , at ) + αt (st , at ) (cid:16)rt + γ max
Qt (st+1 , a) − Qt (st , at )(cid:17) .
a
In this equation, Qt (s, a) gives the value of the action a in state s at time t. The reward rt is drawn
from a ﬁxed reward distribution R : S × A× S → R, where E {rt |(s, a, s′ ) = (st , at , st+1 )} = Rs′
sa .
The next state st+1 is determined by a ﬁxed state transition distribution P : S × A × S → [0, 1],
where P s′
sa gives the probability of ending up in state s′ after performing a in s, and Ps′ P s′
sa = 1.
The learning rate αt (s, a) ∈ [0, 1] ensures that the update averages over possible randomness in the
rewards and transitions in order to converge in the limit to the optimal action value function. This
optimal value function is the solution to the following set of equations [3]:
sa (cid:16)Rs′
Q∗ (s′ , a)(cid:17) .
P s′
∀s, a : Q∗ (s, a) = Xs′
sa + γ max
a
The discount factor γ ∈ [0, 1) has two interpretations. First, it can be seen as a property of the prob-
lem that is to be solved, weighing immediate rewards more heavily than later rewards. Second, in
non-episodic tasks, the discount factor makes sure that every action value is ﬁnite and therefore well-
deﬁned. It has been proven that Q-learning reaches the optimal value function Q∗ with probability
one in the limit under some mild conditions on the learning rates and exploration policy [4–6].

(1)

(2)

Q-learning has been used to ﬁnd solutions on many problems [7–9] and was an inspiration to similar
algorithms, such as Delayed Q-learning [10], Phased Q-learning [11] and Fitted Q-iteration [12],
to name some. These variations have mostly been proposed in order to speed up convergence rates

1

compared to the original algorithm. The convergence rate of Q-learning can be exponential in the
number of experiences [13], although this is dependent on the learning rates and with a proper choice
of learning rates convergence in polynomial time can be obtained [14]. The variants named above
can also claim polynomial time convergence.

Contributions An important aspect of the Q-learning algorithm has been overlooked in previous
work: the use of the max operator to determine the value of the next state can cause large over-
estimations of the action values. We show that Q-learning can suffer a large performance penalty
because of a positive bias that results from using the maximum value as approximation for the max-
imum expected value. We propose an alternative double estimator method to ﬁnd an estimate for
the maximum value of a set of stochastic values and we show that this sometimes underestimates
rather than overestimates the maximum expected value. We use this to construct the new Double
Q-learning algorithm.

The paper is organized as follows. In the second section, we analyze two methods to approximate
the maximum expected value of a set of random variables. In Section 3 we present the Double
Q-learning algorithm that extends our analysis in Section 2 and avoids overestimations. The new
algorithm is proven to converge to the optimal solution in the limit. In Section 4 we show the results
on some experiments to compare these algorithms. Some general discussion is presented in Section
5 and Section 6 concludes the paper with some pointers to future work.

2 Estimating the Maximum Expected Value

In this section, we analyze two methods to ﬁnd an approximation for the maximum expected value
of a set of random variables. The single estimator method uses the maximum of a set of estimators
as an approximation. This approach to approximate the value of the maximum expected value is
positively biased, as discussed in previous work in economics [15] and decision making [16]. It is a
bias related to the Winner’s Curse in auctions [17, 18] and it can be shown to follow from Jensen’s
inequality [19]. The double estimator method uses two estimates for each variable and uncouples
the selection of an estimator and its value. We are unaware of previous work that discusses it. We
analyze this method and show that it can have a negative bias.

Consider a set of M random variables X = {X1 , . . . , XM }. In many problems, one is interested in
the maximum expected value of the variables in such a set:
E {Xi } .
max
i
Without knowledge of the functional form and parameters of the underlying distributions of the
variables in X , it is impossible to determine (3) exactly. Most often, this value is approximated
by constructing approximations for E {Xi } for all i. Let S = SM
i=1 Si denote a set of samples,
where Si is the subset containing samples for the variable Xi . We assume that the samples in Si
are independent and identically distributed (iid). Unbiased estimates for the expected values can
def
be obtained by computing the sample average for each variable: E {Xi } = E {µi } ≈ µi (S )
=
1
|Si | Ps∈Si s, where µi is an estimator for variable Xi . This approximation is unbiased since every
sample s ∈ Si is an unbiased estimate for the value of E {Xi }. The error in the approximation thus
consists solely of the variance in the estimator and decreases when we obtain more samples.

(3)

We use the following notations: fi denotes the probability density function (PDF) of the ith variable
Xi and Fi (x) = R x
−∞ fi (x) dx is the cumulative distribution function (CDF) of this PDF. Similarly,
the PDF and CDF of the ith estimator are denoted f µ
i and F µ
i . The maximum expected value can
be expressed in terms of the underlying PDFs as maxi E {Xi } = maxi R ∞
−∞x fi (x) dx .
2.1 The Single Estimator

An obvious way to approximate the value in (3) is to use the value of the maximal estimator:
E {µi } ≈ max
E {Xi } = max
µi (S ) .
max
i
i
i
Because we contrast this method later with a method that uses two estimators for each variable, we
call this method the single estimator. Q-learning uses this method to approximate the value of the
next state by maximizing over the estimated action values in that state.

(4)

2

The maximal estimator maxi µi is distributed according to some PDF f µ
max that is dependent on the
PDFs of the estimators f µ
i . To determine this PDF, consider the CDF F µ
max (x), which gives the prob-
ability that the maximum estimate is lower or equal to x. This probability is equal to the probability
def
def
= P (maxi µi ≤ x) = QM
that all the estimates are lower or equal to x: F µ
i=1 P (µi ≤ x)
max (x)
=
i (x). The value maxi µi (S ) is an unbiased estimate for E {maxj µj } = R ∞
QM
i=1 F µ
−∞x f µ
max (x) dx ,
which can thus be given by
M
M
M
Z ∞
µj } = Z ∞
Yi6=j
Xj
Yi=1
−∞
−∞
However, in (3) the order of the max operator and the expectation operator is the other way around.
This makes the maximal estimator maxi µi (S ) a biased estimate for maxi E {Xi }. This result has
been proven in previous work [16]. A generalization of this proof is included in the supplementary
material accompanying this paper.

F µ
i (x) dx =

F µ
i (x) dx .

E {max
j

x f µ
j (s)

x

d
dx

(5)

2.2 The Double Estimator

The overestimation that results from the single estimator approach can have a large negative impact
on algorithms that use this method, such as Q-learning. Therefore, we look at an alternative method
to approximate maxi E {Xi }. We refer to this method as the double estimator, since it uses two sets
1 , . . . , µB
1 , . . . , µA
M } and µB = {µB
of estimators: µA = {µA
M }.
Both sets of estimators are updated with a subset of the samples we draw, such that S = SA ∪SB and
i (S ) = 1
i (S ) = 1
SA ∩ SB = ∅ and µA
s and µB
i | Ps∈SB
i | Ps∈SA
s. Like the single estimator
|SA
|SB
i
i
i and µB
µi , both µA
i are unbiased if we assume that the samples are split in a proper manner, for
def
j (S ) = maxi µA
= (cid:8)j | µA
instance randomly, over the two sets of estimators. Let M axA (S )
i (S )(cid:9)
be the set of maximal estimates in µA (S ). Since µB is an independent, unbiased set of estimators,
j } = E {Xj } for all j , including all j ∈ M axA . Let a∗ be an estimator that maximizes
we have E {µB
def
µA : µA
i (S ). If there are multiple estimators that maximize µA , we can for instance
= maxi µA
a∗ (S )
a∗ as an estimate for maxi E {µB
pick one at random. Then we can use µB
i } and therefore also for
maxi E {Xi } and we obtain the approximation

max
i

E {Xi } = max
i

i } ≈ µB
E {µB
a∗ .

(6)

i (S ) = µB
As we gain more samples the variance of the estimators decreases. In the limit, µA
i (S ) =
E {Xi } for all i and the approximation in (6) converges to the correct result.
Assume that the underlying PDFs are continuous. The probability P (j = a∗ ) for any j is then
equal to the probability that all i 6= j give lower estimates. Thus µA
j (S ) = x is maximal for some
i < x). Integrating out x gives P (j = a∗ ) = R ∞
value x with probability QM
i6=j P (µA
−∞P (µA
j =
= R ∞
def
x) QM
j (x) QM
i6=j P (µA
i6=j F A
i (x) dx , where f A
i and F A
−∞ f A
i < x) dx
i are the PDF and CDF
of µA
i . The expected value of the approximation by the double estimator can thus be given by
M
M
M
j } Z ∞
Yi6=j
Xj
Xj
E {µB
−∞
For discrete PDFs the probability that two or more estimators are equal should be taken into account
and the integrals should be replaced with sums. These changes are straightforward.

P (j = a∗ )E {µB
j } =

F A
i (x) dx .

f A
j (x)

(7)

Comparing (7) to (5), we see the difference is that the double estimator uses E {µB
j } in place of
x. The single estimator overestimates, because x is within integral and therefore correlates with
the monotonically increasing product Qi6=j F µ
i (x). The double estimator underestimates because
the probabilities P (j = a∗ ) sum to one and therefore the approximation is a weighted estimate of
unbiased expected values, which must be lower or equal to the maximum expected value. In the
following lemma, which holds in both the discrete and the continuous case, we prove in general that
the estimate E {µB
a∗ } is not an unbiased estimate of maxi E {Xi }.

3

1 , . . ., µA
Lemma 1. Let X = {X1 , . . . , XM } be a set of random variables and let µA = {µA
M } and
1 , . . . , µB
M } be two sets of unbiased estimators such that E {µA
i } = E {µB
µB = {µB
i } = E {Xi },
for all i. Let M def
= {j | E {Xj } = maxi E {Xi }} be the set of elements that maximize the expected
values. Let a∗ be an element that maximizes µA : µA
a∗ = maxi µA
i . Then E {µB
a∗ } = E {Xa∗ } ≤
maxi E {Xi }. Furthermore, the inequality is strict if and only if P (a∗ /∈ M) > 0.

def
= maxi E {Xi }. Now assume a∗ /∈ M and
Proof. Assume a∗ ∈ M. Then E {µB
a∗ } = E {Xa∗ }
def
choose j ∈ M. Then E {µB
= maxi E {Xi }. These two possibilities are
a∗ } = E {Xa∗ } < E {Xj }
mutually exclusive, so the combined expectation can be expressed as

a∗ } = P (a∗ ∈ M)E {µB
a∗ |a∗ ∈ M} + P (a∗ /∈ M)E {µB
a∗ |a∗ /∈ M}
E {µB
E {Xi } + P (a∗ /∈ M)E {µB
= P (a∗ ∈ M) max
a∗ |a∗ /∈ M}
i
E {Xi } + P (a∗ /∈ M) max
≤ P (a∗ ∈ M) max
i
i

E {Xi }

= max
i

E {Xi } ,

where the inequality is strict if and only if P (a∗ /∈ M) > 0. This happens when the variables have
different expected values, but their distributions overlap. In contrast with the single estimator, the
double estimator is unbiased when the variables are iid, since then all expected values are equal and
P (a∗ ∈ M) = 1.

3 Double Q-learning

We can interpret Q-learning as using the single estimator to estimate the value of the next
state: maxa Qt (st+1 , a) is an estimate for E {maxa Qt (st+1 , a)}, which in turn approximates
maxa E {Qt (st+1 , a)}. The expectation should be understood as averaging over all possible runs
of the same experiment and not—as it is often used in a reinforcement learning context—as
the expectation over the next state, which we will encounter in the next subsection as E {·|Pt }.
Therefore, maxa Qt (st+1 , a) is an unbiased sample, drawn from an iid distribution with mean
E {maxa Qt (st+1 , a)}.
In the next section we show empirically that because of this Q-learning
can indeed suffer from large overestimations. In this section we present an algorithm to avoid these
overestimation issues. The algorithm is called Double Q-learning and is shown in Algorithm 1.

Double Q-learning stores two Q functions: QA and QB . Each Q function is updated with a value
from the other Q function for the next state. The action a∗ in line 6 is the maximal valued action
in state s′ , according to the value function QA . However, instead of using the value QA (s′ , a∗ ) =
maxa QA (s′ , a) to update QA , as Q-learning would do, we use the value QB (s′ , a∗ ). Since QB was
updated on the same problem, but with a different set of experience samples, this can be considered
an unbiased estimate for the value of this action. A similar update is used for QB , using b∗ and QA .
It is important that both Q functions learn from separate sets of experiences, but to select an action
to perform one can use both value functions. Therefore, this algorithm is not less data-efﬁcient than
Q-learning. In our experiments, we calculated the average of the two Q values for each action and
then performed ǫ-greedy exploration with the resulting average Q values.

Double Q-learning is not a full solution to the problem of ﬁnding the maximum of the expected
values of the actions. Similar to the double estimator in Section 2, action a∗ may not be the ac-
tion that maximizes the expected Q function maxa E {QA (s′ , a)}. In general E {QB (s′ , a∗ )} ≤
maxa E {QA (s′ , a∗ )}, and underestimations of the action values can occur.

3.1 Convergence in the Limit

In this subsection we show that in the limit Double Q-learning converges to the optimal policy.
Intuitively, this is what one would expect: Q-learning is based on the single estimator and Double
Q-learning is based on the double estimator and in Section 2 we argued that the estimates by the
single and double estimator both converge to the same answer in the limit. However, this argument
does not transfer immediately to bootstrapping action values, so we prove this result making use of
the following lemma which was also used to prove convergence of Sarsa [20].

4

Algorithm 1 Double Q-learning
1: Initialize QA ,QB ,s
2: repeat
Choose a, based on QA (s, ·) and QB (s, ·), observe r , s′
3:
Choose (e.g. random) either UPDATE(A) or UPDATE(B)
4:
if UPDATE(A) then
5:
Deﬁne a∗ = arg maxa QA (s′ , a)
6:
QA (s, a) ← QA (s, a) + α(s, a) (cid:0)r + γQB (s′ , a∗ ) − QA (s, a)(cid:1)
7:
else if UPDATE(B) then
8:
Deﬁne b∗ = arg maxa QB (s′ , a)
9:
QB (s, a) ← QB (s, a) + α(s, a)(r + γQA (s′ , b∗ ) − QB (s, a))
10:
end if
11:
s ← s′
12:
13: until end

Lemma 2. Consider a stochastic process (ζt , ∆t , Ft ), t ≥ 0, where ζt , ∆t , Ft : X → R satisfy the
equations:

∆t+1 (xt ) = (1 − ζt (xt ))∆t (xt ) + ζt (xt )Ft (xt ) ,
(8)
where xt ∈ X and t = 0, 1, 2, . . .. Let Pt be a sequence of increasing σ -ﬁelds such that ζ0 and
∆0 are P0 -measurable and ζt , ∆t and Ft−1 are Pt -measurable, t = 1, 2, . . . . Assume that the
following hold: 1) The set X is ﬁnite. 2) ζt (xt ) ∈ [0, 1] , Pt ζt (xt ) = ∞ , Pt (ζt (xt ))2 < ∞ w.p.1
and ∀x 6= xt : ζt (x) = 0. 3) ||E {Ft |Pt }|| ≤ κ||∆t || + ct , where κ ∈ [0, 1) and ct converges to
zero w.p. 1. 4) Var{Ft (xt )|Pt } ≤ K (1 + κ||∆t ||)2 , where K is some constant. Here || · || denotes a
maximum norm. Then ∆t converges to zero with probability one.

We use this lemma to prove convergence of Double Q-learning under similar conditions as Q-
learning. Our theorem is as follows:
Theorem 1. Assume the conditions below are fulﬁlled. Then, in a given ergodic MDP, both QA and
QB as updated by Double Q-learning as described in Algorithm 1 will converge to the optimal value
function Q∗ as given in the Bellman optimality equation (2) with probability one if an inﬁnite number
of experiences in the form of rewards and state transitions for each state action pair are given by
a proper learning policy. The additional conditions are: 1) The MDP is ﬁnite, i.e. |S × A| < ∞.
2) γ ∈ [0, 1). 3) The Q values are stored in a lookup table. 4) Both QA and QB receive an
inﬁnite number of updates. 5) αt (s, a) ∈ [0, 1], Pt αt (s, a) = ∞, Pt (αt (s, a))2 < ∞ w.p.1, and
∀(s, a) 6= (st , at ) : αt (s, a) = 0. 6) ∀s, a, s′ : Var{Rs′
sa} < ∞.
A ‘proper’ learning policy ensures that each state action pair is visited an inﬁnite number of times.
For instance, in a communicating MDP proper policies include a random policy.

Sketch of the proof. We sketch how to apply Lemma 2 to prove Theorem 1 without going into full
technical detail. Because of the symmetry in the updates on the functions QA and QB it sufﬁces
0 , QB
to show convergence for either of these. We will apply Lemma 2 with Pt = {QA
0 , s0 , a0 , α0 ,
t − Q∗ , ζ = α and Ft (st , at ) = rt + γQB
t (st+1 , a∗ ) −
r1 , s1 , . . ., st , at }, X = S × A, ∆t = QA
Q∗
t (st , at ), where a∗ = arg maxa QA (st+1 , a). It is straightforward to show the ﬁrst two conditions
of the lemma hold. The fourth condition of the lemma holds as a consequence of the boundedness
condition on the variance of the rewards in the theorem.

This leaves to show that the third condition on the expected contraction of Ft holds. We can write
Ft (st , at ) = F Q
t (st+1 , a∗ ) − QA
t (st+1 , a∗ )(cid:1) ,
t (st , at ) + γ (cid:0)QB
where F Q
t (st+1 , a∗ ) − Q∗
t = rt + γQA
t (st , at ) is the value of Ft if normal Q-learning would be
under consideration. It is well-known that E {F Q
t |Pt } ≤ γ ||∆t ||, so to apply the lemma we identify
t (st+1 , a∗ ) and it sufﬁces to show that ∆BA
t (st+1 , a∗ ) − γQA
t − QA
t = QB
ct = γQB
t converges to
zero. Depending on whether QB or QA is updated, the update of ∆BA
at time t is either
t
(st , at ) + αt (st , at )F B
∆BA
t+1 (st , at ) = ∆BA
t (st , at ) , or
t
t+1 (st , at ) = ∆BA
∆BA
(st , at ) − αt (st , at )F A
t (st , at ) ,
t

5

t (st+1 , a∗ ) − QA
t (st+1 , b∗ ) −
t (st , at ) = rt + γQB
where F A
t (st , at ) = rt + γQA
t (st , at ) and F B
t = 1
QB
t (st , at ). We deﬁne ζ BA
2 αt . Then
t (st , at ) − αt (st , at )F A
(st , at ) + E {αt (st , at )F B
t+1 (st , at )|Pt } = ∆BA
E {∆BA
t (st , at )|Pt }
t
(st , at )E {F BA
(st , at ) + ζ BA
(st , at ))∆BA
= (1 − ζ BA
(st , at )|Pt } ,
t
t
t
t
t (st+1 , a∗ )|Pt(cid:9). For this step it is important
t (st+1 , b∗ ) − QB
(st , at )|Pt } = γE (cid:8)QA
where E {F BA
t
that the selection whether to update QA or QB is independent on the sample (e.g. random).
t (st+1 , a∗ )|Pt }. By deﬁnition of a∗ as given in line 6 of
t (st+1 , b∗ )|Pt } ≥ E {QB
Assume E {QA
t (st+1 , a∗ ) = maxa QA
t (st+1 , b∗ ) and therefore
Algorithm 1 we have QA
t (st+1 , a) ≥ QA
t (st+1 , b∗ ) − QB
t (st+1 , a∗ )|Pt(cid:9)
(cid:12)(cid:12)E {F BA
(st , at )|Pt }(cid:12)(cid:12) = γE (cid:8)QA
t
t (st+1 , a∗ )|Pt(cid:9) ≤ γ (cid:13)(cid:13)∆BA
t (st+1 , a∗ ) − QB
≤ γE (cid:8)QA
t (cid:13)(cid:13) .
t (st+1 , a∗ )|Pt } > E {QA
t (st+1 , b∗ )|Pt } and note that by deﬁnition of b∗ we have
Now assume E {QB
t (st+1 , a∗ ). Then
t (st+1 , b∗ ) ≥ QB
QB
t (st+1 , b∗ )|Pt(cid:9)
t (st+1 , a∗ ) − QA
(st , at )|Pt }(cid:12)(cid:12) = γE (cid:8)QB
(cid:12)(cid:12)E {F BA
t
t (st+1 , b∗ ) − QA
t (st+1 , b∗ )|Pt(cid:9) ≤ γ (cid:13)(cid:13)∆BA
≤ γE (cid:8)QB
t (cid:13)(cid:13) .
Clearly, one of the two assumptions must hold at each time step and in both cases we obtain the
desired result that |E {F BA
t k. Applying the lemma yields convergence of ∆BA
|Pt }| ≤ γ k∆BA
to
t
t
zero, which in turn ensures that the original process also converges in the limit.

4 Experiments

This section contains results on two problems, as an illustration of the bias of Q-learning and as a ﬁrst
practical comparison with Double Q-learning. The settings are simple to allow an easy interpretation
of what is happening. Double Q-learning scales to larger problems and continuous spaces in the
same way as Q-learning, so our focus here is explicitly on the bias of the algorithms.

The settings are the gambling game of roulette and a small grid world. There is considerable ran-
domness in the rewards, and as a result we will see that indeed Q-learning performs poorly. The
discount factor was 0.95 in all experiments. We conducted two experiments on each problem. The
learning rate was either linear: αt (s, a) = 1/nt (s, a), or polynomial αt (s, a) = 1/nt (s, a)0.8 . For
Double Q-learning nt (s, a) = nA
t (s, a) if QA is updated and nt (s, a) = nB
t (s, a) if QB is updated,
t and nB
where nA
t store the number of updates for each action for the corresponding value function.
The polynomial learning rate was shown in previous work to be better in theory and in practice [14].

4.1 Roulette

In roulette, a player chooses between 170 betting actions, including betting on a number, on either
of the colors black or red, and so on. The payoff for each of these bets is chosen such that almost all
bets have an expected payout of 1
38 $36 = $0.947 per dollar, resulting in an expected loss of -$0.053
per play if we assume the player bets $1 every time.1 We assume all betting actions transition back
to the same state and there is one action that stops playing, yielding $0. We ignore the available
funds of the player as a factor and assume he bets $1 each turn.

Figure 1 shows the mean action values over all actions, as found by Q-learning and Double Q-
learning. Each trial consisted of a synchronous update of all 171 actions. After 100,000 trials,
Q-learning with a linear learning rate values all betting actions at more than $20 and there is little
progress. With polynomial learning rates the performance improves, but Double Q-learning con-
verges much more quickly. The average estimates of Q-learning are not poor because of a few
poorly estimated outliers. After 100,000 trials Q-learning valued all non-terminating actions be-
tween $22.63 and $22.67 for linear learning rates and between $9.58 to $9.64 for polynomial rates.
In this setting Double Q-learning does not suffer from signiﬁcant underestimations.

1Only the so called ‘top line’ which pays $6 per dollar when 00, 0, 1, 2 or 3 is hit has a slightly lower
expected value of -$0.079 per dollar.

6

Figure 1: The average action values according to Q-learning and Double Q-learning when playing
roulette. The ‘walk-away’ action is worth $0. Averaged over 10 experiments.

Figure 2: Results in the grid world for Q-learning and Double Q-learning. The ﬁrst row shows
average rewards per time step. The second row shows the maximal action value in the starting state
S. Averaged over 10,000 experiments.

4.2 Grid World

Consider the small grid world MDP as show in Figure 2. Each state has 4 actions, corresponding to
the directions the agent can go. The starting state is in the lower left position and the goal state is
in the upper right. Each time the agent selects an action that walks off the grid, the agent stays in
the same state. Each non-terminating step, the agent receives a random reward of −12 or +10 with
equal probability. In the goal state every action yields +5 and ends an episode. The optimal policy
ends an episode after ﬁve actions, so the optimal average reward per step is +0.2. The exploration
was ǫ-greedy with ǫ(s) = 1/pn(s) where n(s) is the number of times state s has been visited,
assuring inﬁnite exploration in the limit which is a theoretical requirement for the convergence of
both Q-learning and Double Q-learning. Such an ǫ-greedy setting is beneﬁcial for Q-learning, since
this implies that actions with large overestimations are selected more often than realistically valued
actions. This can reduce the overestimation.

Figure 2 shows the average rewards in the ﬁrst row and the maximum action value in the starting
state in the second row. Double Q-learning performs much better in terms of its average rewards,
but this does not imply that the estimations of the action values are accurate. The optimal value of
the maximally valued action in the starting state is 5γ 4 − P3
k=0 γ k ≈ 0.36, which is depicted in
the second row of Figure 2 with a horizontal dotted line. We see Double Q-learning does not get
much closer to this value in 10, 000 learning steps than Q-learning. However, even if the error of the
action values is comparable, the policies found by Double Q-learning are clearly much better.

5 Discussion

We note an important difference between the well known heuristic exploration technique of opti-
mism in the face of uncertainty [21, 22] and the overestimation bias. Optimism about uncertain
events can be beneﬁcial, but Q-learning can overestimate actions that have been tried often and the
estimations can be higher than any realistic optimistic estimate. For instance, in roulette our initial
action value estimate of $0 can be considered optimistic, since no action has an actual expected value
higher than this. However, even after trying 100,000 actions Q-learning on average estimated each
gambling action to be worth almost $10. In contrast, although Double Q-learning can underestimate

7

the values of some actions, it is easy to set the initial action values high enough to ensure optimism
for actions that have experienced limited updates. Therefore, the use of the technique of optimism in
the face of uncertainty can be thought of as an orthogonal concept to the over- and underestimation
that is the topic of this paper.

The analysis in this paper is not only applicable to Q-learning. For instance, in a recent paper
on multi-armed bandit problems, methods were proposed to exploit structure in the form of the
presence of clusters of correlated arms in order to speed up convergence and reduce total regret
[23]. The value of such a cluster in itself is an estimation task and the proposed methods included
taking the mean value, which would result in an underestimation of the actual value, and taking the
maximum value, which is a case of the single estimator and results in an overestimation. It would
be interesting to see how the double estimator approach fares in such a setting.

Although the settings in our experiments used stochastic rewards, our analysis is not limited to MDPs
with stochastic reward functions. When the rewards are deterministic but the state transitions are
stochastic, the same pattern of overestimations due to this noise can occur and the same conclusions
continue to hold.

6 Conclusion

We have presented a new algorithm called Double Q-learning that uses a double estimator approach
to determine the value of the next state. To our knowledge, this is the ﬁrst off-policy value based
reinforcement learning algorithm that does not have a positive bias in estimating the action values in
stochastic environments. According to our analysis, Double Q-learning sometimes underestimates
the action values, but does not suffer from the overestimation bias that Q-learning does. In a roulette
game and a maze problem, Double Q-learning was shown to reach good performance levels much
more quickly.

Future work Interesting future work would include research to obtain more insight into the merits
of the Double Q-learning algorithm. For instance, some preliminary experiments in the grid world
showed that Q-learning performs even worse with higher discount factors, but Double Q-learning
is virtually unaffected. Additionally, the fact that we can construct positively biased and negatively
biased off-policy algorithms raises the question whether it is also possible to construct an unbi-
ased off-policy reinforcement-learning algorithm, without the high variance of unbiased on-policy
Monte-Carlo methods [24]. Possibly, this can be done by estimating the size of the overestimation
and deducting this from the estimate. Unfortunately, the size of the overestimation is dependent on
the number of actions and the unknown distributions of the rewards and transitions, making this a
non-trivial extension.

More analysis on the performance of Q-learning and related algorithms such as Fitted Q-iteration
[12] and Delayed Q-learning [10] is desirable. For instance, Delayed Q-learning can suffer from
similar overestimations, although it does have polynomial convergence guarantees. This is simi-
lar to the polynomial learning rates: although performance is improved from an exponential to a
polynomial rate [14], the algorithm still suffers from the inherent overestimation bias due to the sin-
gle estimator approach. Furthermore, it would be interesting to see how Fitted Double Q-iteration,
Delayed Double Q-learning and other extensions of Q-learning perform in practice when they are
applied to Double Q-learning.

Acknowledgments

The authors wish to thank Marco Wiering and Gerard Vreeswijk for helpful comments. This re-
search was made possible thanks to grant 612.066.514 of the dutch organization for scientiﬁc re-
search (Nederlandse Organisatie voor Wetenschappelijk Onderzoek, NWO).

References

[1] C. J. C. H. Watkins. Learning from Delayed Rewards. PhD thesis, King’s College, Cambridge,
England, 1989.

[2] C. J. C. H. Watkins and P. Dayan. Q-learning. Machine Learning, 8:279–292, 1992.

8

[3] R. Bellman. Dynamic Programming. Princeton University Press, 1957.

[4] T. Jaakkola, M. I. Jordan, and S. P. Singh. On the convergence of stochastic iterative dynamic
programming algorithms. Neural Computation, 6:1185–1201, 1994.

[5] J. N. Tsitsiklis. Asynchronous stochastic approximation and Q-learning. Machine Learning,
16:185–202, 1994.

[6] M. L. Littman and C. Szepesv ´ari. A generalized reinforcement-learning model: Convergence
and applications.
In L. Saitta, editor, Proceedings of the 13th International Conference on
Machine Learning (ICML-96), pages 310–318, Bari, Italy, 1996. Morgan Kaufmann.

[7] R. H. Crites and A. G. Barto. Improving elevator performance using reinforcement learning. In
D. S. Touretzky, M. C. Mozer, and M. E. Hasselmo, editors, Advances in Neural Information
Processing Systems 8, pages 1017–1023, Cambridge MA, 1996. MIT Press.

In
[8] W. D. Smart and L. P. Kaelbling. Effective reinforcement learning for mobile robots.
Proceedings of the 2002 IEEE International Conference on Robotics and Automation (ICRA
2002), pages 3404–3410, Washington, DC, USA, 2002.

[9] M. A. Wiering and H. P. van Hasselt. Ensemble algorithms in reinforcement learning. IEEE
Transactions on Systems, Man, and Cybernetics, Part B, 38(4):930–936, 2008.

[10] A. L. Strehl, L. Li, E. Wiewiora, J. Langford, and M. L. Littman. PAC model-free reinforce-
ment learning. In Proceedings of the 23rd international conference on Machine learning, pages
881–888. ACM, 2006.

[11] M. J. Kearns and S. P. Singh. Finite-sample convergence rates for Q-learning and indirect
algorithms. In Neural Information Processing Systems 12, pages 996–1002. MIT Press, 1999.

[12] D. Ernst, P. Geurts, and L. Wehenkel. Tree-based batch mode reinforcement learning. Journal
of Machine Learning Research, 6(1):503–556, 2005.

[13] C. Szepesv ´ari. The asymptotic convergence-rate of Q-learning. In NIPS ’97: Proceedings of
the 1997 conference on Advances in neural information processing systems 10, pages 1064–
1070, Cambridge, MA, USA, 1998. MIT Press.

[14] E. Even-Dar and Y. Mansour. Learning rates for Q-learning. Journal of Machine Learning
Research, 5:1–25, 2003.

[15] E. Van den Steen. Rational overoptimism (and other biases). American Economic Review,
94(4):1141–1151, September 2004.

[16] J. E. Smith and R. L. Winkler. The optimizer’s curse: Skepticism and postdecision surprise in
decision analysis. Management Science, 52(3):311–322, 2006.

[17] E. Capen, R. Clapp, and T. Campbell. Bidding in high risk situations. Journal of Petroleum
Technology, 23:641–653, 1971.

[18] R. H. Thaler. Anomalies: The winner’s curse. Journal of Economic Perspectives, 2(1):191–
202, Winter 1988.

[19] J. L. W. V. Jensen. Sur les fonctions convexes et les in ´egalit ´es entre les valeurs moyennes.
Journal Acta Mathematica, 30(1):175–193, 1906.

[20] S. P. Singh, T. Jaakkola, M. L. Littman, and C. Szepesv ´ari. Convergence results for single-step
on-policy reinforcement-learning algorithms. Machine Learning, 38(3):287–308, 2000.

[21] L. P. Kaelbling, M. L. Littman, and A. W. Moore. Reinforcement learning: A survey. Journal
of Artiﬁcial Intelligence Research, 4:237–285, 1996.

[22] R. S. Sutton and A. G. Barto. Reinforcement Learning: An Introduction. The MIT press,
Cambridge MA, 1998.

[23] S. Pandey, D. Chakrabarti, and D. Agarwal. Multi-armed bandit problems with dependent
arms. In Proceedings of the 24th international conference on Machine learning, pages 721–
728. ACM, 2007.

[24] W. K. Hastings. Monte Carlo sampling methods using Markov chains and their applications.
Biometrika, pages 97–109, 1970.

9

