Machine Learning Final: Learning The Structures and Predicting
Behavoir of Potential Function Based Multi-Agent Formations

Doug Beck
Aeronautics and Astronautics
Stanford Univeristy

Tzong-han Lee
Electrical Engineering
( Materials Science By Courtesy)
Stanford Univeristy

Chun-Yeon Lin
Mechanical Engineering
Stanford University

December 10, 2010

Abstract

K eeping formation is a technique used to main-
tain order in multi-agent dynamical systems. Un-
derstanding formations has implications for mili-
tary applications [1] as well as better understand-
ing group behavior [2,3].
In past work, potential
functions involving the distances between agents are
used to maintain formation for both centralized and
decentralized systems [4,5].
In [6], formations are
deﬁned rigorously using sets and the notion of for-
mation rigidity is explained. In [2], Virtual Leaders
are established as a means to move formations held
together by Artiﬁcial Potentials. Artiﬁcial Poten-
tials are also used in robotics research, like in [7].

I n this pro ject, we developed a series of tools
in order to classify groups and their structures, as
well as predict a region which encompasses as many
agents in a targeted group as possible, without en-
compassing any members from untargeted groups.
Classifying groups by observing the dynamics of
multi-agent groups could help distinguish between
friendly and unfriendly forces in a military scenario
in which it is diﬃcult to determine the intent of
certain agents. In determining the overall structure
of a group (the links that deﬁne a formation), one
understands which agents are maintaining distance
with which other agents in order to create global, co-
ordinated behavior the formation is predicated on.
It then becomes easier to identify agents pivitol to
holding the structure together and destroy it more
eﬃciently. For instance, if the group was a cluster of

satellites which were all maintaining position based
on a central comm satellite, destroying the comm
satellite would render the entire group useless. Fi-
nally, better predicting an area in which some tar-
geted group will be after a delay while avoiding un-
targeted groups is important for military scenarios
in which innocent groups are involved. Being able to
accurately predict such an area would have tremen-
dous application in today’s wars, which are more
and more waged amongst civilian parties. The de-
velopment of an accurate algorithm which can iden-
tify such an area with great conﬁdence would help
one predict whether to hold oﬀ on an area focused
attack strategy until there is greater chance of tar-
getted parties being aﬀected without injuring inno-
cent parties.

We use an algorithm highly motivated by k-
means in order to distinguish each of the multi-agent
groups from other groups that are operating in the
same region. We also classify the structure of the
multi-agent system by using logistic regression, us-
ing forward search in order to determine the best
two features to use, where a group’s structure is
deﬁned by the set of links between its agents. A
link implies that two agents are trying to maintain
the distance between them. We model this commu-
nication as internal linear springs which push the
agents apart when the agents are less than some
constant chosen distance apart and pull the agents
together when they are more than some ﬁxed dis-
tance apart. The motion of each agent is damped.
It is important to note that similar potential func-
tions are commonly used in order to maintain forma-

1

tion in decentralized systems [2,3,4,6]. Finally, we
predict a circular area in which an entire targeted
group will be (and which no untargetted agents will
be) using an algorithm which relies heavily on linear
regression.

1 The Chosen Multi-Agent
Model

W e created our own simulation speciﬁcally for
this pro ject using the following model in order to
test the algorithms we developed. We draw from
a chosen uniform distrubution of the constants the
model depends on in order to train and test our
methods on multi-agent systems of varying size and
performance. We discretized our continuous model
by integrating forward in time with Runge-Kutta 4
(RK4).We consider there are m groups, and each
group has n agents. It is assumed that each agent
only knows the distance between it and other agents
it is linked to and that the motion of all agents (ex-
cept for the leader) is governed by applying a force
to themselves proportional in to the diﬀerence be-
tween the current and desired distance between it
and each of the agents it is linked to (like a ﬁrst
(cid:26) k ,
order spring relationship with spring kxi,xj ):
if xi and xj have connection
if xi and xj have no connection
0,
There is one leader in each group, who pulls the
(cid:26) some signal,
rest of the group with a control force:
0,

if xi is the leader
otherwise

k(xi , xj ) =

f c(xi ) =

The following picture helps illustrate the model
we chose:

The state space of each group can be described as
follows:

˙x = Ax + b

2

x =

, b =


(cid:80)∞
i,j=1 kij ∗ (1 − bij )/dij
if i (cid:54)= j
A2+4∗(m−1),2+4∗(n−1) =
0, i=j
kij =the virtual spring rate between agent i and j


bij =the natural length between agent i and j


x1
˙x1
Fc
0
y1
˙y1
Fc
0
.
.
.
.
xn
0
˙xn
0
yn
˙yn
It should be noted that this state matrix is equiva-
(cid:21) (cid:2)kij (1 − dij /(cid:112)(xi − xj )2 + (yi − yj )2 )(cid:3)
(cid:20)xj − xi
lent to applying the following force to the agents:
yj − yi
where kij = kj i and dij = dj i by deﬁnition.
n(cid:80)
j=1
m

(cid:126)Fij =

¨(cid:126)xi =

(cid:126)Fij

The fact that dij is a function of the state, makes
this a nonlinear problem. We add damping to the
system by subtracting a damping term, bi ˙xi from
the acceleration of agent i, ¨xi . This causes the
agents to converge asymptotically to a ﬁnal state
with no velocity or acceleration in the absense of
external forces as proven in [4].

2 Group Classiﬁcation

T he ﬁrst tool was developed to determine which
group each agent corresponded to by observing the
position component of each of the agents’ state over
time alone (wouldn’t know the original group asso-
ciation in the ﬁeld). In order to do this, we used a
modiﬁed version of k-means with a range of k (the
number of cluster centroids) that matched the range

1. Select a k value
2. Initialize k cluster points randomly
3. REPEAT unitil all cluster centroids w/in  {
i. Perform K-Means
ii. Update the initial cluster points from (i)
iii. Increment state of all agents by one
time step


of possible multi-agent groups in the set:

}
4. Agents associated with the same cluster point
are said to be in the same group at simulation
end

How k value chosen for group classiﬁcation

At each simulation time step,
the number of
time increments that the ith agent was associated
with the jth centroid cluster is updated in the ma-
trix, Sij . At the end of the algorithm, each agent
is put in a group for which maxj (Sij ) ∀ agents
i. The maximum distance between any cluster
centroid and any of the agents summed over all the
simulation time steps and normalized by the largest
value for any k is plotted in green against k in the
above ﬁgure. We call this ”total distance.” Also,
the original group error and classiﬁed group error
are plotted against k in blue and red respectively
in the above ﬁgure.
The original group error is the number of agents
across all of the original groups which were associ-
ated with the same cluster point that the ma jority
of the agents in their same original group were di-
vided by the total number of agents. This error
approaches (and reaches) 1 as k approaches 1 be-
cause when all of the agents are associated with the
same cluster point, all of the agents in each agent’s
original group are associated with that same cluster
point. The classiﬁed group accuracy is the number

of agents who are associated with a cluster point
which contains more agents in their original group
than any other group divided by the total number
of agents. This approaches (and reaches) 1 as k ap-
proaches the number of total agents because when
there are as many cluster points as agents, every
agent must be associated with a cluster point which
contains more of its group than any other.
While these error metrics were used in order to
validate the use of total distance as a way to choose
the best k, one would not be able to calculate
them without knowing the original group associa-
tion. The number of cluster centroids is selected
at the beginning of each training run and then the
k for which the total distance stops improving as
dramatically is selected (most likely by a human).
This value of k typically corresponds with both high
original accuracy and high classiﬁed group accuracy
(even when the value of k chosen isn’t exactly true
to the original number of groups being simulated).
One can see from the total distance vs. k curve
(above green), that 4 is the value for k after which
there are only marginal improvements. This makes
sense since we would assume that the agents in a
group are clustered together closer than agents from
other groups. The rationale is that there shouldn’t
be very much improvement after ensuring that there
are at least as many cluster points as there are rel-
atively tightly bound groups on average over time.
The group of agents on right of the below graph
represents a time step at which the agents were all
correctly identiﬁed and the value of k corresponds
exactly to the number of groups being simulated. In
our graphical notation, circles represent agents, and
same colored lines represent links between agents in
the ”real-world” model (the algorithm doesn’t know
which are related in a model sense). Agents with the
same color circle have been classiﬁed in the same
group by the algorithm for the displayed time step.

Simulation of 5 groups of agents classiﬁed by
k-means algoritm at time=2000 and time=20000

The above left ﬁgure demonstrates a case when the

3

groups happen to be fairly close to one another.
This causes a mislabeling at this speciﬁc time step.
The algorithm only works if the agents are watched
long enough that these anomolies represent a small
percentage of the cases and on average, agents
associated with the same cluster point are all
associated with the same original group.
Although we don’t have hard proof based on a se-
ries of humans choosing the values of k at which they
think total distance stops decreasing signiﬁcantly,
the correlation between what we believed this value
of k was and high original and classiﬁed group accu-
racy led us to believe that this algorithm is a useful
candidate for dynamic group classiﬁcation.

3 Link Classiﬁcation

N ext, we developed a tool for link classiﬁcation.
We use logistic regression to classify link or non-link
for any two agents in a group (y (i)=1 or 0 respec-
tively). We used the mean and variance of distance,
velocity, and acceleration over a set number of sim-
ulation time steps as features for all links spanning
two agents in the same group. Each state was ob-
served over a series of time steps and at the end
of the simulation the candidate feature vector, x,
(in the sense of the below equations) was gener-
ated. We then stored the feature vector, x, and
whether there was a link between two agents or not
and restarted the simulation with another randomly
generated group.We used logistic regression to clas-
sify the data with Newton’s method to optimize for
l(θ) as outlined below. We obtained a θ , and used
that θ to classify the test data. We repeated this
method for 60 groups whose size ranged from 4-10
agents and reported the average error for each fea-
ture. Below are the average errors (per simulation
run) when various features were used. Although
this data is biased since there are about 70 % links
to not links, logistic regression proved useful as a
link prediction tool as our end accuracy was greater
than 70 % . We found that it performed better than
GDA since the data was not Gaussian. As displayed
in the below tables, we used forward search, to ﬁnd
that the best two features are variance of the dis-
tance and mean of the acceleration. Also below is
an example of training and test data for our chosen
best features.

hθ (x) = g(θT x), g(z ) =

1
1 + e−z

m(cid:88)
i=1

l(θ) =

y (i) log h(x(i) ) + (1 − y (i) ) log(1 − h(x(i) ))

θ := θ − H −1 (cid:53)θ l(θ)

H is the Hessian matrix

Above is a one of the train/test runs we used in
order to determine an average error. The above
case corresponds to a 91.8% accurate run.

4 Group Behavior Predic-
tion For Area-Based Attack
Strategies

F inally, we developed a tool for predicting an
area in which all agents of a targeted group could
be attacked after some time delay without aﬀecting
other groups. Linear regression on the time history
of each group’s centroid and the average distance
traveled along the line per time step were used to
extrapolate the position of the group centroid after
a time delay. The radius in which it could be ex-
pected all agents would fall within, was picked to be
the max distance from centroid to any agent in any
time step in the same training set. Finally, a radius
about the targeted group,
i’s, expected centroid
is calculated via the below equations where j the
group whose calculated radius comes closest to i’s.

4

References

[1]
C.
Ronald
and
Tucker
Balch,
Arkin.”Behavior Based Formation Control
for Multirobot Teams.” IEEE Transactions on
Robotics and Automation, Vol. 14.,1998.
[2] Leonard, Naomi Ehrich,
and Edward
Fiorelli.”Virtual Leaders, Artiﬁcial Potentials
and Coordinated Control of Groups.” Proceed-
ings of the 40th IEEE Conference on Decision
and Control, 2001.
[3] Fiorelli, Edward and Naomi Ehrich Leonard.
” Cooperative Control of Mobile Sensing
Networks: Adaptive Gradient Climbing in a
Distributed Environment.” IEEE Transactions
on Automatic Control, Vol. 49 No. 8, 2004.
[4] Murray, Richard M., and Reza Olfati-Saber.
”Distributed Cooperative Control of Multiple
Vehicle Formations Using Structural Potential
Functions.” IFAC World Conference, 2002.
[5] Raﬀard, Robin L., Claire J. Tomlin, and
Stephen P. Boyd.”Optimization for Cooperative
Agents:Application to Formation Flight.” 43rd
IEEE Conference on Decision and Control,
2004.
[6] Murray, Richard M., and Reza Olfati-Saber.
”Graph Rigidity and Distributed Formation
Stabilization of Multi-Vehicle Systems.” Pro-
ceedings of
the 41st
IEEE Conference on
Decision and Control, 2002.
[7] O. Khatib,”Real time obstacle avoidance
for manipulators and mobile robots.” Int. J.
Robotics Research, 90-99,1986.

The below ﬁgure shows the percentage time that
the entire targeted group was located within the tar-
get area without any untargeted agents vs. time de-
lay. As one might predict, the larger the time delay
is, the worst the algorithm is at predicting a circular
area which meets the criteria.

5 Conclusion

In this pro ject, we develop tools to classify groups,
classify links, and predict an area in which one can
attack a target group after some delay (such as the
delay after a bomb is launched) with as little collat-
eral damage as possible.
We believe that these or similar tools, which use
machine learning techniques, show promise in mili-
tary applications and could be used in order to more
quickly determine the nature of third party multi-
agent systems. The tools could help to distinguish
agents in one group from another, understand the
rules under which a given group operates to destroy
it faster, and determine the best time to launch an
area based attack without aﬀecting innocent parties.

5

