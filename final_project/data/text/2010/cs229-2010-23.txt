Automated Parameterization of the Joint Space Dynamics of a Robotic Arm 

Josh Petersen 

Introduction 

 

 
The goal of my project was to use machine learning to fully automate the parameterization of the joint space 
dynamics of a robotic arm. When given a set of joint angles, joint velocities, and motor torques, the program would 
determine the A, B, C and G matrices of the dynamics. 
𝐴(𝑞)[𝑞̈ ] + 𝐵(𝑞)[𝑞̇ 𝑞̇ ] + 𝐶 (𝑞)[𝑞̇ 2] + 𝐺 (𝑞) = 𝜏 
 
This was accomplished in several parts. First, two methodologies were created which could automatically 
smooth noisy positions, velocities, and accelerations. Next, two methodologies for creating the feature vector for finding 
the matrices using least squares were developed. Lastly, a structure was setup to combine these elements into one 
streamlined process. 

 

 

Automated Position, Velocity, and Acceleration Smoothing 

The first goal was to automatically smooth the position, velocity, and acceleration profiles. If this program were 
 
to be used in practice on a real robotic arm, smoothing these profiles would allow for better results by reducing the 
effect of noise in the sensor data. Two methods were developed to accomplish this. 

 

 

 
First, weighted linear regression was used. To automatically choose τ such that high bias and high variance was 
avoided, leave one out cross validation was used. The optimal fit occurs when the training error is close to the test error 
where the test error is the defined to be the average of the squared differences between the left out data point and the 
test prediction at that point and the training error is the average of the squared differences between all the training data 
and the predicted points at those locations. 
𝑚𝑖𝑛 𝜏  |𝜀𝑇𝑒𝑠𝑡 − 𝜀𝑇𝑟𝑎𝑖𝑛 | 
(𝑗) �2
∑
𝜀𝑇𝑟𝑎𝑖𝑛 = ∑
𝜀𝑇𝑒𝑠𝑡 = ∑ �𝑦 (𝑖)−𝑦𝑝(𝑖) �2
�𝑦 (𝑗)−𝑦𝑝(𝑖)
𝑚,𝑖≠𝑗
𝑚𝑖=1 𝑚(𝑚−1)
𝑚𝑖=1 𝑚
𝑗=1
 
 
Next, n-th order polynomial fitting was tried using the same criteria. Fits between 0 order to 10th order 
 
polynomials were tried and checked using LOOCV. 
𝑚𝑖𝑛 𝑛  |𝜀𝑇𝑒𝑠𝑡 − 𝜀𝑇𝑟𝑎𝑖𝑛 | 

 

 

 

 

 

 

 
Above are the results for a set of data points generated from a third order polynomial with some noise added. 
Additional testing with varying noise revealed that the weighted linear regression was still susceptible to high variance in 
some cases as discussed in the project milestone. Also, weighted linear regression was much more time intensive than 
the n-th order polynomial fit in general since it required a larger number of τ to try to fit and computing the value at a 
particular point required calculations from each point in the data set. 

 

Generating Feature Vectors 

Next, two methods were developed to create feature vectors for performing least squares to find the 
 
components of the matrices. 

 
First, a function was created that would use the Denavit-Hartenberg Parameters, general center of mass 
directions for each joint and the direction of gravity to form the matrices in symbolic form and another function was 
created to turn these matrices into the feature vector.  

Second, a method was developed to generate a general feature vector for an n degree of freedom robotic arm. 
 
Several properties of the dynamic matrices were used as well as some simplifying assumptions. 

The i-th row and column of the mass matrix,  𝐴(𝑞), can not contain joint angles at or below the i-th joint angle.  
Additionally, the Coriolis and centripetal matrices, 𝐵(𝑞) and 𝐶(𝑞), are simply derivatives of particular components of 
 
the 𝐴(𝑞) matrix. 
revolute joints only. This restricted the 𝐴(𝑞) matrix’s components to be linear combinations of cosines of the joint 
To simply the problem further, the auto-generated feature vectors would be restricted to arms consisting of 
 
angles. Additionally, a base frame in which the x-direction is perpendicular to gravity was assumed. This led to the 𝐺 (𝑞) 
matrix components being linear combinations of cosines of the joint angles. 
 
𝐴(𝑞) = ⎣⎢⎢⎢⎡𝑓(𝑞2 , . . . , 𝑞𝑛 ) 𝑓(𝑞2 , . . . , 𝑞𝑛 ) 𝑓(𝑞2 , . . , 𝑞𝑛 )
⋯
𝑓(𝑞2 , … , 𝑞𝑛 )
⎦⎥⎥⎥⎤ 
𝑓(𝑞2 , . . . , 𝑞𝑛 ) 𝑓(𝑞3 , … , 𝑞𝑛 ) 𝑓(𝑞3 , … , 𝑞𝑛 )
𝑓(𝑞3 , . . . , 𝑞𝑛 )
…
𝑓(𝑞2 , . . . , 𝑞𝑛 ) 𝑓(𝑞3 , … , 𝑞𝑛 )
⋱
⋮
⋮
⋮
𝑓(𝑞𝑛 )
𝑓(𝑞𝑛 )
𝑓(𝑞2 , . . . , 𝑞𝑛 ) 𝑓(𝑞3 , . . . , 𝑞𝑛 )
…
𝑓(𝑞𝑛 )
𝐶𝑛
 
𝑓(𝑞𝑖 , … , 𝑞𝑛 ) = 𝐶 + a1 cos(𝑞𝑖 ) + a2 cos(𝑞𝑖 + 𝑞𝑖+1 ) + ⋯ + 𝑎𝑛−𝑖 cos (𝑞𝑖 + ⋯ + 𝑞𝑛 ) 
 
𝐵(𝑞) = ⎣⎢⎢⎡ 2𝑏1,12
2𝑏1,13 … 2𝑏1,1𝑛
2𝑏1,23 ⋯ 2𝑏1,2𝑛 … 2𝑏1,(𝑛−1)1
2𝑏𝑛,12   2𝑏𝑛,13 ⋯ 2𝑏𝑛,1𝑛 2𝑏𝑛,23 ⋯ 2𝑏𝑛,2𝑛 ⋯ 2𝑏2,(𝑛−1)𝑛 ⎦⎥⎥⎤ 
2𝑏2,13 … 2𝑏2,1𝑛 2𝑏2,23 … 2𝑏2,2𝑛 ⋯ 2𝑏2,(𝑛−1)𝑛
2𝑏2,12
⋮
⋮
⋮
⋮
⋮
⋮
⋮
⋮
⋮
 
𝐶 (𝑞) = ⎣⎢⎢⎡𝑏1,11
𝑏1,22 … 𝑏1,𝑛𝑛
𝑏𝑛,11 𝑏𝑛,22 … 𝑏𝑛,𝑛𝑛 ⎦⎥⎥⎤   
𝑏2,22 … 𝑏2,𝑛𝑛
𝑏2,11
𝑏𝑖𝑗𝑘 = 12 �𝜕𝑚𝑖𝑗𝜕𝑞𝑘 + 𝜕𝑚𝑖𝑘𝜕𝑞𝑗 − 𝜕𝑚𝑗𝑘𝜕𝑞𝑖 � 
⋮
⋮
⋮
⋮
 
 
 
𝐺 (𝑞) = ⎣⎢⎢⎡g11 cos(𝑞1 ) + 𝑔12 cos(𝑞1 + 𝑞2 ) + ⋯ + 𝑔1𝑛 cos (𝑞1 + ⋯ + 𝑞𝑛 )
⎦⎥⎥⎤ 
𝑔21 cos(𝑞1 + 𝑞2 ) + ⋯ + 𝑔2(𝑛−1) cos (𝑞1 + ⋯ + 𝑞𝑛 )
⋮
𝑔𝑛1 cos (𝑞1 + ⋯ + 𝑞𝑛 )
 
A generalized code structure was then setup to allow any of these methodologies to be used in combination. 
The user can pass in the data and the options desired for smoothing and feature vector creation and the program 
returns the matrices found and plots of the smoothed velocity, the smoothed acceleration, and simulated motion from 
the resulting computed matrices. 

Code Structure 

 

 

One Degree of Freedom Results 

 
After the basic structure for the program was setup, a one degree of freedom robotic arm was simulated to test 
the effects of the differences between the two smoothing methods. Noise was added to the simulated position and 
velocity data and the feature vector in both cases was created using the specified DH parameters. 

Simulation Equations of Motion 
 

 

N-th Order Polynomial Fit 

Weighted Linear Regression 

 

 

 

 
While both result it close approximations of the simulated equations of motion, the n-th order polynomial fit 
slightly out performs the weighted linear regression in this case. Weighted linear regression also took a much longer 
time than the n-th order polynomial fit. 

 
The test revealed another important aspect of finding the matrices. Initially, the simulated trajectory inputted 
into the program was a more ideal trajectory from a controls point of view, with no overshoot or oscillation. The 
calculated parameters were not as close to the actual values as in the above case. Further testing with higher degree of 
freedom systems and varying gains revealed that to get more accurate results from this methodology, the trajectory 
coming in must have all the modes activated. That is, more oscillation helped to get better parameter estimations. 

Two Degree of Freedom Results 

 
To test the auto-generated feature vector, a two degree of freedom, planar revolute joint arm was simulated. 
The following equations are the simulation equation of motion and the computed equation of motion respectively. 

 

 

 

 

Other cases in which extra terms existed that were not in the simulated dynamic model performed well but not 
as well as this case. The extra terms tended to have very small coefficients that affected the resulting simulation to a 
greater degree than that above but still not large enough to cause significant deviation. 

Further Work 
One thing to notice is that the mass matrix is not symmetric in the two degree of freedom example. For 
 
current process by ensuring the mass matrix is symmetric. Additionally, since the 𝐵(𝑞) and 𝐶 (𝑞) matrices are derivatives 
simulation, the mass matrix was made symmetric using the worse estimate but further work could improve up the 
of the 𝐴(𝑞) matrix, a more accurate set of equations may be able to be found by try to learn just 𝐴(𝑞) and then 
derivating to find 𝐵(𝑞) and 𝐶 (𝑞). Further work could also be done to ensure that trajectories coming into the program 
activate all modes. Commanding oscillatory torques and recording the output to be put into the currently developed 
may lead to better matrix estimations and would lead to a more completely automated system. 

