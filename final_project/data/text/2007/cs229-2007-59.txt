Automatically Detecting Banner Ads in Web Pages
Douglas Greiman
Stanford University, Stanford, CA 94305
duggelz@gmail.com

1. Introduction
This paper describes AdZap, a program fo r
de tecting and blocking advertisements on web
pages. AdZap uses a set of labeled train ing data
co llec ted from the user as inpu t to a supervised
learning algorithm. The trained algorithm then
examines images embedded in HTML
documents shown to the user and hides images
classified as advertisements.

2. Background
There are a number o f mechan isms fo r
de livering advertisements on the web. Fo r
simplicity, AdZap on ly considers IMG tags,
which are the most common mechanism. An
HTML document contains embedded images
where each image is represented by an IMG
element. An IMG element has a set of HTML
attribu tes, and a set o f CSS attributes. One of
the HTML attribu tes is a URL pointing to the
image file to be d isplayed in the documen t. In
the rest of this paper, references to “HTML
attribu tes” will mean all attributes except the
URL.
Advertisemen t URLs are usually generated by
ad -serving software based on the location and
content of the document in wh ich they appear,
along with other factors such as current
advertisement inventory. The same page
viewed at different times will display differen t
advertisements, although usually in the same
format and the same location on the page.
There are a large number o f differen t ad -serving
software packages available. Each package
constructs URLs in a fairly arb itrary and
distinctive way.
There are also number of ad-blocking software

packages available to detec t and block
advertisements on web pages. Currently, these
ad-blockers use hand-constructed lists of
regular expressions. Every URL fe tched by the
user's browser is compared against the regular
expressions. Images that match are hidden
from d isplay o r replaced with a b lank image .
Other HTML and CSS attributes of the images
are ignored.
Lists o f regu lar expressions are reasonab ly
effec tive for advertisements already seen .
However, they require regu lar maintenance.
Furthermo re , the great majority o f end users are
not capable of o r willing to craft regular
expressions to identify advertisemen ts. Thus,
ad-blocking programs rely on lists maintained
by small groups o f experts and distribu ted to
end users on a regular basis.

3. Classifying Images
AdZap construc ts labeled featu re vectors based
on clicks from the user, as described below.
There are two possible labe ls: “ad” and “not-
ad”. These vectors are used to train a Naïve
Bayes Multivariate Bernoulli event model. The
model is retrained each time the user creates a
new feature vector. When the model changes,
all currently displayed images are reclassified
and redisp layed as appropriate.
An image has two types o f in fo rmation
associated with it: image content, and image
context. Image content is the actual pixel data
o f the image . Image context is all the ancillary
information required by the b rowser to locate
and display the image correctly. AdZap, like all
o ther ad-blockers, only uses context
information. The actual conten t of the image is
not examined.

There is a lot of context information available
for use. The IMG element con tains HTML and
CSS attributes, which are key-value pairs with
seman tics based on key names. The most
important is the "src" attribute, whose value is
the URL of the image file to display. This
attribu te is treated separate ly from all others.

3.1 Feature Construction
AdZap uses a very simple method of creating
features from the URL. The URL is b roken
into tokens at non-alphanumeric boundaries.
Series o f tokens that are separated only by do ts
or hyphens are jo ined toge ther to create
additional larger tokens. For examp le , the URL
“http://speed.pointroll.com/Point-
Roll/…” is translated to the feature se t:
{“url:speed”, “url:pointroll”,
“url:com”, “url:speed.pointroll.com”,
“url:Point”, “url:Roll”, “url:Point-
Roll”, … }. The hostname is not
distingu ished from the other parts of the URL .
It is common fo r ad URLs to inc lude
redirection steps, where the actual add ress o f
the image file is embedded as a query
parameter inside a URL to a redirector site, fo r
user tracking and other purposes.
AdZap uses another simple method of creating
features from the HTML and CSS attributes.
Each key/value pair is concatenated into a
single token . For examp le , <IMG height=”20”
border=”1”> is translated to the featu re set
{“attribute:height:20”,
“attribute:border:1”}.
Note that attributes with the same key and
different values are treated as un re lated by the
model. That is, “height:20” and
“height:30” are separate d imensions in the
feature vector, with possible values 0 and 1,
rather than a single dimension “height” with
values from 0 to 1000. Also , integer valued
attribu tes are not grouped into a smaller number
of buckets (e.g. values from “height:25” to
“height:35” are not normalized to
“height:30”). Th is is mo tivated by the fact
that the ad industry has a set of standard ad

sizes, spec ified to the pixel. An image with one
o f the standard sizes is very likely an ad, and
converse ly, a size that is even one pixe l
d ifferent is much less likely to be an ad.
Location o f the image on the page is also
informative: banner advertisements are
common ly p laced along the top and righ t side
o f web pages, and less often on the left side or
in the center. However, location is a difficult
attribute to wo rk with , since it depends on the
shape, size and layout o f the browser window
and the rest of the documen t. Maximizing the
b rowser window, adding or removing UI
e lements to the browser window, o r even
changing the font, can change the location o f
images. AdZap currently ignores attribu tes
specifying location.

4. Implementation
AdZap is a Firefox browser p lugin. Note that
AdZap is a new piece o f software and is
unrelated to the “adzapper” package fo r squid
p roxies.
When a document is first loaded in the b rowser,
each IMG tag is examined, and c lassified as
“ad” or “not-ad” by the mode l. Ads are hidden
by rendering them 90% transparent. This
makes ads virtually invisible, but still makes the
image visible enough for the user to recover
from c lassification errors.
AdZap adds some controls to the b rowser
window. Clicking on the AdZap button pu ts the
b rowser in “zapping mode” . In zapp ing mode ,
a left-c lick on an image labels that image as an
“ad” . Similarly, a right-c lick labels the image
as “not-ad”. The image list at the bo ttom of the
window con tains all the images in the cu rrent
document, and left and righ t clicks in this list
behave the same as zapping mode clicks.
Labe ls created by these clicks are saved in a
persisten t store, and the model is retrained each
time the user c licks.

Figure 1:AdZap User Interface

4.1 Training Data
The first design o f AdZap on ly allowed the user
to label ads. Every image on a page that was
no t explicitly labeled “ad” was implicitly
labe led “not-ad” and used to train the mode l.
This implicit labe ling wo rks poo rly.
Experienced web surfers have trained
themselves to identify and ignore ads at a
subconscious level ("ad blindness"), so it is
easy to overlook ads even when consciously
looking fo r them. Beyond that, pages con tain
dozens, some times of hundreds of images that
are small, unobtrusive, or even invisib le . For
example, CNN’s home page has more than 160
images. A small number are ads o r news

photos. The majo rity are company logos,
invisib le “web bugs”, partner logos, icons of
unknown pu rpose , cobranding logos, and more.
Web bugs are a particular p roblem, because
the ir URLs are very similar to ad image URLs,
but they never get marked as ads because they
are invisib le .
Finally, there are many images that are simp ly
ambiguous. For examp le , Fo rbes’ home page
contains a medium-sized image of a vehic le
linked to ForbesAutos.com. On the one hand,
this is a legitimate navigation link to ano ther
sec tion o f Forbes’ web site. Fo rbesAu tos.com
contains free auto reviews and other meaningful
conten t. On the o ther hand, the image
p rominently features a Lincoln Towncar, and

clicking the link takes you directly to the
Lincoln sec tion o f Fo rbesAu tos.com, complete
with ads by Lincoln and links to purchase a
Lincoln. It’s purpose ly unclear where the
dividing line be tween editorial conten t and
advertising is.
This was a real problem un til I realized that, for
the great majority o f images on the web , their
proper c lassification is “don’t know and don’t
care”. The user cares abou t the large, flashing,
annoying ads, and the large, in teresting,
meaningful pho tos and o ther actual content.
Everyth ing else is igno rable.
The second and current design o f AdZap
introduces a catego ry o f “ignore”. All images
smaller that a certain area are “ignore”. This
takes care o f web bugs, company logos, and the
like. Images that are very narrow or very sho rt
are also “igno re”. Th is takes care of border art
and lines. Images in “igno re” are not used as
train ing data (unless explic itly relabeled as “ad”
or “no t-ad” by the user), and are not c lassified
by the model. They are disp layed normally in
the browser.
Fu rthermore, the second design of AdZap
allows the user to explicitly labe l images as
“not-ad” as well as “ad”. These labeled images
are used as training data. Images that are not
labe led are no t used as training data, however
they are c lassified by the model and hidden if
classified as an “ad”. Since “ad” images are
rendered mostly transparent instead of totally
hidden, th is creates a simple feedback loop with
the user. When the user no tices misclassified
images, they can explicitly label them and thus
improve the model.

5. Experimental Results
It was not immediate ly c lear what the best way
to gather train ing data was. One could imagine
enumerating all the web pages in existence and
visiting a random samp le o f them. Th is has
some logistical problems, and it’s not clear that
this would actually be representative of a real

user experience anyway.
I decided to visit a selection of news sites.
These sites offer a rich selection of news
photos, advertisements, and miscellaneous
images. My test p rocedure was to visit
news.google.com, and for each story on the
front page , follow the top three links for that
sto ry. Each story link goes to an article page on
a news site like nytimes.com. On each article
page , I c lassified every visible image as “ad”,
“not-ad” o r “don’t know and don ’t care” (by
not clicking on that image). I repeated this
p rocedure at intervals, since the sto ries on
news.google.com change over time , un til I had
sufficien t data points.
This training data was used to evaluate the
model using d ifferent sets o f features, as shown
on Figure 2 (see next page). Each co lor
rep resents a mode l that incorpo rates only the
featu res listed in the legend above. Each
featu re set was evaluated using 20-fo ld cross-
validation on train ing sets o f various sizes.

6. Conclusions
Training a Naïve Bayes model on image URLs
is very e ffec tive at identifying ads. The few
errors that occur have little negative effect on
the user’s browsing experience . Some error is
unavoidab le due to the inherent ambiguity o f
certain images.
Training a mode l on HTML and CSS attribu tes
is no t very effec tive at iden tifying ads. There
are a number of standardized shapes and
positions for banner ads, and these types o f ads
are detec ted easily. However, images in
unusual places, such as the center of the page,
o r images with unusual shapes, are poorly
c lassified.
Training on both URLs and HTML attribu tes
isn ’t any better than training on just URLs.
This might be due to overtraining.

Figure 2:Evaluation on various feature se ts

7. Future Work:
Currently, ad URLs are d istinc tive ly d ifferent
from non-ad URLs. However, if large numbers
of users started using ad-blocking so ftware, ad
compan ies wou ld p robably respond by making
their URLs indistinguishable from o ther image
URLs, wh ich would be fairly easy. If th is
happened, then ad classification based on
HTML attributes like size and location wou ld
become re lative ly more useful, since these
attribu tes can’t be ob fuscated like the URL can.
It might be possible to imp rove the
performance of HTML featu res by mo re
complex analysis o f web pages. For examp le ,
most advertisements are clickable links,
meaning that the IMG element is contained
inside an A element. The A element has its own
attribu tes, and its own URL, describ ing where
the user will be sen t if they c lick on the
advertisement.

8. References
Nielsen, Jakob, “Banner Blindness: Old and
New Findings”, Jacob Nielson’s Alertbox,
h ttp://www.useit.com/alertbox/banner-
b lindness.html (accessed December 15 , 2007).
Ragget, Dave, Arnaud Le Ho rs, and Ian Jacobs,
ed. “HTML 4.01 Specification”, W3C,
h ttp://www.w3.org/TR/REC-html40/ (accessed
December 15, 2007).
“Extensions”, Mozilla Foundation,
h ttp://deve loper.mozilla.o rg/en/docs/Extensions
(accessed December 15 , 2007)
“adblock” , The Adb lock Project,
h ttp://adblock.mozdev.org (accessed December
15, 2007 )

