Machine Learning Applied to 3-D Reservoir Simulation

Marco A. Cardoso

1 Introduction

The optimization of subsurface ﬂow processes is important for many applications including oil ﬁeld operations
and the geological storage of carbon dioxide. These optimizations are very demanding computationally due
to the large number of ﬂow simulations that must be performed and the typically large dimension of the
simulation models.
In this work, reduced-order modeling (ROM) techniques are applied to reduce the simulation time of
complex large-scale subsurface ﬂow models. The procedures all entail proper orthogonal decomposition
(POD), in which a high ﬁdelity training simulation is run, solution snapshots are stored and an eigen-
decomposition is performed on the resulting data matrix. A clustering procedure to reduce the size of the
eigen-decomposition problem and the resulting number of degrees of freedom is also implemented. Extensive
ﬂow simulations involving water injection into a geologically complex 3D oil reservoir model containing 60,000
grid blocks are presented.

2 Modeling procedure

2.1 Reservoir simulation model
Oil reservoir simulation involves the solution of equations governing the ﬂow of reservoir ﬂuids (oil, gas and
water) through porous subsurface formations. More general formulations track individual components (e.g.,
methane, ethane, etc.) and/or include thermal eﬀects. For simplicity, here is considered oil-water ﬂows in
the absence of gravity. The simulator into which the ROM is implemented is quite general, so more complex
systems could be considered with relatively slight modiﬁcations.
The governing equation for ﬂow of oil, gas and water in a porous media is determined incorporating
Darcy’s law and mass balance [1]. The fully implicit solution of the reservoir simulation model is given by:
Tn+1xn+1 − D(xn+1 − xn ) − Q = R
(1)
where T is a block pentadiagonal matrix for two-dimensional grids and a block heptadiagonal matrix for
three-dimensional grids, D is a block diagonal matrix, Q represents the source/sink terms and R is the
residual vector. The time level is designated by the superscript n or n + 1. The Tn+1xn+1 term represents
convective eﬀects while the D(xn+1 − xn ) term represents accumulation. The matrices T, D and Q depend
on x and must be updated at each iteration of every time step.
Equation (1) is nonlinear and is solved by applying Newton’s method, Jδ = −R, to drive the residuals
− xn+1,k
to zero where J is the Jacobian matrix given by Jij = ∂Ri /∂xj and δi = xn+1,k+1
with k and k + 1
i
i
indicating iteration level.

2.2 Proper orthogonal decomposition
Proper orthogonal decomposition (POD) was developed to identify coherent structures in dynamical systems.
The basic idea of the POD technique is to pro ject a high dimensional model onto a low dimensional model.
To generate a POD reduced-order basis a time simulation of the high dimensional ﬂow model is performed
and the states of the system are saved by recording S snapshots for the primary variables oil pressure and
water saturation for all nc grid blocks.

1

The reduced order basis generated for the pressure state will be diﬀerent from the one generated for the
i=1 xi and the data matrix as X = (cid:2) x1 − ¯x,
· · · , xS − ¯x (cid:3)
PS
saturation state because each represent unique physical processes. Therefore, the ROM must be applied
once for the pressure state and once for the saturation state. After the snapshots are obtained, the mean of
the snapshots is computed as ¯x = 1S
nc×S .
Then, a correlation matrix C is determined applying the method of snapshots [4]. With this method,
instead of computing a matrix of dimensions nc × nc , a much smaller matrix of dimensions S × S is computed
Next, the POD basis vectors can be written as a linear combination of the snapshots ϕj = PS
as C = XT X and a small eigen-decomposition problem can be solved as CΨ = λΨ where Ψ represents the
After S basis vectors are computed the basis matrix of dimension nc×S is given by Φ = (cid:2) ϕ1 ,
· · · , ϕS (cid:3)
eigenvectors and λ the eigenvalues of C, respectively.
i=1 Ψi,j Xi .
nc×S .
Moreover, the eigenvalues are related to the energy of the system and, after arranging the eigenvalues
about the model under study. λi represents the energy of each basis vector, Et = PS
in decreasing order, this energy can be used to classify the eigenvectors; consequently, some of them can be
removed from the basis matrix because they have very low energy and do not have signiﬁcant information
i=1 λi and α is the
fraction of the total energy Et that will be retained. Also, α can be diﬀerent for the oil pressure and water
saturation states. The number of basis functions retained, designated l, is simply the ﬁrst l eigenvalues
necessary to provide E ≥ αEt .
Now the reduced state vector for the oil pressure or the water saturation is given by the transformation
equation z ’ ΦT
l (x − ¯x).
As indicated above, for an oil-water system two transformation matrices will be created, Φl p and Φl s for
the oil pressure and water saturation states, respectively, where lp represents the number of retained basis
vectors for the pressure state and ls for the saturation state.
A key aspect of the reduced-order modeling process is the generation of snapshots. The information
embodied in the snapshots is used to compute the POD basis and therefore impacts strongly the ability of
the reduced-order basis to represent the states of the system. The predictive capabilities of the model are
important because our target application is production optimization. This means that we require the ROM
to be predictive for a variety of diﬀerent ﬂow scenarios, and these scenarios are not known in detail when
the snapshots are generated.

2.3 Reduced-order reservoir model
The intent is now to introduce the reduced state z into the discretized ﬂow equations. This will allow to
solve for only lp + ls unknowns rather than 2nc unknowns. By inserting the transformation equation into
the discrete model equation 1 and premultiplying by ΦT
l , the reduced form of the residual equation for the
fully implicit solution is given by:
l DΦl (zn+1 − zn ) − ΦT
l Tn+1 (Φl zn+1 + ¯x) − ΦT
(2)
l Q = ΦT
l R = Rr
ΦT
l J Φl . Finally, Newton’s method can be
Similarly, the reduced Jacobian can be computed as Jr = ΦT
− zn+1,k
applied to the reduced system of equations as Jr δr = −Rr where (δr )i = zn+1,k+1
.
i
i

2.4 Clustering snapshots
Although the POD basis is optimal in the sense that it captures the most information in an average sense, the
number of snapshots needed to capture all of the necessary information to construct a reliable reduced-order
basis can be substantial for complex reservoir simulation models. As a consequence, the eigen-decomposition
problem can become very time-consuming. In addition, although large snapshot sets may contain the infor-
mation needed to construct the reduced-order basis, they also contain redundant information that could be
removed without aﬀecting the quality of the ROM.
One option to address this problem is to apply a technique that clusters a large set of snapshots
{x1 , · · · , xS} into a smaller number of clusters. In our approach, the target number of clusters C is speciﬁed
and the cluster centroids ξ1 , · · · , ξC are initialized. This can be accomplished by choosing randomly C snap-
shots. The algorithm then computes the distance between every xi and all ξj as di = arg minj k xi − ξj k
and assigns each snapshot xi to the closest cluster centroid ξj . The cluster centroids are then shifted so that

2

P
k∈j xk , where Sj is the
each centroid is the mean of all of the snapshots assigned to it given by ξj = 1Sj
number of snapshots in cluster j .
PS
This algorithm is not guaranteed to converge to the global minimum. The clustering procedure is there-
fore repeated several times using a diﬀerent set of initial cluster centroids. The solution with the lowest
i=1 k xi − ξ i
d k is then used. Applying this procedure, S snapshots are reduced to C centroids. Then the
POD procedure described earlier is applied to the C centroids, resulting in a smaller eigen-decomposition
problem.

2.5 Implementation in General Purpose Research Simulator
Stanford’s general purpose research simulator (GPRS), originally formulated by Cao [2], has evolved into
a modeling package containing many advanced capabilities and features. All of the simulations presented
in the following sections were performed using a new version of GPRS which is able to handle the POD
procedure described above.
The ROM described previously can be separated into oﬀ-line (pre-processing) and in-line portions. The
oﬀ-line portion, executed just once, contains all of the computations needed to construct the ROM. This
entails ﬁrst running a training simulation and recording snapshot sets for pressure and saturation. Then,
following the procedure given in section 2.4, the snapshots can be clustered and the basis functions generated
(section 2.2).
The in-line portion of the ROM can be applied for a variety of diﬀerent simulation scenarios. The basis
functions, as determined from the oﬀ-line procedure, are inputs. Then, within the Newton loop, the standard
Jacobian matrix and residual vector are generated, after which the reduced Jacobian and residual are formed.
Then the reduced vector of unknowns (z) is determined by applying Newton’s method, after which the full
state vector (x) is reconstructed. The model initialization and time stepping are exactly as in the standard
simulator. The reduced-order models generate small but full matrices. We therefore apply direct solution
techniques for these linear systems.
In the following section, the performance and timing of the ROM will be compared to full GPRS simula-
tions, so some discussion of the linear solvers applied in GPRS is appropriate. The linear system of equations
arising in the full simulation model is very sparse. For this solution, GPRS employs the iterative generalized
minimum residual (GMRES) solver along with various preconditioners. The constrained pressure residual
(CPR) preconditioner is the most advanced option. This preconditioner is specially designed for the reservoir
simulation equations (it takes full advantage of the elliptic character of the underlying pressure equation)
and is therefore highly eﬃcient. Most comparisons will be against full simulation models that use CPR, so
the comparison will be against what is believed to be (essentially) the best current procedure. More generic
preconditioners, such as ILU(0), are also available within GPRS and will be considered.

2.6 Reservoir simulation results using reduced-order modeling (ROM)
The application of ROM to a realistic reservoir simulation model is illustrated and the ability of the ROM to
provide accurate predictions for cases that diﬀer from the initial training simulation will be demonstrated.
The simulation model, shown in Figure 1, is a portion of a very large geological model developed by
Castro [3]. This model was developed based on a ﬂuvial channel system. The model is three-dimensional
and contains a total of 60,000 grid blocks (with nx=75, ny=100 and nz =8, where nx , ny and nz designate
the number of grid blocks in the corresponding coordinate direction). Five production wells and four water
injection wells drive the ﬂow.
To extract the information needed to reproduce the behavior of the system, a full run (referred to
as the training simulation) was performed. As indicated earlier, the conditions applied for this training
simulation impact the quality of the reduced basis, so they should be selected with care. Here we apply a
heuristic procedure in which we vary the bottom hole pressures (BHPs) of the production wells randomly
and independently over their expected ranges (between 4,150 and 4,850 psia). These BHPs are changed
every 100 days and the resulting schedule is shown in Figure 2. The injector well BHPs are held constant
at 6,500 psia (this BHP is maintained in all runs). A total of 173 snapshots for the oil pressure and water
saturation states were recorded.

3

Figure 1: Reservoir

Figure 2: BHP for the producer wells

Figure 3: Eigenvalue variation for pressure and satu-
ration matrices

Applying the POD approach provides the eigenvalue spectrums for pressure and saturation shown in
Figure 3. It is evident that the maximum eigenvalue for the pressure state is almost 1015 while the minimum
is around 10−5 , which means that the pressure eigenvalues vary over around 20 orders of magnitude. For
the water saturation state this variation is also substantial, about 16 orders of magnitude.
Then a basis is formed such the fraction of energy in the pressure state ignored is very low, around 10−10 ,
and the fraction ignored in the saturation state is around 10−7 . This requires that the ﬁrst 23 eigenvalues
for the oil pressure state and the ﬁrst 35 eigenvalues for the water saturation state are retained. Therefore,
the transformation matrix Φl ∈ Rnc×l , where l = lp + ls has 23 + 35 = 58 basis vectors, meaning that
while the standard reservoir simulation model needs to solve Jδ = −R for 2nc = 120, 000 unknowns, the
reduced-order reservoir simulation model needs to solve Jr δr = −Rr for only 58 unknowns.
Implementing the clustering technique presented in section 2.4, the number of snapshots for each state
was reduced from 173 to 50. Ignoring the same amounts of energy as before, the number of basis functions
required for the oil pressure state decreases from 23 to 14, while for the water saturation state it decreases
from 35 to 25. Thus the reduced-order reservoir simulation model now requires only 39 unknowns.
The ability of the ROM to reproduce the training simulation will be tested using both ROMs (POD and
clusters + POD). Next four diﬀerent ﬂow scenarios are used to evaluate the predictive capability of both
ROMs. The results for the training simulation and schedules I, II, III and IV are presented in appendix A.
An important point is the quantiﬁcation of error using ROMs. Errors arise from the ROM simulations
for two main reasons. These are (1) a large number of basis vectors are discarded which, although less
important than the basis vectors retained, do carry some information, and (2) the ROM is in general applied
to models that diﬀer from the training simulation used to generate the reduced basis.
This error quantiﬁcation could be accomplished in a variety of manners. Here a very simple procedure
focus on error in oil rate, which is the most important output for this application. For each simulated time
step i, the oil production rate in the reference simulation (Qi
o,f ull ) and in each ROM simulation (Qi
o,ROM )
is taken for each well w. The error is then computed as the average of the absolute diﬀerences, normalized

4

Errorw =

− Qi
o,ROMw

|

|Qi
o,f ullw

by the time-average ﬂow rate Qo,f ull of each well:

ntX
1
ntQo,f ullw
i=1
where nt is the total number of time steps. The average error computed using this equation for the training
simulation and the four schedules are presented in Table 1.
It is evident that the training simulation case results in the smallest errors, which is not surprising because
the basis vectors were generated using snapshots from this case. In addition, the ROM generated with only
POD has the smallest error for all examples, presumably because a greater number of basis functions are used
in these cases. While the other ROM perform well, it can be observed that, although clustering snapshots
decreases the number of basis functions, it increases the error by a small amount. For all simulations the
errors are small, less than 3% (when quantiﬁed in this way). We note that there is a tradeoﬀ between
speedup and accuracy, as further speedup could be achieved by decreasing the dimension of Φ, though this
will result in increased error.

(3)

POD
Clusters + POD

Table 1: Errors for the various ROMs
Training data set
Schedule I
Schedule II
Schedule III
0.0111
0.0064
0.0247
0.0031
0.0078
0.0280
0.0084
0.0153

Schedule IV
0.0085
0.0114

Computational speedups for the ROMs using POD and clusters + POD are evaluated relative to full-
order GPRS simulations using a specialized solver and preconditioner combination (GMRES solver and CPR
preconditioner). As shows on Table 2 the maximum speedup obtained was 2.85 for schedule I. However, the
comparison to a full-order GPRS simulation using a much simpler preconditioner (ILU(0)) showed a speedup
of about 130. This highlights the fact that the ROM procedures considered here are very well suited for
situations where the linear solver occupies the great ma jority of the computational time. Otherwise, the
maximum speedup attainable is more limited.

GPRS (CPR)
POD
Clusters + POD

Table 2: Total simulation time for the various ROMs
Schedule I
Training data set
Schedule III
Schedule II
638s/100% 480s/100% 659s/100%
1561s/100%
367s/56%
336s/52%
332s/52%
1017s/65%
774s/49%
220s/35%
215s/45%
295s/45%

Schedule IV
400s/100%
286s/71%
228s/56%

2.6.1 Acknowledgements

I would like to acknowledge the valuable comments provided by Prof. Louis Durlofsky and the implementa-
tion of the ROMs in the GPRS by Pallav Sarma.

References

[1] K. Aziz and A. Settari. Fundamentals of reservoir simulation. Elsevier Applied Science Publishers, 1986.

[2] H. Cao. Development of Techniques for General Purpose Simulators. PhD thesis, Stanford University,
2002.

[3] S. A. Castro. A Probabilistic Approach to Jointly Integrate 3D/4D Seismic Production Data and Geo-
logical Information for Building Reservoir Models. PhD thesis, Stanford University, 2007.

[4] L. Sirovich. Turbulence and the dynamics of coherent structures part I - III. Quarterly of Applied
Mathematics, 45(3):561–590, Oct. 1987.

5

A Additional results

Beside the bottom hole pressures for the producer wells on the training simulation given by Figure 2 the
ROM will be applied to four diﬀerent schedules as shown of Figure 4

(a) Schedule I

(b) Schedule II

(c) Schedule III

(d) Schedule IV

Figure 4: Bottom hole pressure for the producer wells

6

A.1 Training data set
Figure 5 compares the oil ﬂow rate for all producer wells using both procedures. The reference ﬂow rates
from the training simulation (blue circles) are very well reproduced using POD only (red line) and clustered
snapshots + POD (green line). These results are very encouraging and indicate that the snapshot set contains
suﬃcient information to reproduce the training simulation. As a consequence, the POD method selects the
most important directions and ignores the least important. Also can be observed that the clustering approach
reduces the number of snapshots without losing signiﬁcant information.

Figure 5: Oil ﬂow rate for training simulation using full-order GPRS and two ROMs

7

A.2 Schedule I
The schedule for the bottom hole pressures (BHPs) of the production wells using schedule I is shown in
Figure 4(a). The overall range is the same as was used in the training simulation, though the detailed
schedule is quite diﬀerent.
In this example the BHP is changed every 200 days, while in the training
simulation it was changed every 100 days. As in the training simulation, the injection wells are kept at a
constant pressure of 6,500 psia.
Figure 6 shows the oil ﬂow rate for all producer wells using both basis matrices. The ﬂow rates from the
standard (reference) solution (blue circles) are, in general, well reproduced using both ROMs. Relatively
small mismatches can be observed, however, in some of the results (e.g., producer 1 between 1,000 and 1,800
days). Taken in total, these results are very encouraging as they demonstrate the ability of the ROM to
provide ﬂow results for scenarios that diﬀer substantially from the training simulations. This is important if
the ROM is to be used within the context of optimization.

Figure 6: Oil ﬂow rate for schedule I using full-order GPRS and two ROMs

8

A.3 Schedule II
Figure 4(b) shows the bottom hole pressures for the production wells for schedule II. For this example the
overall BHP range (between 4,400 and 4,600 psia) and the frequency for changing the BHP (every 200 days)
are diﬀerent than in the training simulation. Figure 7 shows the oil ﬂow rate for all producer wells using
both basis matrices. As was the case for schedule I, the reference ﬂow rates are again closely matched by
the two ROMs. The BHP variation in this case is over a smaller range than in the training simulation,
so this example demonstrates the ability of the ROMs to predict the reservoir dynamics for ‘interpolating’
conditions.

Figure 7: Oil ﬂow rate for schedule II using full-order GPRS and two ROMs

9

A.4 Schedule III
The producer BHPs for schedule III are shown in Figure 4(c). In this case the overall BHP range is between
4,000 psia and 5,000 psia (a slightly greater range than in the training simulation) and the frequency for
changing the BHP is every 200 days. Figure 8 shows the oil ﬂow rate for all production wells for both
simulation runs. Consistent with the previous results, the ﬂow rates are closely matched by the ROMs. We
can, however, observe some slight mismatches (e.g., well P2 at around 800 days). Overall, this example
demonstrates the ability of the ROMs to ‘extrapolate’ (at least to some degree) outside of the range of the
training simulation. This is a useful capability, as it suggests a degree of robustness with respect to the
settings used in the training simulation.

Figure 8: Oil ﬂow rate for schedule III using full-order GPRS and two ROMs

10

A.5 Schedule IV
The goal here is to demonstrate that the ROMs can also reproduce much simpler reservoir dynamics. Thus
now the BHPs are speciﬁed for all production wells to be constant (4,500 psia) over the entire simulation,
Figure 4(d). Flow results for the ﬁve production wells are shown in Figure 9. The performance of both
ROMs is quite good. This again demonstrates the ability of the ROMs to simulate the dynamics of the
reservoir model for conditions very diﬀerent than those used in the training simulation.

Figure 9: Oil ﬂow rate for schedule IV using full-order GPRS and two ROMs

11

