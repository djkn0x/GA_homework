Optimistic Optimization of a Deterministic Function
without the Knowledge of its Smoothness

R ´emi Munos
SequeL project, INRIA Lille – Nord Europe, France
remi.munos@inria.fr

Abstract

We consider a global optimization problem of a deterministic function f in a semi-
metric space, given a ﬁnite budget of n evaluations. The function f is assumed to
be locally smooth (around one of its global maxima) with respect to a semi-metric
ℓ. We describe two algorithms based on optimistic exploration that use a hierar-
chical partitioning of the space at all scales. A ﬁrst contribution is an algorithm,
DOO, that requires the knowledge of ℓ. We report a ﬁnite-sample performance
bound in terms of a measure of the quantity of near-optimal states. We then deﬁne
a second algorithm, SOO, which does not require the knowledge of the semi-
metric ℓ under which f is smooth, and whose performance is almost as good as
DOO optimally-ﬁtted.

1 Introduction

We consider the problem of ﬁnding a good approximation of the maximum of a function f : X → R
using a ﬁnite budget of evaluations of the function. More precisely, we want to design a sequential
exploration strategy of the search space X , i.e. a sequence x1 , x2 , . . . , xn of states of X , where each
xt may depend on previously observed values f (x1 ), . . . , f (xt−1 ), such that at round n (computa-
tional budget), the algorithms A returns a state x(n) with highest possible value. The performance
of the algorithm is evaluated by the loss

rn = sup
x∈X

f (x) − f (x(n)).

(1)

Here the performance criterion is the accuracy of the recommendation made after n evaluations to
the function (which may be thought of as calls to a black-box model). This criterion is different from
f (x) − Pn
usual bandit settings where the cumulative regret (n supx∈X
t=1 f (x(t))) measures how
well the algorithm succeeds in selecting states with good values while exploring the search space.
The loss criterion (1) is closer to the simple regret deﬁned in the bandit setting [BMS09, ABM10].

Since the literature on global optimization is huge, we only mention the works that are closely
related to our contribution. The approach followed here can be seen as an optimistic sampling
strategy where, at each round, we explore the space where the function could be the largest, given
the knowledge of previous evaluations. A large body of algorithmic work has been developed using
branch-and-bound techniques [Neu90, Han92, Kea96, HT96, Pin96, Flo99, SS00], such as Lipschitz
optimization where the function is assumed to be globally Lipschitz. Our ﬁrst contribution with
respect to (w.r.t.) this literature is to considerably weaken the Lipschitz assumption usually made
and consider only a locally one-sided Lipschitz assumption around the maximum of f . In addition,
we do not require the space to be a metric space but only to be equipped with a semi-metric.

The optimistic strategy has been recently intensively studied in the bandit literature, such as in the
UCB algorithm [ACBF02] and the many extensions to tree search [KS06, CM07] (with application

1

to computer-go [GWMT06]), planning [HM08, BM10, BMSB11], and Gaussian process optimiza-
tion [SKKS10]. The case of Lipschitz (or relaxed) assumption in a metric spaces is considered in
[Kle04, AOS07] and more recently in [KSU08, BMSS08, BMSS11], and in the case of unknown
Lipschitz constant, see [BSY11, Sli11] (where they assume a bound on the Hessian or another re-
lated parameter).

Compared to this literature, our contribution is the design and analysis of two algorithms: (1) A ﬁrst
algorithm, Deterministic Optimistic Optimization (DOO), that requires the knowledge of the semi-
metric ℓ for which f is locally smooth around its maximum. A loss bound is provided (in terms of
the near-optimality dimension of f under ℓ) in a more general setting that previously considered.
(2) A second algorithm, Simultaneous Optimistic Optimization (SOO), that does not require the
knowledge of ℓ. We show that SOO performs almost as well as DOO optimally-ﬁtted.

2 Assumptions about the hierarchical partition and the function

Our optimization algorithms will be implemented by resorting to a hierarchical partitioning of the
space X , which is given to the algorithms. More precisely, we consider a set of partitions of X at
all scales h ≥ 0: for any integer h, X is partitioned into a set of K h sets Xh,i (called cells), where
0 ≤ i ≤ K h − 1. This partitioning may be represented by a K -ary tree structure where each cell
Xh,i corresponds to a node (h, i) of the tree (indexed by its depth h and index i), and such that each
node (h, i) possesses K children nodes {(h + 1, ik )}1≤k≤K . In addition, the cells of the children
{Xh+1,ik , 1 ≤ k ≤ K } form a partition of the parent’s cell Xh,i . The root of the tree corresponds
to the whole domain X (cell X0,0 ). To each cell Xh,i is assigned a speciﬁc state xh,i ∈ Xh,i where
f may be evaluated.

We now state 4 assumptions: Assumptions 1 is about the semi-metric ℓ, Assumption 2 is about the
smoothness of the function w.r.t. ℓ, and Assumptions 3 and 4 are about the shape of the hierarchical
partition w.r.t. ℓ.
Assumption 1 (Semi-metric). We assume that ℓ : X × X → R+ is such that for all x, y ∈ X , we
have ℓ(x, y ) = ℓ(y , x) and ℓ(x, y ) = 0 if and only if x = y .

Note that we do not require that ℓ satisﬁes the triangle inequality (in which case, ℓ would be a
metric). An example of a metric space is the Euclidean space Rd with the metric ℓ(x, y ) = kx − yk
(Euclidean norm). Now consider Rd with ℓ(x, y ) = kx − ykα , for some α > 0. When α ≤ 1, then
ℓ is also a metric, but whenever α > 1 then ℓ does not satisfy the triangle inequality anymore, and is
thus a semi-metric only.
Assumption 2 (Local smoothness of f ). There exists at least a global optimizer x∗ ∈ X of f (i.e.,
f (x∗ ) = supx∈X
f (x)) and for all x ∈ X ,
f (x∗ ) − f (x) ≤ ℓ(x, x∗ ).
(2)
This condition guarantees that f does not decrease too fast around (at least) one global optimum x∗
(this is a sort of a locally one-sided Lipschitz assumption).

Now we state the assumptions about the hierarchical partitions.
Assumption 3 (Bounded diameters). There exists a decreasing sequence δ(h) > 0, such that for
any depth h ≥ 0, for any cell Xh,i of depth h, we have supx∈Xh,i ℓ(xh,i , x) ≤ δ(h).
Assumption 4 (Well-shaped cells). There exists ν > 0 such that for any depth h ≥ 0, any cell Xh,i
contains a ℓ-ball of radius ν δ(h) centered in xh,i .

3 When the semi-metric ℓ is known

In this Section, we consider the setting where Assumptions 1-4 hold for a speciﬁc semi-metric ℓ,
and that the semi-metric ℓ is known from the algorithm.

3.1 The DOO Algorithm

The Deterministic Optimistic Optimization (DOO) algorithm described in Figure 1 uses explicitly
the knowledge of ℓ (through the use of δ(h)). DOO builds incrementally a tree Tt for t = 1 . . . n, by

2

Initialization: T1 = {(0, 0)} (root node)
for t = 1 to n do
def= f (xh,j ) + δ (h) value.
Select the leaf (h, j ) ∈ Lt with maximum bh,j
Expand this node: add to Tt the K children of (h, j )
end for
Return x(n) = arg max(h,i)∈Tn f (xh,i )

Figure 1: Deterministic optimistic optimization (DOO) algorithm.

selecting at each round t a leaf of the current tree Tt to expand. Expanding a leaf means adding its
K children to the current tree (this corresponds to splitting the cell Xh,j into K sub-cells). We start
with the root node T1 = {(0, 0)}. We write Lt the leaves of Tt (set of nodes whose children are not
in Tt ), which are the set of nodes that can be expanded at round t.
This algorithm is called optimistic because it expands at each round a cell that may contain the
optimum of f , based on the information about (i) the previously observed evaluations of f , and (ii)
the knowledge of the local smoothness property (2) of f (since ℓ is known). The algorithm computes
def= f (xh,j ) + δ(h) of all nodes (h, j ) of the current tree Tt and select the leaf with
the b-values bh,j
highest b-value to expand next. It returns the state x(n) with highest evaluation.

3.2 Analysis of DOO

Note that Assumption 2 implies that the b-value of any cell containing x∗ upper bounds f ∗ , i.e., for
any cell Xh,i such that x∗ ∈ Xh,i ,
bh,i = f (xh,i ) + δ(h) ≥ f (xh,i ) + ℓ(xh,i , x∗ ) ≥ f ∗ .
As a consequence, a node (h, i) such that f (xh,i ) + δ(h) < f ∗ will never be expanded (since at any
time t, the b-value of such a node will be dominated by the b-value of the leaf containing x∗ ). We
deduce that DOO only expands nodes of the set I def= ∪h≥0 Ih , where
def= {nodes (h, i) such that f (xh,i ) + δ(h) ≥ f ∗}.
Ih
In order to derive a loss bound we now deﬁne a measure of the quantity of near-optimal states,
called near-optimality dimension. This measure is closely related to similar measures introduced
def= {x ∈ X , f (x) ≥ f ∗ − ε} the set of
in [KSU08, BMSS08]. For any ε > 0, let us write Xε
ε-optimal states.
Deﬁnition 1 (Near-optimality dimension). The near-optimality dimension is the smallest d ≥ 0 such
that there exists C > 0 such that for any ε > 0, the maximal number of disjoint ℓ-balls of radius ν ε
and center in Xε is less than C ε−d .
Note that d is not an intrinsic property of f : it characterizes both f and ℓ (since we use ℓ-balls in the
packing of near-optimal states), and also depend on ν . We now bound the number of nodes in Ih .
Lemma 1. We have |Ih | ≤ C δ(h)−d .

Proof. From Assumption 4, each cell (h, i) contains a ball of radius ν δ(h) centered in xh,i , thus if
|Ih | = |{xh,i ∈ Xδ(h) }| exceeded C δ(h)−d , this would mean that there exists more than C δ(h)−d
disjoint ℓ-balls of radius ν δ(h) with center in Xδ(h) , which contradicts the deﬁnition of d.

We now provide our loss bound for DOO.
Theorem 1. Let us write h(n) the smallest integer h such that C Ph
l=0 δ(l)−d ≥ n. Then the loss
of DOO is bounded as rn ≤ δ(h(n)).

3

Proof. Let (hmax , j ) be the deepest node that has been expanded by the algorithm up to round n.
We known that DOO only expands nodes in the set I . Now, among all node expansion strategies
of the set of expandable nodes I , the uniform strategy is the one which minimizes the depth of the
resulting tree. From the deﬁnition of h(n) and from Lemma 1, we have
Ph(n)−1
|Il | ≤ C Ph(n)−1
δ(l)−d < n,
l=0
l=0
thus the maximum depth of the uniform strategy is at least h(n), and we deduce that hmax ≥ h(n).
Now since node (hmax , j ) has been expanded, we have that (hmax , j ) ∈ I , thus
f (x(n)) ≥ f (xhmax ,j ) ≥ f ∗ − δ(hmax ) ≥ f ∗ − δ(h(n)).
Remark 1. This bound is in terms of the number of expanded nodes n. The actual number of
function evaluations is K n (since each expansion generates K children that need to be evaluated).

Now, let us make the bound more explicit when the diameter δ(h) of the cells decreases exponen-
tially fast with their depth (this case is rather general as illustrated in the examples described next,
as well as in the discussion in [BMSS11]).
Corollary 1. Assume that δ(h) = cγ h for some constants c > 0 and γ < 1. If the near-optimality
d (cid:0)1 − γ d(cid:1)−1/d
d+1
C 1/dn−1/d . Now,
of f is d > 0, then the loss decreases polynomially fast: rn ≤ c
if d = 0, then the loss decreases exponentially fast: rn ≤ cγ (n/C )−1 .
l=0 δ(l)−d = c C γ−d(h(n)+1)−1
Proof. From Theorem 1, whenever d > 0 we have n ≤ C Ph(n)
,
γ−d−1
d+1
thus γ−dh(n) ≥ n
cC (cid:0)1 − γ d (cid:1), from which we deduce that rn ≤ δ(h(n)) ≤ cγ h(n) ≤ c
d (cid:0)1 −
γ d(cid:1)−1/d
C 1/dn−1/d . Now, if d = 0 then n ≤ C Ph(n)
l=0 δ(l)−d = C (h(n) + 1), and we deduce that
the loss is bounded as rn ≤ δ(h(n)) = cγ (n/C )−1 .
3.3 Examples

Example 1: Let X = [−1, 1]D and f be the function f (x) = 1 − kxkα
∞ , for some α ≥ 1.
Consider a K = 2D -ary tree of partitions with (hyper)-squares. Expanding a node means splitting
the corresponding square in 2D squares of half length. Let xh,i be the center of Xh,i .
Consider the following choice of the semi metric: ℓ(x, y ) = kx − ykβ
∞ , with β ≤ α. We have
δ(h) = 2−hβ (recall that δ(h) is deﬁned in terms of ℓ), and ν = 1. The optimum of f is x∗ = 0
and f satisﬁes the local smoothness property (2). Now let us compute its near-optimality dimension.
ε1/β (cid:1)D
For any ε > 0, Xε is the L∞ -ball of radius ε1/α centered in 0, which can be packed by (cid:0) ε1/α
L∞ -balls of diameter ε (since a L∞ -balls of diameter ε is a ℓ-ball of diameter ε1/β ). Thus the near-
optimality dimension is d = D(1/β − 1/α) (and the constant C = 1). From Corollary 1 we deduce
αβ
that (i) when α > β , then d > 0 and in this case, rn = O(cid:0)n− 1
α−β (cid:1). And (ii) when α = β , then
D
d = 0 and the loss decreases exponentially fast: rn ≤ 21−n .
It is interesting to compare this result to a uniform sampling strategy (i.e., the function is evaluated
at the set of points on a uniform grid), which would provide a loss of order n−α/D . We observe that
DOO is better than uniform whenever α < 2β and worse when α > 2β .

This result provides some indication on how to choose the semi-metric ℓ (thus β ), which is a key
ingredient of the DOO algorithm (since δ(h) = 2−hβ appears in the b-values): β should be as
close as possible to the true (but unknown) α (which can be seen as a local smoothness order of f
around its maximum), but never larger than α (otherwise f does not satisfy the local smoothness
property (2)).

Example 2: The previous analysis generalizes to any function which is locally equivalent to kx −
x∗ kα , for some α > 0 (where k · k is any norm, e.g., Euclidean, L∞ , or L1 ), around a global
maximum x∗ (among a set of global optima assumed to be ﬁnite). That is, we assume that there
exists constants c1 > 0, c2 > 0, η > 0, such that
f (x∗ ) − f (x) ≤ c1kx − x∗ kα ,
f (x∗ ) − f (x) ≥ c2kx − x∗ kα ,

for all x ∈ X ,
for all kx − x∗ k ≤ η .

4

Let X = [0, 1]D . Again, consider a K = 2D -ary tree of partitions with (hyper)-squares. Let
ℓ(x, y ) = ckx − ykβ with c1 ≤ c and β ≤ α (so that f satisﬁes (2)). For simplicity we do not
make explicit all the constants using the O notation for convenience (the actual constants depend
on the choice of the norm k · k). We have δ(h) = O(2−hβ ). Now, let us compute the near-
optimality dimension. For any ε > 0, Xε is included in a ball of radius (ε/c2)1/α centered in x∗ ,
ε1/β (cid:1)D
which can be packed by O(cid:0) ε1/α
ℓ-balls of diameter ε. Thus the near-optimality dimension is
d = D(1/β − 1/α), and the results of the previous example apply (up to constants), i.e. for α > β ,
αβ
then d > 0 and rn = O(cid:0)n− 1
α−β (cid:1). And when α = β , then d = 0 and one obtains the exponential
D
rate rn = O(2−α(n/C−1) ).

We deduce that the behavior of the algorithm depends on our knowledge of the local smoothness
(i.e. α and c1 ) of the function around its maximum. Indeed, if this smoothness information is avail-
able, then one should deﬁned the semi-metric ℓ (which impacts the algorithm through the deﬁnition
of δ(h)) to match this smoothness (i.e. set β = α) and derive an exponential loss rate. Now if
this information is unknown, then one should underestimate the true smoothness (i.e. by choosing
αβ
β ≤ α) and suffer a loss rn = O(cid:0)n− 1
α−β (cid:1), rather than overestimating it (β > α) since in this
D
case, (2) may not hold anymore and there is a risk that the algorithm converges to a local optimum
(thus suffering a constant loss).

3.4 Comparison with previous works

Optimistic planning: The deterministic planning problem described in [HM08] considers an op-
timistic approach for selecting the ﬁrst action of a sequence x that maximizes the sum of discounted
rewards. We can easily cast their problem in our setting by considering the space X of the set of
inﬁnite sequences of actions. The metric ℓ(x, y ) is γ h(x,y)/(1 − γ ), where h(x, y ) is the length of
the common initial actions between the sequences x and y , and γ is the discount factor. It is easy
to show that the function f (x), deﬁned as the discounted sum of rewards along the sequence x of
actions, is Lipschitz w.r.t. ℓ and thus satisﬁes (2). Their algorithm is very close to DOO: it expands
a node of the tree (ﬁnite sequence of actions) with highest upper-bound on the possible value. Their
regret analysis makes use of a quantity of near-optimal sequences, from which they deﬁne κ ∈ [1, K ]
that can be seen as the branching factor of the set of nodes I that can be expanded. This measure
is related to our near-optimality dimension by κ = γ−d . Corollary 1 implies directly that the loss
bound is rn = O(n− log 1/γ
log κ ) which is the result reported in [HM08].

HOO and Zooming algorithms: The DOO algorithm can be seen as a deterministic version of
the HOO algorithm of [BMSS11] and is also closely related to the Zooming algorithm of [KSU08].
Those works consider the case of noisy evaluations of the function (X -armed bandit setting), which
is assumed to be weakly Lipschitz (slightly stronger than our Assumption 2). The bounds reported
in those works are (for the case of exponentially decreasing diameters considered in their work
d+1
d+2 ), which translates into the loss
and in our Corollary 1) on the cumulative regret Rn = O(n
considered here as rn = O(n− 1
d+2 ), where d is the near-optimality dimension (or the closely deﬁned
zooming dimension). We conclude that a deterministic evaluation of the function enables to obtain
a much better polynomial rate O(n−1/d ) when d > 0, and even an exponential rate when d = 0
(Corollary 1).

In the next section, we address the problem of an unknown semi-metric ℓ, which is the main contri-
bution of the paper.

4 When the semi-metric ℓ is unknown

We now consider the setting where Assumptions 1-4 hold for some semi-metric ℓ, but the semi-
metric ℓ is unknown. The hierarchical partitioning of the space is still given, but since ℓ is unknown,
one cannot use the diameter δ(h) of the cells to design upper-bounds, like in DOO.

The question we wish to address is: If ℓ is unknown, is it possible to implement an optimistic algo-
rithm with performance guarantees? We provide a positive answer to this question and in addition
we show that we can be almost as good as an algorithm that would know ℓ, for the best possible
ℓ satisfying Assumptions 1-4.

5

The maximum depth function t 7→ hmax (t) is a parameter of the algorithm.
Initialization: T1 = {(0, 0)} (root node). Set t = 1.
while True do
Set vmax = −∞.
for h = 0 to min(depth(Tt ), hmax (t)) do
Among all leaves (h, j ) ∈ Lt of depth h, select (h, i) ∈ arg max(h,j )∈Lt f (xh,j )
if f (xh,i ) ≥ vmax then
Expand this node: add to Tt the K children (h + 1, ik )1≤k≤K
Set vmax = f (xh,i ), Set t = t + 1
if t = n then Return x(n) = arg max(h,i)∈Tn xh,i
end if
end for
end while.

Figure 2: Simultaneous Optimistic Optimization (SOO) algorithm.

4.1 The SOO algorithm

The idea is to expand at each round simultaneously all the leaves (h, j ) for which there exists a
semi-metric ℓ such that the corresponding upper-bound f (xh,j ) + supx∈Xh,j ℓ(xh,j , x) would be
the highest. This is implemented by expanding at each round at most a leaf per depth, and a leaf is
expanded only if it has the largest value among all leaves of same or lower depths. The Simultaneous
Optimistic Optimization (SOO) algorithm is described in Figure 2.
The SOO algorithm takes as parameter a function t → hmax (t) which forces the tree to a maximal
depth of hmax (t) after t node expansions. Again, Lt refers to the set of leaves of Tt .
4.2 Analysis of SOO

All previously relevant quantities such as the diameters δ(h), the sets Ih , and the near-optimality di-
mension d depend on the unknown semi-metric ℓ (which is such that Assumptions 1-4 are satisﬁed).
At time t, let us write h∗t the depth of the deepest expanded node in the branch containing x∗ (an
optimal branch). Let (h∗t + 1, i∗ ) be an optimal node of depth h∗t + 1 (i.e., such that x∗ ∈ Xh∗
t +1,i∗ ).
Since this node has not been expanded yet, any node (h∗t + 1, i) of depth h∗t + 1 that is later expanded,
t +1,i∗ ) ≥ f ∗ −
before (h∗t + 1, i∗) is expanded, is δ(h∗t + 1)-optimal. Indeed, f (xh∗
t +1,i ) ≥ f (xh∗
δ(h∗t + 1). We deduce that once an optimal node of depth h is expanded, it takes at most |Ih+1 | node
expansions at depth h + 1 before the optimal node of depth h + 1 is expanded. From that simple
observation, we deduce the following lemma.
Lemma 2. For any depth 0 ≤ h ≤ hmax (t), whenever t ≥ (|I0 | + |I1 | + · · · + |Ih |)hmax (t), we
have h∗t ≥ h.
Proof. We prove it by induction. For h = 0, we have h∗t ≥ 0 trivially. Assume that the proposition
is true for all 0 ≤ h ≤ h0 with h0 < hmax(t). Let us prove that it is also true for h0 + 1. Let
t ≥ (|I0 | + |I1 | + · · · + |Ih0+1 |)hmax (t). Since t ≥ (|I0 | + |I1 | + · · · + |Ih0 |)hmax (t) we know
that h∗t ≥ h0 . So, either h∗t ≥ h0 + 1 in which case the proof is ﬁnished, or h∗t = h0 . In this
latter case, consider the nodes of depth h0 + 1 that are expanded. We have seen that as long as the
optimal node of depth h0 + 1 is not expanded, any node of depth h0 + 1 that is expanded must be
δ(h0 + 1)-optimal, i.e., belongs to Ih0+1 . Since there are |Ih0+1 | of them, after |Ih0+1 |hmax (t) node
expansions, the optimal one must be expanded, thus h∗t ≥ h0 + 1.
Theorem 2. Let us write h(n) the smallest integer h such that
C hmax (n) Ph
l=0 δ(l)−d ≥ n.

(3)

Then the loss is bounded as

rn ≤ δ(cid:0) min(h(n), hmax (n) + 1)(cid:1).

(4)

6

Proof. From Lemma 1 and the deﬁnition of h(n) we have

hmax(n)

δ(l)−d < n,

h(n)−1
h(n)−1
X
X
|Il | ≤ C hmax (n)
l=0
l=0
thus from Lemma 2, when h(n) − 1 ≤ hmax (n) we have h∗n ≥ h(n) − 1. Now in the case
h(n) − 1 > hmax(n), since the SOO algorithm does not expand nodes beyond depth hmax(n), we
have h∗n = hmax (n). Thus in all cases, h∗n ≥ min(h(n) − 1, hmax(n)).
Let (h, j ) be the deepest node in Tn that has been expanded by the algorithm up to round n. Thus
h ≥ h∗n . Now, from the deﬁnition of the algorithm, we only expand a node when its value is larger
than the value of all the leaves of equal or lower depths. Thus, since the node (h, j ) has been
expanded, its value is at least as high as that of the optimal node (h∗n + 1, i∗) of depth h∗n + 1 (which
has not been expanded, by deﬁnition of h∗n ). Thus
n+1,i∗ ) ≥ f ∗ − δ(h∗n + 1) ≥ f ∗ − δ(min(h(n), hmax (n) + 1)).
f (x(n)) ≥ f (xh,j ) ≥ f (xh∗
Remark 2. This result appears very surprising: although the semi-metric ℓ is not known, the per-
formance is almost as good as for DOO (see Theorem 1) which uses the knowledge of ℓ. The main
difference is that the maximal depth hmax(n) appears both as a multiplicative factor in the deﬁni-
tion of h(n) in (3) and as a threshold in the loss bound (4). Those two appearances of hmax (n)
deﬁnes a tradeoff between deep (large hmax ) versus broad (small hmax ) types of exploration. We
now illustrate the case of exponentially decreasing diameters.
Corollary 2. Assume that δ(h) = cγ h for some c > 0 and γ < 1. Consider the two cases:
• The near-optimality d > 0. Let the depth function hmax(t) = tε , for some ε > 0 arbitrarily
small. Then, for n large enough (as a function of ε) the loss of SOO is bounded as:
1 − γ d (cid:17)1/d
d (cid:16) C
d+1
n− 1−ε
d .
rn ≤ c
• The near-optimality d = 0. Let the depth function hmax (t) = √t. Then the loss of SOO is
bounded as:
rn ≤ cγ√n min(1/C,1)−1 .
Proof. From Theorem 1, when d > 0 we have

δ(l)−d = cC hmax(n)

h(n)
γ−d(h(n)+1) − 1
X
n ≤ C hmax (n)
γ−d − 1
l=0
thus for the choice hmax(n) = nε , we deduce γ−dh(n) ≥ n1−ε
cC (cid:0)1 − γ d(cid:1). Thus h(n) is logarithmic
in n and for n large enough (as a function of ε), h(n) ≤ hmax (n) + 1, thus
1 − γ d (cid:17)1/d
d (cid:16) C
d+1
rn ≤ δ(cid:0) min(h(n), hmax (n) + 1)(cid:1) = δ(h(n)) ≤ cγ h(n) ≤ c
Now, if d = 0 then n ≤ C hmax (n) Ph(n)
l=0 δ(l)−d = C hmax (n)(h(n) + 1), thus for the choice
hmax (n) = √n we deduce that the loss decreases as:
rn ≤ δ(cid:0) min(h(n), hmax (n) + 1)(cid:1) ≤ cγ√n min(1/C,1)−1 .
Remark 3. The maximal depth function hmax (t) is still a parameter of the algorithm, which some-
how inﬂuences the behavior of the algorithm (deep versus broad exploration of the tree). However,
for a large class of problems (e.g. when d > 0) the choice of the order ε does not impact the asymp-
totic performance of the algorithm.
Remark 4. Since our algorithm does not depend on ℓ, our analysis is actually true for any semi-
metric ℓ that satisﬁes Assumptions 1-4, thus Theorem 2 and Corollary 2 hold for the best
possible choice of such a ℓ. In particular, we can think of problems for which there exists a semi-
metric ℓ such that the corresponding near-optimality dimension d is 0.
Instead of describing a
general class of problems satisfying this property, we illustrate in the next subsection non-trivial
optimization problems in X = RD where there exists ℓ such that d = 0.

n− 1−ε
d .

7

4.3 Examples

Example 1: Consider the previous Example 1 where X = [−1, 1]D and f is the function f (x) =
∞ , where α ≥ 1 is unknown. We have seen that DOO with the metric ℓ(x, y ) = kx − ykβ
1 − kxkα
∞
αβ
provides a polynomial loss rn = O(cid:0)n− 1
α−β (cid:1) whenever β < α, and an exponential loss rn ≤ 21−n
D
when β = α. However, here α is unknown.
Now consider the SOO algorithm with the maximum depth function hmax(t) = √t. As mentioned
before, SOO does not require ℓ, thus we can apply the analysis for any ℓ that satisﬁes Assumptions
1-4. So let us consider ℓ(x, y ) = kx − ykα
. Then δ(h) = 2−hα , ν = 1, and the near-optimality
∞
dimension of f under ℓ is d = 0 (and C = 1). We deduce that the loss of SOO is rn ≤ 2(1−√n)α .
Thus SOO provides a stretched-exponential loss without requiring the knowledge of α.
Note that a uniform grid provides the loss n−α/D , which is polynomially decreasing only (and
subject to the curse of dimensionality). Thus, in this example SOO is always better than both
Uniform and DOO except if one knows perfectly α and would use DOO with β = α (in which
case we obtain an exponential loss). The fact that SOO is not as good as DOO optimally ﬁtted
comes from the truncation of SOO at a maximal depth hmax (n) = √n (whereas DOO optimally
ﬁtted would explore the tree up to a depth linear in n).

Example 2: The same conclusion holds for Example 2, where we consider a function f deﬁned on
[0, 1]D that is locally equivalent to kx−x∗ kα , for some unknown α > 0 (see the precise assumptions
in Section 3.3). We have seen that DOO using ℓ(x, y ) = ckx − ykβ with β < α has a loss
αβ
rn = O(cid:0)n− 1
α−β (cid:1), and when α = β , then d = 0 and the loss is rn = O(2−α(n/C−1) ).
D
Now by using SOO (which does not require the knowledge of α) with hmax(t) = √t we deduce the
stretched-exponential loss rn = O(2−√nα/C ) (by using ℓ(x, y ) = kx − ykα in the analysis, which
gives δ(h) = 2−hα and d = 0).

4.4 Comparison with the DIRECT algorithm

The DIRECT (DIviding RECTangles) algorithm [JPS93, FK04, Gab01] is a Lipschitz optimization
algorithm where the Lipschitz constant L of f is unknown. It uses an optimistic splitting technique
similar to ours where at each round, it expands the set of nodes that have the highest upper-bound (as
deﬁned in DOO) for at least some value of L. To the best of our knowledge, there is no ﬁnite-time
analysis of this algorithm (only the consistency property limn→∞ rn = 0 is proven in [FK04]). Our
approach generalizes DIRECT and we are able to derive ﬁnite-time loss bounds in a much broader
setting where the function is only locally smooth and the space is semi-metric.

We are not aware of other ﬁnite-time analysis of global optimization algorithms that do not require
the knowledge of the smoothness of the function.

5 Conclusions

We presented two algorithms: DOO requires the knowledge of the semi-metric ℓ under which the
function f is locally smooth (according to Assumption 2). SOO does not require this knowledge and
performs almost as well as DOO optimally-ﬁtted (i.e. for the best choice of ℓ satisfying Assumptions
1-4). We reported ﬁnite-time loss bounds using the near-optimality dimension d, which relates the
local smoothness of f around its maximum and the quantity of near-optimal states, measured by the
semi-metric ℓ. We provided illustrative examples of the performance of SOO in Euclidean spaces
where the local smoothness of f is unknown.

Possible future research directions include (i) deriving problem-dependent lower bounds, (ii) char-
acterizing classes of functions f such that there exists a semi-metric ℓ for which f is locally smooth
w.r.t. ℓ and whose corresponding near-optimal dimension is d = 0 (in order to have a stretched-
exponentially decreasing loss), and (iii) extending the SOO algorithm to stochastic X -armed bandits
(optimization of a noisy function) when the smoothness of f is unknown.

Acknowledgements: French ANR EXPLO-RA (ANR-08-COSI-004) and the European project
COMPLACS (FP7, grant agreement no231495).

8

References

[ABM10]

J.-Y. Audibert, S. Bubeck, and R. Munos. Best arm identiﬁcation in multi-armed bandits.
Conference on Learning Theory, 2010.

In

[ACBF02]

P. Auer, N. Cesa-Bianchi, and P. Fischer. Finite-time analysis of the multiarmed bandit problem.
Machine Learning Journal, 47(2-3):235–256, 2002.

[AOS07]

[BM10]

[BMS09]

P. Auer, R. Ortner, and Cs. Szepesv ´ari. Improved rates for the stochastic continuum-armed bandit
problem. 20th Conference on Learning Theory, pages 454–468, 2007.

S. Bubeck and R. Munos. Open loop optimistic planning. In Conference on Learning Theory,
2010.

S. Bubeck, R. Munos, and G. Stoltz. Pure exploration in multi-armed bandits problems. In Proc.
of the 20th International Conference on Algorithmic Learning Theory, pages 23–37, 2009.

[BMSB11] L. Busoniu, R. Munos, B. De Schutter, and R. Babuska. Optimistic planning for sparsely stochas-
tic systems.
In IEEE International Symposium on Adaptive Dynamic Programming and Rein-
forcement Learning, 2011.

[BMSS08] S. Bubeck, R. Munos, G. Stoltz, and Cs. Szepesv ´ari. Online optimization of X-armed bandits.
In D. Koller, D. Schuurmans, Y. Bengio, and L. Bottou, editors, Advances in Neural Information
Processing Systems, volume 22, pages 201–208. MIT Press, 2008.

[BMSS11] S. Bubeck, R. Munos, G. Stoltz, and Cs. Szepesv ´ari. X-armed bandits. Journal of Machine
Learning Research, 12:1655–1695, 2011.

[BSY11]

S. Bubeck, G. Stoltz, and J. Y. Yu. Lipschitz bandits without the Lipschitz constant. In Proceed-
ings of the 22nd International Conference on Algorithmic Learning Theory, 2011.

[CM07]

[FK04]

[Flo99]

P.-A. Coquelin and R. Munos. Bandit algorithms for tree search.
Intelligence, 2007.

In Uncertainty in Artiﬁcial

D. E. Finkel and C. T. Kelley. Convergence analysis of the direct algorithm. Technical report,
North Carolina State University, Center for, 2004.

C.A. Floudas. Deterministic Global Optimization: Theory, Algorithms and Applications. Kluwer
Academic Publishers, Dordrecht / Boston / London, 1999.

[Gab01]

J. M. X. Gablonsky. Modiﬁcations of the direct algorithm. PhD thesis, 2001.

[GWMT06] S. Gelly, Y. Wang, R. Munos, and O. Teytaud. Modiﬁcation of UCT with patterns in monte-carlo
go. Technical report, INRIA RR-6062, 2006.

[Han92]

E.R. Hansen. Global Optimization Using Interval Analysis. Marcel Dekker, New York, 1992.

[HM08]

[HT96]

[JPS93]

[Kea96]

[Kle04]

[KS06]

J-F. Hren and R. Munos. Optimistic planning of deterministic systems. In European Workshop on
Reinforcement Learning Springer LNAI 5323, editor, Recent Advances in Reinforcement Learn-
ing, pages 151–164, 2008.

R. Horst and H. Tuy. Global Optimization ? Deterministic Approaches. Springer, Berlin / Hei-
delberg / New York, 3rd edition, 1996.

D. R. Jones, C. D. Perttunen, and B. E. Stuckman. Lipschitzian optimization without the lipschitz
constant. Journal of Optimization Theory and Applications, 79(1):157–181, 1993.

R. B. Kearfott. Rigorous Global Search: Continuous Problems. Kluwer Academic Publishers,
Dordrecht / Boston / London, 1996.

R. Kleinberg. Nearly tight bounds for the continuum-armed bandit problem. In 18th Advances in
Neural Information Processing Systems, 2004.

L. Kocsis and Cs. Szepesv ´ari. Bandit based Monte-Carlo planning. In Proceedings of the 15th
European Conference on Machine Learning, pages 282–293, 2006.

[KSU08]

R. Kleinberg, A. Slivkins, and E. Upfal. Multi-armed bandits in metric spaces. In Proceedings of
the 40th ACM Symposium on Theory of Computing, 2008.

[Neu90]

Neumaier. Interval Methods for Systems of Equations. Cambridge University Press, 1990.

[Pin96]

J.D. Pint ´er. Global Optimization in Action (Continuous and Lipschitz Optimization: Algorithms,
Implementations and Applications). Kluwer Academic Publishers, 1996.

[SKKS10] Niranjan Srinivas, Andreas Krause, Sham Kakade, and Matthias Seeger. Gaussian process opti-
mization in the bandit setting: No regret and experimental design. In International Conference on
Machine Learning, pages 1015–1022, 2010.

[Sli11]

[SS00]

A. Slivkins. Multi-armed bandits on implicit metric spaces. In Advances in Neural Information
Processing Systems, 2011.

R.G. Strongin and Ya.D. Sergeyev. Global Optimization with Non-Convex Constraints: Sequen-
tial and Parallel Algorithms. Kluwer Academic Publishers, Dordrecht / Boston / London, 2000.

9

